
ADC_EXAMPLE1_GFX4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002abc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00802000  00002abc  00002b50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000212  00802024  00802024  00002b74  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002b74  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00002bd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  00002c18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00010090  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000525a  00000000  00000000  000130a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008986  00000000  00000000  000182fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000dec  00000000  00000000  00020c80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003324f  00000000  00000000  00021a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000069dc  00000000  00000000  00054cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004a0  00000000  00000000  0005b698  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c564  00000000  00000000  0005bb38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	64 c2       	rjmp	.+1224   	; 0x4ce <__bad_interrupt>
       6:	00 00       	nop
       8:	62 c2       	rjmp	.+1220   	; 0x4ce <__bad_interrupt>
       a:	00 00       	nop
       c:	60 c2       	rjmp	.+1216   	; 0x4ce <__bad_interrupt>
       e:	00 00       	nop
      10:	5e c2       	rjmp	.+1212   	; 0x4ce <__bad_interrupt>
      12:	00 00       	nop
      14:	5c c2       	rjmp	.+1208   	; 0x4ce <__bad_interrupt>
      16:	00 00       	nop
      18:	5a c2       	rjmp	.+1204   	; 0x4ce <__bad_interrupt>
      1a:	00 00       	nop
      1c:	58 c2       	rjmp	.+1200   	; 0x4ce <__bad_interrupt>
      1e:	00 00       	nop
      20:	56 c2       	rjmp	.+1196   	; 0x4ce <__bad_interrupt>
      22:	00 00       	nop
      24:	54 c2       	rjmp	.+1192   	; 0x4ce <__bad_interrupt>
      26:	00 00       	nop
      28:	52 c2       	rjmp	.+1188   	; 0x4ce <__bad_interrupt>
      2a:	00 00       	nop
      2c:	50 c2       	rjmp	.+1184   	; 0x4ce <__bad_interrupt>
      2e:	00 00       	nop
      30:	4e c2       	rjmp	.+1180   	; 0x4ce <__bad_interrupt>
      32:	00 00       	nop
      34:	4c c2       	rjmp	.+1176   	; 0x4ce <__bad_interrupt>
      36:	00 00       	nop
      38:	4a c2       	rjmp	.+1172   	; 0x4ce <__bad_interrupt>
      3a:	00 00       	nop
      3c:	48 c2       	rjmp	.+1168   	; 0x4ce <__bad_interrupt>
      3e:	00 00       	nop
      40:	46 c2       	rjmp	.+1164   	; 0x4ce <__bad_interrupt>
      42:	00 00       	nop
      44:	44 c2       	rjmp	.+1160   	; 0x4ce <__bad_interrupt>
      46:	00 00       	nop
      48:	42 c2       	rjmp	.+1156   	; 0x4ce <__bad_interrupt>
      4a:	00 00       	nop
      4c:	40 c2       	rjmp	.+1152   	; 0x4ce <__bad_interrupt>
      4e:	00 00       	nop
      50:	3e c2       	rjmp	.+1148   	; 0x4ce <__bad_interrupt>
      52:	00 00       	nop
      54:	3c c2       	rjmp	.+1144   	; 0x4ce <__bad_interrupt>
      56:	00 00       	nop
      58:	3a c2       	rjmp	.+1140   	; 0x4ce <__bad_interrupt>
      5a:	00 00       	nop
      5c:	38 c2       	rjmp	.+1136   	; 0x4ce <__bad_interrupt>
      5e:	00 00       	nop
      60:	36 c2       	rjmp	.+1132   	; 0x4ce <__bad_interrupt>
      62:	00 00       	nop
      64:	34 c2       	rjmp	.+1128   	; 0x4ce <__bad_interrupt>
      66:	00 00       	nop
      68:	32 c2       	rjmp	.+1124   	; 0x4ce <__bad_interrupt>
      6a:	00 00       	nop
      6c:	30 c2       	rjmp	.+1120   	; 0x4ce <__bad_interrupt>
      6e:	00 00       	nop
      70:	2e c2       	rjmp	.+1116   	; 0x4ce <__bad_interrupt>
      72:	00 00       	nop
      74:	2c c2       	rjmp	.+1112   	; 0x4ce <__bad_interrupt>
      76:	00 00       	nop
      78:	2a c2       	rjmp	.+1108   	; 0x4ce <__bad_interrupt>
      7a:	00 00       	nop
      7c:	28 c2       	rjmp	.+1104   	; 0x4ce <__bad_interrupt>
      7e:	00 00       	nop
      80:	26 c2       	rjmp	.+1100   	; 0x4ce <__bad_interrupt>
      82:	00 00       	nop
      84:	24 c2       	rjmp	.+1096   	; 0x4ce <__bad_interrupt>
      86:	00 00       	nop
      88:	22 c2       	rjmp	.+1092   	; 0x4ce <__bad_interrupt>
      8a:	00 00       	nop
      8c:	20 c2       	rjmp	.+1088   	; 0x4ce <__bad_interrupt>
      8e:	00 00       	nop
      90:	1e c2       	rjmp	.+1084   	; 0x4ce <__bad_interrupt>
      92:	00 00       	nop
      94:	1c c2       	rjmp	.+1080   	; 0x4ce <__bad_interrupt>
      96:	00 00       	nop
      98:	1a c2       	rjmp	.+1076   	; 0x4ce <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__vector_39>
      a0:	0c 94 61 0a 	jmp	0x14c2	; 0x14c2 <__vector_40>
      a4:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <__vector_41>
      a8:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <__vector_42>
      ac:	10 c2       	rjmp	.+1056   	; 0x4ce <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0e c2       	rjmp	.+1052   	; 0x4ce <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0c c2       	rjmp	.+1048   	; 0x4ce <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0a c2       	rjmp	.+1044   	; 0x4ce <__bad_interrupt>
      ba:	00 00       	nop
      bc:	08 c2       	rjmp	.+1040   	; 0x4ce <__bad_interrupt>
      be:	00 00       	nop
      c0:	06 c2       	rjmp	.+1036   	; 0x4ce <__bad_interrupt>
      c2:	00 00       	nop
      c4:	04 c2       	rjmp	.+1032   	; 0x4ce <__bad_interrupt>
      c6:	00 00       	nop
      c8:	02 c2       	rjmp	.+1028   	; 0x4ce <__bad_interrupt>
      ca:	00 00       	nop
      cc:	00 c2       	rjmp	.+1024   	; 0x4ce <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fe c1       	rjmp	.+1020   	; 0x4ce <__bad_interrupt>
      d2:	00 00       	nop
      d4:	fc c1       	rjmp	.+1016   	; 0x4ce <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fa c1       	rjmp	.+1012   	; 0x4ce <__bad_interrupt>
      da:	00 00       	nop
      dc:	f8 c1       	rjmp	.+1008   	; 0x4ce <__bad_interrupt>
      de:	00 00       	nop
      e0:	f6 c1       	rjmp	.+1004   	; 0x4ce <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f4 c1       	rjmp	.+1000   	; 0x4ce <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f2 c1       	rjmp	.+996    	; 0x4ce <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f0 c1       	rjmp	.+992    	; 0x4ce <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ee c1       	rjmp	.+988    	; 0x4ce <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ec c1       	rjmp	.+984    	; 0x4ce <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ea c1       	rjmp	.+980    	; 0x4ce <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e8 c1       	rjmp	.+976    	; 0x4ce <__bad_interrupt>
      fe:	00 00       	nop
     100:	e6 c1       	rjmp	.+972    	; 0x4ce <__bad_interrupt>
     102:	00 00       	nop
     104:	e4 c1       	rjmp	.+968    	; 0x4ce <__bad_interrupt>
     106:	00 00       	nop
     108:	e2 c1       	rjmp	.+964    	; 0x4ce <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e0 c1       	rjmp	.+960    	; 0x4ce <__bad_interrupt>
     10e:	00 00       	nop
     110:	de c1       	rjmp	.+956    	; 0x4ce <__bad_interrupt>
     112:	00 00       	nop
     114:	dc c1       	rjmp	.+952    	; 0x4ce <__bad_interrupt>
     116:	00 00       	nop
     118:	da c1       	rjmp	.+948    	; 0x4ce <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <__vector_71>
     120:	0c 94 99 09 	jmp	0x1332	; 0x1332 <__vector_72>
     124:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <__vector_73>
     128:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__vector_74>
     12c:	d0 c1       	rjmp	.+928    	; 0x4ce <__bad_interrupt>
     12e:	00 00       	nop
     130:	ce c1       	rjmp	.+924    	; 0x4ce <__bad_interrupt>
     132:	00 00       	nop
     134:	cc c1       	rjmp	.+920    	; 0x4ce <__bad_interrupt>
     136:	00 00       	nop
     138:	ca c1       	rjmp	.+916    	; 0x4ce <__bad_interrupt>
     13a:	00 00       	nop
     13c:	c8 c1       	rjmp	.+912    	; 0x4ce <__bad_interrupt>
     13e:	00 00       	nop
     140:	c6 c1       	rjmp	.+908    	; 0x4ce <__bad_interrupt>
     142:	00 00       	nop
     144:	c4 c1       	rjmp	.+904    	; 0x4ce <__bad_interrupt>
     146:	00 00       	nop
     148:	c2 c1       	rjmp	.+900    	; 0x4ce <__bad_interrupt>
     14a:	00 00       	nop
     14c:	c0 c1       	rjmp	.+896    	; 0x4ce <__bad_interrupt>
     14e:	00 00       	nop
     150:	be c1       	rjmp	.+892    	; 0x4ce <__bad_interrupt>
     152:	00 00       	nop
     154:	bc c1       	rjmp	.+888    	; 0x4ce <__bad_interrupt>
     156:	00 00       	nop
     158:	ba c1       	rjmp	.+884    	; 0x4ce <__bad_interrupt>
     15a:	00 00       	nop
     15c:	b8 c1       	rjmp	.+880    	; 0x4ce <__bad_interrupt>
     15e:	00 00       	nop
     160:	b6 c1       	rjmp	.+876    	; 0x4ce <__bad_interrupt>
     162:	00 00       	nop
     164:	b4 c1       	rjmp	.+872    	; 0x4ce <__bad_interrupt>
     166:	00 00       	nop
     168:	b2 c1       	rjmp	.+868    	; 0x4ce <__bad_interrupt>
     16a:	00 00       	nop
     16c:	b0 c1       	rjmp	.+864    	; 0x4ce <__bad_interrupt>
     16e:	00 00       	nop
     170:	ae c1       	rjmp	.+860    	; 0x4ce <__bad_interrupt>
     172:	00 00       	nop
     174:	ac c1       	rjmp	.+856    	; 0x4ce <__bad_interrupt>
     176:	00 00       	nop
     178:	aa c1       	rjmp	.+852    	; 0x4ce <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a8 c1       	rjmp	.+848    	; 0x4ce <__bad_interrupt>
     17e:	00 00       	nop
     180:	a6 c1       	rjmp	.+844    	; 0x4ce <__bad_interrupt>
     182:	00 00       	nop
     184:	a4 c1       	rjmp	.+840    	; 0x4ce <__bad_interrupt>
     186:	00 00       	nop
     188:	a2 c1       	rjmp	.+836    	; 0x4ce <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a0 c1       	rjmp	.+832    	; 0x4ce <__bad_interrupt>
     18e:	00 00       	nop
     190:	9e c1       	rjmp	.+828    	; 0x4ce <__bad_interrupt>
     192:	00 00       	nop
     194:	9c c1       	rjmp	.+824    	; 0x4ce <__bad_interrupt>
     196:	00 00       	nop
     198:	9a c1       	rjmp	.+820    	; 0x4ce <__bad_interrupt>
     19a:	00 00       	nop
     19c:	98 c1       	rjmp	.+816    	; 0x4ce <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	96 c1       	rjmp	.+812    	; 0x4ce <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	94 c1       	rjmp	.+808    	; 0x4ce <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	92 c1       	rjmp	.+804    	; 0x4ce <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	90 c1       	rjmp	.+800    	; 0x4ce <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	8e c1       	rjmp	.+796    	; 0x4ce <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	8c c1       	rjmp	.+792    	; 0x4ce <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	8a c1       	rjmp	.+788    	; 0x4ce <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	88 c1       	rjmp	.+784    	; 0x4ce <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	86 c1       	rjmp	.+780    	; 0x4ce <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	84 c1       	rjmp	.+776    	; 0x4ce <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	82 c1       	rjmp	.+772    	; 0x4ce <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	80 c1       	rjmp	.+768    	; 0x4ce <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7e c1       	rjmp	.+764    	; 0x4ce <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7c c1       	rjmp	.+760    	; 0x4ce <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7a c1       	rjmp	.+756    	; 0x4ce <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	78 c1       	rjmp	.+752    	; 0x4ce <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	76 c1       	rjmp	.+748    	; 0x4ce <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	74 c1       	rjmp	.+744    	; 0x4ce <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	72 c1       	rjmp	.+740    	; 0x4ce <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	70 c1       	rjmp	.+736    	; 0x4ce <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6e c1       	rjmp	.+732    	; 0x4ce <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6c c1       	rjmp	.+728    	; 0x4ce <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6a c1       	rjmp	.+724    	; 0x4ce <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 20       	and	r0, r0
     204:	20 20       	and	r2, r0
     206:	20 20       	and	r2, r0
     208:	00 20       	and	r0, r0
     20a:	50 50       	subi	r21, 0x00	; 0
     20c:	50 00       	.word	0x0050	; ????
     20e:	00 00       	nop
     210:	00 50       	subi	r16, 0x00	; 0
     212:	50 f8       	bld	r5, 0
     214:	50 f8       	bld	r5, 0
     216:	50 50       	subi	r21, 0x00	; 0
     218:	20 78       	andi	r18, 0x80	; 128
     21a:	a0 70       	andi	r26, 0x00	; 0
     21c:	28 f0       	brcs	.+10     	; 0x228 <__trampolines_end+0x2c>
     21e:	20 c0       	rjmp	.+64     	; 0x260 <__trampolines_end+0x64>
     220:	c8 10       	cpse	r12, r8
     222:	20 40       	sbci	r18, 0x00	; 0
     224:	98 18       	sub	r9, r8
     226:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1e6a>
     22a:	a8 90       	.word	0x90a8	; ????
     22c:	68 60       	ori	r22, 0x08	; 8
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 00       	nop
     232:	00 00       	nop
     234:	10 20       	and	r1, r0
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	40 20       	and	r4, r0
     23a:	10 40       	sbci	r17, 0x00	; 0
     23c:	20 10       	cpse	r2, r0
     23e:	10 10       	cpse	r1, r0
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	00 50       	subi	r16, 0x00	; 0
     244:	20 f8       	bld	r2, 0
     246:	20 50       	subi	r18, 0x00	; 0
     248:	00 00       	nop
     24a:	20 20       	and	r2, r0
     24c:	f8 20       	and	r15, r8
     24e:	20 00       	.word	0x0020	; ????
     250:	00 00       	nop
     252:	00 00       	nop
     254:	60 20       	and	r6, r0
     256:	40 00       	.word	0x0040	; ????
     258:	00 00       	nop
     25a:	f8 00       	.word	0x00f8	; ????
     25c:	00 00       	nop
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	00 60       	ori	r16, 0x00	; 0
     264:	60 00       	.word	0x0060	; ????
     266:	08 10       	cpse	r0, r8
     268:	20 40       	sbci	r18, 0x00	; 0
     26a:	80 00       	.word	0x0080	; ????
     26c:	70 88       	ldd	r7, Z+16	; 0x10
     26e:	98 a8       	ldd	r9, Y+48	; 0x30
     270:	c8 88       	ldd	r12, Y+16	; 0x10
     272:	70 20       	and	r7, r0
     274:	60 20       	and	r6, r0
     276:	20 20       	and	r2, r0
     278:	20 70       	andi	r18, 0x00	; 0
     27a:	70 88       	ldd	r7, Z+16	; 0x10
     27c:	08 10       	cpse	r0, r8
     27e:	20 40       	sbci	r18, 0x00	; 0
     280:	f8 f8       	.word	0xf8f8	; ????
     282:	10 20       	and	r1, r0
     284:	10 08       	sbc	r1, r0
     286:	88 70       	andi	r24, 0x08	; 8
     288:	10 30       	cpi	r17, 0x00	; 0
     28a:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7010f8>
     28e:	10 f8       	bld	r1, 0
     290:	80 f0       	brcs	.+32     	; 0x2b2 <__trampolines_end+0xb6>
     292:	08 08       	sbc	r0, r8
     294:	88 70       	andi	r24, 0x08	; 8
     296:	30 40       	sbci	r19, 0x00	; 0
     298:	80 f0       	brcs	.+32     	; 0x2ba <__trampolines_end+0xbe>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	70 f8       	bld	r7, 0
     29e:	08 10       	cpse	r0, r8
     2a0:	20 40       	sbci	r18, 0x00	; 0
     2a2:	40 40       	sbci	r20, 0x00	; 0
     2a4:	70 88       	ldd	r7, Z+16	; 0x10
     2a6:	88 70       	andi	r24, 0x08	; 8
     2a8:	88 88       	ldd	r8, Y+16	; 0x10
     2aa:	70 70       	andi	r23, 0x00	; 0
     2ac:	88 88       	ldd	r8, Y+16	; 0x10
     2ae:	78 08       	sbc	r7, r8
     2b0:	10 60       	ori	r17, 0x00	; 0
     2b2:	00 60       	ori	r16, 0x00	; 0
     2b4:	60 00       	.word	0x0060	; ????
     2b6:	60 60       	ori	r22, 0x00	; 0
     2b8:	00 00       	nop
     2ba:	60 60       	ori	r22, 0x00	; 0
     2bc:	00 60       	ori	r16, 0x00	; 0
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	08 10       	cpse	r0, r8
     2c2:	20 40       	sbci	r18, 0x00	; 0
     2c4:	20 10       	cpse	r2, r0
     2c6:	08 00       	.word	0x0008	; ????
     2c8:	00 f8       	bld	r0, 0
     2ca:	00 f8       	bld	r0, 0
     2cc:	00 00       	nop
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	20 10       	cpse	r2, r0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	80 70       	andi	r24, 0x00	; 0
     2d6:	88 08       	sbc	r8, r8
     2d8:	10 20       	and	r1, r0
     2da:	00 20       	and	r0, r0
     2dc:	70 88       	ldd	r7, Z+16	; 0x10
     2de:	08 68       	ori	r16, 0x88	; 136
     2e0:	a8 a8       	ldd	r10, Y+48	; 0x30
     2e2:	70 70       	andi	r23, 0x00	; 0
     2e4:	88 88       	ldd	r8, Y+16	; 0x10
     2e6:	88 f8       	.word	0xf888	; ????
     2e8:	88 88       	ldd	r8, Y+16	; 0x10
     2ea:	f0 88       	ldd	r15, Z+16	; 0x10
     2ec:	88 f0       	brcs	.+34     	; 0x310 <__trampolines_end+0x114>
     2ee:	88 88       	ldd	r8, Y+16	; 0x10
     2f0:	f0 70       	andi	r31, 0x00	; 0
     2f2:	88 80       	ld	r8, Y
     2f4:	80 80       	ld	r8, Z
     2f6:	88 70       	andi	r24, 0x08	; 8
     2f8:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x6652>
     2fc:	88 90       	.word	0x9088	; ????
     2fe:	e0 f8       	bld	r14, 0
     300:	80 80       	ld	r8, Z
     302:	f0 80       	ld	r15, Z
     304:	80 f8       	bld	r8, 0
     306:	f8 80       	ld	r15, Y
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	80 80       	ld	r8, Z
     30c:	80 70       	andi	r24, 0x00	; 0
     30e:	88 80       	ld	r8, Y
     310:	80 98       	cbi	0x10, 0	; 16
     312:	88 70       	andi	r24, 0x08	; 8
     314:	88 88       	ldd	r8, Y+16	; 0x10
     316:	88 f8       	.word	0xf888	; ????
     318:	88 88       	ldd	r8, Y+16	; 0x10
     31a:	88 70       	andi	r24, 0x08	; 8
     31c:	20 20       	and	r2, r0
     31e:	20 20       	and	r2, r0
     320:	20 70       	andi	r18, 0x00	; 0
     322:	38 10       	cpse	r3, r8
     324:	10 10       	cpse	r1, r0
     326:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x662a>
     32a:	90 a0       	ldd	r9, Z+32	; 0x20
     32c:	c0 a0       	ldd	r12, Z+32	; 0x20
     32e:	90 88       	ldd	r9, Z+16	; 0x10
     330:	80 80       	ld	r8, Z
     332:	80 80       	ld	r8, Z
     334:	80 80       	ld	r8, Z
     336:	f8 88       	ldd	r15, Y+16	; 0x10
     338:	d8 a8       	ldd	r13, Y+48	; 0x30
     33a:	88 88       	ldd	r8, Y+16	; 0x10
     33c:	88 88       	ldd	r8, Y+16	; 0x10
     33e:	88 88       	ldd	r8, Y+16	; 0x10
     340:	c8 a8       	ldd	r12, Y+48	; 0x30
     342:	98 88       	ldd	r9, Y+16	; 0x10
     344:	88 70       	andi	r24, 0x08	; 8
     346:	88 88       	ldd	r8, Y+16	; 0x10
     348:	88 88       	ldd	r8, Y+16	; 0x10
     34a:	88 70       	andi	r24, 0x08	; 8
     34c:	f0 88       	ldd	r15, Z+16	; 0x10
     34e:	88 f0       	brcs	.+34     	; 0x372 <__trampolines_end+0x176>
     350:	80 80       	ld	r8, Z
     352:	80 70       	andi	r24, 0x00	; 0
     354:	88 88       	ldd	r8, Y+16	; 0x10
     356:	88 a8       	ldd	r8, Y+48	; 0x30
     358:	90 68       	ori	r25, 0x80	; 128
     35a:	f0 88       	ldd	r15, Z+16	; 0x10
     35c:	88 f0       	brcs	.+34     	; 0x380 <__trampolines_end+0x184>
     35e:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x5652>
     362:	80 80       	ld	r8, Z
     364:	70 08       	sbc	r7, r0
     366:	08 f0       	brcs	.+2      	; 0x36a <__trampolines_end+0x16e>
     368:	f8 20       	and	r15, r8
     36a:	20 20       	and	r2, r0
     36c:	20 20       	and	r2, r0
     36e:	20 88       	ldd	r2, Z+16	; 0x10
     370:	88 88       	ldd	r8, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	88 70       	andi	r24, 0x08	; 8
     376:	88 88       	ldd	r8, Y+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 88       	ldd	r2, Z+16	; 0x10
     37e:	88 88       	ldd	r8, Y+16	; 0x10
     380:	a8 a8       	ldd	r10, Y+48	; 0x30
     382:	d8 88       	ldd	r13, Y+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	50 20       	and	r5, r0
     388:	50 88       	ldd	r5, Z+16	; 0x10
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 50       	subi	r24, 0x08	; 8
     38e:	20 20       	and	r2, r0
     390:	20 20       	and	r2, r0
     392:	f8 08       	sbc	r15, r8
     394:	10 20       	and	r1, r0
     396:	40 80       	ld	r4, Z
     398:	f8 38       	cpi	r31, 0x88	; 136
     39a:	20 20       	and	r2, r0
     39c:	20 20       	and	r2, r0
     39e:	20 38       	cpi	r18, 0x80	; 128
     3a0:	00 80       	ld	r0, Z
     3a2:	40 20       	and	r4, r0
     3a4:	10 08       	sbc	r1, r0
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	20 20       	and	r2, r0
     3aa:	20 20       	and	r2, r0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	20 50       	subi	r18, 0x00	; 0
     3b0:	88 00       	.word	0x0088	; ????
	...
     3ba:	00 f8       	bld	r0, 0
     3bc:	40 20       	and	r4, r0
     3be:	10 00       	.word	0x0010	; ????
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 70       	andi	r16, 0x00	; 0
     3c6:	08 78       	andi	r16, 0x88	; 136
     3c8:	88 78       	andi	r24, 0x88	; 136
     3ca:	80 80       	ld	r8, Z
     3cc:	b0 c8       	rjmp	.-3744   	; 0xfffff52e <__eeprom_end+0xff7ef52e>
     3ce:	88 88       	ldd	r8, Y+16	; 0x10
     3d0:	f0 00       	.word	0x00f0	; ????
     3d2:	00 70       	andi	r16, 0x00	; 0
     3d4:	80 80       	ld	r8, Z
     3d6:	88 70       	andi	r24, 0x08	; 8
     3d8:	08 08       	sbc	r0, r8
     3da:	68 98       	cbi	0x0d, 0	; 13
     3dc:	88 88       	ldd	r8, Y+16	; 0x10
     3de:	78 00       	.word	0x0078	; ????
     3e0:	00 70       	andi	r16, 0x00	; 0
     3e2:	88 f8       	.word	0xf888	; ????
     3e4:	80 70       	andi	r24, 0x00	; 0
     3e6:	30 48       	sbci	r19, 0x80	; 128
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	40 40       	sbci	r20, 0x00	; 0
     3ec:	40 00       	.word	0x0040	; ????
     3ee:	00 78       	andi	r16, 0x80	; 128
     3f0:	88 78       	andi	r24, 0x88	; 136
     3f2:	08 30       	cpi	r16, 0x08	; 8
     3f4:	80 80       	ld	r8, Z
     3f6:	b0 c8       	rjmp	.-3744   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3f8:	88 88       	ldd	r8, Y+16	; 0x10
     3fa:	88 20       	and	r8, r8
     3fc:	00 60       	ori	r16, 0x00	; 0
     3fe:	20 20       	and	r2, r0
     400:	20 70       	andi	r18, 0x00	; 0
     402:	10 00       	.word	0x0010	; ????
     404:	30 10       	cpse	r3, r0
     406:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1e2a>
     40a:	40 48       	sbci	r20, 0x80	; 128
     40c:	50 60       	ori	r21, 0x00	; 0
     40e:	50 48       	sbci	r21, 0x80	; 128
     410:	60 20       	and	r6, r0
     412:	20 20       	and	r2, r0
     414:	20 20       	and	r2, r0
     416:	70 00       	.word	0x0070	; ????
     418:	00 d0       	rcall	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	a8 a8       	ldd	r10, Y+48	; 0x30
     41c:	88 88       	ldd	r8, Y+16	; 0x10
     41e:	00 00       	nop
     420:	b0 c8       	rjmp	.-3744   	; 0xfffff582 <__eeprom_end+0xff7ef582>
     422:	88 88       	ldd	r8, Y+16	; 0x10
     424:	88 00       	.word	0x0088	; ????
     426:	00 70       	andi	r16, 0x00	; 0
     428:	88 88       	ldd	r8, Y+16	; 0x10
     42a:	88 70       	andi	r24, 0x08	; 8
     42c:	00 00       	nop
     42e:	f0 88       	ldd	r15, Z+16	; 0x10
     430:	f0 80       	ld	r15, Z
     432:	80 00       	.word	0x0080	; ????
     434:	00 68       	ori	r16, 0x80	; 128
     436:	98 78       	andi	r25, 0x88	; 136
     438:	08 08       	sbc	r0, r8
     43a:	00 00       	nop
     43c:	b0 c8       	rjmp	.-3744   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
     43e:	80 80       	ld	r8, Z
     440:	80 00       	.word	0x0080	; ????
     442:	00 70       	andi	r16, 0x00	; 0
     444:	80 70       	andi	r24, 0x00	; 0
     446:	08 f0       	brcs	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	e0 40       	sbci	r30, 0x00	; 0
     44c:	40 48       	sbci	r20, 0x80	; 128
     44e:	30 00       	.word	0x0030	; ????
     450:	00 88       	ldd	r0, Z+16	; 0x10
     452:	88 88       	ldd	r8, Y+16	; 0x10
     454:	98 68       	ori	r25, 0x88	; 136
     456:	00 00       	nop
     458:	88 88       	ldd	r8, Y+16	; 0x10
     45a:	88 50       	subi	r24, 0x08	; 8
     45c:	20 00       	.word	0x0020	; ????
     45e:	00 88       	ldd	r0, Z+16	; 0x10
     460:	88 a8       	ldd	r8, Y+48	; 0x30
     462:	a8 50       	subi	r26, 0x08	; 8
     464:	00 00       	nop
     466:	88 50       	subi	r24, 0x08	; 8
     468:	20 50       	subi	r18, 0x00	; 0
     46a:	88 00       	.word	0x0088	; ????
     46c:	00 88       	ldd	r0, Z+16	; 0x10
     46e:	88 78       	andi	r24, 0x88	; 136
     470:	08 70       	andi	r16, 0x08	; 8
     472:	00 00       	nop
     474:	f8 10       	cpse	r15, r8
     476:	20 40       	sbci	r18, 0x00	; 0
     478:	f8 10       	cpse	r15, r8
     47a:	20 20       	and	r2, r0
     47c:	40 20       	and	r4, r0
     47e:	20 10       	cpse	r2, r0
     480:	20 20       	and	r2, r0
     482:	20 20       	and	r2, r0
     484:	20 20       	and	r2, r0
     486:	20 40       	sbci	r18, 0x00	; 0
     488:	20 20       	and	r2, r0
     48a:	10 20       	and	r1, r0
     48c:	20 40       	sbci	r18, 0x00	; 0

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df e5       	ldi	r29, 0x5F	; 95
     498:	de bf       	out	0x3e, r29	; 62
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	10 e2       	ldi	r17, 0x20	; 32
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b0 e2       	ldi	r27, 0x20	; 32
     4a4:	ec eb       	ldi	r30, 0xBC	; 188
     4a6:	fa e2       	ldi	r31, 0x2A	; 42
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	a4 32       	cpi	r26, 0x24	; 36
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	22 e2       	ldi	r18, 0x22	; 34
     4ba:	a4 e2       	ldi	r26, 0x24	; 36
     4bc:	b0 e2       	ldi	r27, 0x20	; 32
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	a6 33       	cpi	r26, 0x36	; 54
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	b6 d0       	rcall	.+364    	; 0x636 <main>
     4ca:	0c 94 5c 15 	jmp	0x2ab8	; 0x2ab8 <_exit>

000004ce <__bad_interrupt>:
     4ce:	98 cd       	rjmp	.-1232   	; 0x0 <__vectors>

000004d0 <adc_handler>:
 * \param adc Pointer to ADC module.
 * \param ch_mask ADC channel mask.
 * \param result Conversion result from ADC channel.
 */
static void adc_handler(ADC_t *adc, uint8_t ch_mask, adc_result_t result)
{
     4d0:	bf 92       	push	r11
     4d2:	cf 92       	push	r12
     4d4:	df 92       	push	r13
     4d6:	ef 92       	push	r14
     4d8:	ff 92       	push	r15
     4da:	0f 93       	push	r16
     4dc:	1f 93       	push	r17
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
     4e2:	cd b7       	in	r28, 0x3d	; 61
     4e4:	de b7       	in	r29, 0x3e	; 62
     4e6:	a5 97       	sbiw	r28, 0x25	; 37
     4e8:	cd bf       	out	0x3d, r28	; 61
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	6c 01       	movw	r12, r24
     4ee:	b6 2e       	mov	r11, r22
	 * of the temperature sensor adc data.
	 */

	if (result > 697) {
		temperature = (int8_t)((-0.0295 * result) + 40.5);
	} if (result > 420) {
     4f0:	45 3a       	cpi	r20, 0xA5	; 165
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	58 07       	cpc	r21, r24
     4f6:	c8 f0       	brcs	.+50     	; 0x52a <adc_handler+0x5a>
		temperature = (int8_t)((-0.0474 * result) + 53.3);
     4f8:	ba 01       	movw	r22, r20
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	0e 94 44 11 	call	0x2288	; 0x2288 <__floatunsisf>
     502:	21 e8       	ldi	r18, 0x81	; 129
     504:	36 e2       	ldi	r19, 0x26	; 38
     506:	42 e4       	ldi	r20, 0x42	; 66
     508:	5d eb       	ldi	r21, 0xBD	; 189
     50a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__mulsf3>
     50e:	23 e3       	ldi	r18, 0x33	; 51
     510:	33 e3       	ldi	r19, 0x33	; 51
     512:	45 e5       	ldi	r20, 0x55	; 85
     514:	52 e4       	ldi	r21, 0x42	; 66
     516:	0e 94 af 10 	call	0x215e	; 0x215e <__addsf3>
     51a:	0e 94 13 11 	call	0x2226	; 0x2226 <__fixsfsi>
     51e:	06 2e       	mov	r0, r22
     520:	00 0c       	add	r0, r0
     522:	77 0b       	sbc	r23, r23
     524:	88 0b       	sbc	r24, r24
     526:	99 0b       	sbc	r25, r25
     528:	18 c0       	rjmp	.+48     	; 0x55a <adc_handler+0x8a>
	} else {
		temperature = (int8_t)((-0.0777 * result) + 65.1);
     52a:	ba 01       	movw	r22, r20
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 44 11 	call	0x2288	; 0x2288 <__floatunsisf>
     534:	2d e2       	ldi	r18, 0x2D	; 45
     536:	31 e2       	ldi	r19, 0x21	; 33
     538:	4f e9       	ldi	r20, 0x9F	; 159
     53a:	5d eb       	ldi	r21, 0xBD	; 189
     53c:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__mulsf3>
     540:	23 e3       	ldi	r18, 0x33	; 51
     542:	33 e3       	ldi	r19, 0x33	; 51
     544:	42 e8       	ldi	r20, 0x82	; 130
     546:	52 e4       	ldi	r21, 0x42	; 66
     548:	0e 94 af 10 	call	0x215e	; 0x215e <__addsf3>
     54c:	0e 94 13 11 	call	0x2226	; 0x2226 <__fixsfsi>
     550:	06 2e       	mov	r0, r22
     552:	00 0c       	add	r0, r0
     554:	77 0b       	sbc	r23, r23
     556:	88 0b       	sbc	r24, r24
     558:	99 0b       	sbc	r25, r25
	}

	last_temperaturec = temperature;
     55a:	60 93 26 20 	sts	0x2026, r22	; 0x802026 <last_temperaturec>
     55e:	70 93 27 20 	sts	0x2027, r23	; 0x802027 <last_temperaturec+0x1>
	last_temperaturef = (temperature*1.8)+32;
     562:	0e 94 46 11 	call	0x228c	; 0x228c <__floatsisf>
     566:	26 e6       	ldi	r18, 0x66	; 102
     568:	36 e6       	ldi	r19, 0x66	; 102
     56a:	46 ee       	ldi	r20, 0xE6	; 230
     56c:	5f e3       	ldi	r21, 0x3F	; 63
     56e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__mulsf3>
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	40 e0       	ldi	r20, 0x00	; 0
     578:	52 e4       	ldi	r21, 0x42	; 66
     57a:	0e 94 af 10 	call	0x215e	; 0x215e <__addsf3>
     57e:	0e 94 13 11 	call	0x2226	; 0x2226 <__fixsfsi>
     582:	60 93 24 20 	sts	0x2024, r22	; 0x802024 <__data_end>
     586:	70 93 25 20 	sts	0x2025, r23	; 0x802025 <__data_end+0x1>

	// Write temperature to display
	snprintf(out_str, OUTPUT_STR_SIZE, "Temperature: %4d F", last_temperaturef);
     58a:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <__data_end>
     58e:	90 91 25 20 	lds	r25, 0x2025	; 0x802025 <__data_end+0x1>
     592:	9f 93       	push	r25
     594:	8f 93       	push	r24
     596:	8e e0       	ldi	r24, 0x0E	; 14
     598:	90 e2       	ldi	r25, 0x20	; 32
     59a:	9f 93       	push	r25
     59c:	8f 93       	push	r24
     59e:	1f 92       	push	r1
     5a0:	80 e2       	ldi	r24, 0x20	; 32
     5a2:	8f 93       	push	r24
     5a4:	8e 01       	movw	r16, r28
     5a6:	0f 5f       	subi	r16, 0xFF	; 255
     5a8:	1f 4f       	sbci	r17, 0xFF	; 255
     5aa:	1f 93       	push	r17
     5ac:	0f 93       	push	r16
     5ae:	0e 94 57 12 	call	0x24ae	; 0x24ae <snprintf>
	gfx_mono_draw_string(out_str, 0, 0, &sysfont);
     5b2:	27 e0       	ldi	r18, 0x07	; 7
     5b4:	30 e2       	ldi	r19, 0x20	; 32
     5b6:	40 e0       	ldi	r20, 0x00	; 0
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	c8 01       	movw	r24, r16
     5bc:	ec d4       	rcall	.+2520   	; 0xf96 <gfx_mono_draw_string>
	
	char tx_buf[4] = {0, 0,0,0};
     5be:	19 a2       	std	Y+33, r1	; 0x21
     5c0:	1a a2       	std	Y+34, r1	; 0x22
     5c2:	1b a2       	std	Y+35, r1	; 0x23
     5c4:	1c a2       	std	Y+36, r1	; 0x24
	uint8_t tx_length = 4;
	uint8_t i;
	sprintf(tx_buf, "%d", last_temperaturef);
     5c6:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <__data_end>
     5ca:	90 91 25 20 	lds	r25, 0x2025	; 0x802025 <__data_end+0x1>
     5ce:	9f 93       	push	r25
     5d0:	8f 93       	push	r24
     5d2:	81 e2       	ldi	r24, 0x21	; 33
     5d4:	90 e2       	ldi	r25, 0x20	; 32
     5d6:	9f 93       	push	r25
     5d8:	8f 93       	push	r24
     5da:	00 5e       	subi	r16, 0xE0	; 224
     5dc:	1f 4f       	sbci	r17, 0xFF	; 255
     5de:	1f 93       	push	r17
     5e0:	0f 93       	push	r16
     5e2:	0e 94 8d 12 	call	0x251a	; 0x251a <sprintf>
     5e6:	7e 01       	movw	r14, r28
     5e8:	95 e2       	ldi	r25, 0x25	; 37
     5ea:	e9 0e       	add	r14, r25
     5ec:	f1 1c       	adc	r15, r1
     5ee:	cd bf       	out	0x3d, r28	; 61
     5f0:	de bf       	out	0x3e, r29	; 62
	// Send "message header"
	for (i = 0; i < tx_length; i++) {
		usart_putchar(USART_SERIAL_EXAMPLE, tx_buf[i]);
     5f2:	f8 01       	movw	r30, r16
     5f4:	61 91       	ld	r22, Z+
     5f6:	8f 01       	movw	r16, r30
     5f8:	80 ea       	ldi	r24, 0xA0	; 160
     5fa:	98 e0       	ldi	r25, 0x08	; 8
     5fc:	0e 94 3c 0c 	call	0x1878	; 0x1878 <usart_putchar>
	char tx_buf[4] = {0, 0,0,0};
	uint8_t tx_length = 4;
	uint8_t i;
	sprintf(tx_buf, "%d", last_temperaturef);
	// Send "message header"
	for (i = 0; i < tx_length; i++) {
     600:	0e 15       	cp	r16, r14
     602:	1f 05       	cpc	r17, r15
     604:	b1 f7       	brne	.-20     	; 0x5f2 <adc_handler+0x122>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     606:	8f b7       	in	r24, 0x3f	; 63
     608:	8d a3       	std	Y+37, r24	; 0x25
	cpu_irq_disable();
     60a:	f8 94       	cli
	return flags;
     60c:	9d a1       	ldd	r25, Y+37	; 0x25
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
     60e:	f6 01       	movw	r30, r12
     610:	80 81       	ld	r24, Z
     612:	bb 0c       	add	r11, r11
     614:	bb 0c       	add	r11, r11
     616:	b8 2a       	or	r11, r24
     618:	b0 82       	st	Z, r11
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     61a:	9f bf       	out	0x3f, r25	; 63
		usart_putchar(USART_SERIAL_EXAMPLE, tx_buf[i]);
	}

	// Start next conversion.
	adc_start_conversion(adc, ch_mask);
}
     61c:	a5 96       	adiw	r28, 0x25	; 37
     61e:	cd bf       	out	0x3d, r28	; 61
     620:	de bf       	out	0x3e, r29	; 62
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	1f 91       	pop	r17
     628:	0f 91       	pop	r16
     62a:	ff 90       	pop	r15
     62c:	ef 90       	pop	r14
     62e:	df 90       	pop	r13
     630:	cf 90       	pop	r12
     632:	bf 90       	pop	r11
     634:	08 95       	ret

00000636 <main>:

int main(void)
{
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
     63a:	cd b7       	in	r28, 0x3d	; 61
     63c:	de b7       	in	r29, 0x3e	; 62
     63e:	2c 97       	sbiw	r28, 0x0c	; 12
     640:	cd bf       	out	0x3d, r28	; 61
     642:	de bf       	out	0x3e, r29	; 62
	struct adc_config         adc_conf;
	struct adc_channel_config adcch_conf;

	board_init();
     644:	6d d5       	rcall	.+2778   	; 0x1120 <board_init>
	sysclk_init();
     646:	28 d2       	rcall	.+1104   	; 0xa98 <sysclk_init>
     648:	ec e2       	ldi	r30, 0x2C	; 44
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
     64a:	f2 e2       	ldi	r31, 0x22	; 34
     64c:	10 82       	st	Z, r1
     64e:	11 82       	std	Z+1, r1	; 0x01
     650:	12 82       	std	Z+2, r1	; 0x02
     652:	13 82       	std	Z+3, r1	; 0x03
     654:	14 82       	std	Z+4, r1	; 0x04
     656:	11 e0       	ldi	r17, 0x01	; 1
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
     658:	15 83       	std	Z+5, r17	; 0x05
     65a:	87 e0       	ldi	r24, 0x07	; 7
	sleepmgr_init();	
	irq_initialize_vectors();
     65c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
     660:	78 94       	sei
	gfx_mono_init();
     662:	25 d3       	rcall	.+1610   	; 0xcae <gfx_mono_st7565r_init>
     664:	60 e0       	ldi	r22, 0x00	; 0
		.paritytype = (0x00<<4),
		.stopbits = false
	};
	
	// Initialize usart driver in RS232 mode
	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);
     666:	70 e2       	ldi	r23, 0x20	; 32
     668:	80 ea       	ldi	r24, 0xA0	; 160
     66a:	98 e0       	ldi	r25, 0x08	; 8
     66c:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <usart_init_rs232>
     670:	80 e1       	ldi	r24, 0x10	; 16
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     672:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
     676:	be 01       	movw	r22, r28
	#ifndef CONF_BOARD_OLED_UG_2832HSWEG04
		ioport_set_pin_high(LCD_BACKLIGHT_ENABLE_PIN);
	#endif

	// Initialize configuration structures.
	adc_read_configuration(&ADCA, &adc_conf);
     678:	6f 5f       	subi	r22, 0xFF	; 255
     67a:	7f 4f       	sbci	r23, 0xFF	; 255
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	92 e0       	ldi	r25, 0x02	; 2
     680:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <adc_read_configuration>
     684:	ae 01       	movw	r20, r28
	adcch_read_configuration(&ADCA, ADC_CH0, &adcch_conf);
     686:	48 5f       	subi	r20, 0xF8	; 248
     688:	5f 4f       	sbci	r21, 0xFF	; 255
     68a:	61 e0       	ldi	r22, 0x01	; 1
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	92 e0       	ldi	r25, 0x02	; 2
     690:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <adcch_read_configuration>
     694:	9a 81       	ldd	r25, Y+2	; 0x02
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
     696:	8b 81       	ldd	r24, Y+3	; 0x03
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
     698:	8f 78       	andi	r24, 0x8F	; 143
     69a:	24 e0       	ldi	r18, 0x04	; 4
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
     69c:	2d 83       	std	Y+5, r18	; 0x05
     69e:	91 7e       	andi	r25, 0xE1	; 225
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
     6a0:	90 61       	ori	r25, 0x10	; 16
     6a2:	9a 83       	std	Y+2, r25	; 0x02
     6a4:	1c 82       	std	Y+4, r1	; 0x04
		conf->evctrl = ADC_EVACT_NONE_gc;
     6a6:	81 61       	ori	r24, 0x11	; 17
 * \arg \c ADC_INT_BANDGAP for bandgap reference.
 */
static inline void adc_enable_internal_input(struct adc_config *conf,
		uint8_t int_inp)
{
	conf->refctrl |= int_inp;
     6a8:	8b 83       	std	Y+3, r24	; 0x03
     6aa:	be 01       	movw	r22, r28
			ADC_REF_VCC);
	adc_set_clock_rate(&adc_conf, 200000UL);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_enable_internal_input(&adc_conf, ADC_INT_TEMPSENSE);

	adc_write_configuration(&ADCA, &adc_conf);
     6ac:	6f 5f       	subi	r22, 0xFF	; 255
     6ae:	7f 4f       	sbci	r23, 0xFF	; 255
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	92 e0       	ldi	r25, 0x02	; 2
     6b4:	9c d7       	rcall	.+3896   	; 0x15ee <adc_write_configuration>
     6b6:	68 e6       	ldi	r22, 0x68	; 104
	adc_set_callback(&ADCA, &adc_handler);
     6b8:	72 e0       	ldi	r23, 0x02	; 2
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	92 e0       	ldi	r25, 0x02	; 2
     6be:	7f d5       	rcall	.+2814   	; 0x11be <adc_set_callback>
     6c0:	18 87       	std	Y+8, r17	; 0x08
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
     6c2:	88 e0       	ldi	r24, 0x08	; 8
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
     6c4:	89 87       	std	Y+9, r24	; 0x09
     6c6:	8a 85       	ldd	r24, Y+10	; 0x0a
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
     6c8:	80 7f       	andi	r24, 0xF0	; 240
     6ca:	81 60       	ori	r24, 0x01	; 1
     6cc:	8a 87       	std	Y+10, r24	; 0x0a
     6ce:	ae 01       	movw	r20, r28
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN1, ADCCH_NEG_NONE,
			1);
	adcch_set_interrupt_mode(&adcch_conf, ADCCH_MODE_COMPLETE);
	adcch_enable_interrupt(&adcch_conf);

	adcch_write_configuration(&ADCA, ADC_CH0, &adcch_conf);
     6d0:	48 5f       	subi	r20, 0xF8	; 248
     6d2:	5f 4f       	sbci	r21, 0xFF	; 255
     6d4:	61 e0       	ldi	r22, 0x01	; 1
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	92 e0       	ldi	r25, 0x02	; 2
     6da:	0e 94 96 0b 	call	0x172c	; 0x172c <adcch_write_configuration>

	// Enable the ADC and start the first conversion.
	adc_enable(&ADCA);
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	92 e0       	ldi	r25, 0x02	; 2
     6e2:	c9 d5       	rcall	.+2962   	; 0x1276 <adc_enable>
     6e4:	8f b7       	in	r24, 0x3f	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     6e6:	8c 87       	std	Y+12, r24	; 0x0c
     6e8:	f8 94       	cli
	cpu_irq_disable();
     6ea:	9c 85       	ldd	r25, Y+12	; 0x0c
	return flags;
     6ec:	e0 e0       	ldi	r30, 0x00	; 0
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
     6ee:	f2 e0       	ldi	r31, 0x02	; 2
     6f0:	80 81       	ld	r24, Z
     6f2:	84 60       	ori	r24, 0x04	; 4
     6f4:	80 83       	st	Z, r24
     6f6:	9f bf       	out	0x3f, r25	; 63
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     6f8:	ff cf       	rjmp	.-2      	; 0x6f8 <main+0xc2>

000006fa <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     6fa:	04 c0       	rjmp	.+8      	; 0x704 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     6fc:	61 50       	subi	r22, 0x01	; 1
     6fe:	71 09       	sbc	r23, r1
     700:	81 09       	sbc	r24, r1
     702:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     704:	61 15       	cp	r22, r1
     706:	71 05       	cpc	r23, r1
     708:	81 05       	cpc	r24, r1
     70a:	91 05       	cpc	r25, r1
     70c:	b9 f7       	brne	.-18     	; 0x6fc <__portable_avr_delay_cycles+0x2>
     70e:	08 95       	ret

00000710 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     710:	bf 92       	push	r11
     712:	cf 92       	push	r12
     714:	df 92       	push	r13
     716:	ef 92       	push	r14
     718:	ff 92       	push	r15
     71a:	0f 93       	push	r16
     71c:	1f 93       	push	r17
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
     722:	1f 92       	push	r1
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     728:	00 e0       	ldi	r16, 0x00	; 0
     72a:	16 e0       	ldi	r17, 0x06	; 6
     72c:	68 94       	set
     72e:	ff 24       	eor	r15, r15
     730:	f3 f8       	bld	r15, 3
     732:	f8 01       	movw	r30, r16
     734:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     736:	6e e0       	ldi	r22, 0x0E	; 14
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	dd df       	rcall	.-70     	; 0x6fa <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     740:	f8 01       	movw	r30, r16
     742:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     744:	6e e0       	ldi	r22, 0x0E	; 14
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	d6 df       	rcall	.-84     	; 0x6fa <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     74e:	0f 2e       	mov	r0, r31
     750:	fb e2       	ldi	r31, 0x2B	; 43
     752:	bf 2e       	mov	r11, r31
     754:	f0 2d       	mov	r31, r0
     756:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     758:	80 ea       	ldi	r24, 0xA0	; 160
     75a:	99 e0       	ldi	r25, 0x09	; 9
     75c:	6c d4       	rcall	.+2264   	; 0x1036 <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     75e:	c1 2c       	mov	r12, r1
     760:	d1 2c       	mov	r13, r1
     762:	76 01       	movw	r14, r12
     764:	00 e4       	ldi	r16, 0x40	; 64
     766:	12 e4       	ldi	r17, 0x42	; 66
     768:	2f e0       	ldi	r18, 0x0F	; 15
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	43 e0       	ldi	r20, 0x03	; 3
     76e:	be 01       	movw	r22, r28
     770:	6f 5f       	subi	r22, 0xFF	; 255
     772:	7f 4f       	sbci	r23, 0xFF	; 255
     774:	80 ea       	ldi	r24, 0xA0	; 160
     776:	99 e0       	ldi	r25, 0x09	; 9
     778:	8d d4       	rcall	.+2330   	; 0x1094 <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     77a:	00 e6       	ldi	r16, 0x60	; 96
     77c:	16 e0       	ldi	r17, 0x06	; 6
     77e:	ff 24       	eor	r15, r15
     780:	f3 94       	inc	r15
     782:	f8 01       	movw	r30, r16
     784:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     786:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     788:	be 01       	movw	r22, r28
     78a:	6f 5f       	subi	r22, 0xFF	; 255
     78c:	7f 4f       	sbci	r23, 0xFF	; 255
     78e:	80 ea       	ldi	r24, 0xA0	; 160
     790:	99 e0       	ldi	r25, 0x09	; 9
     792:	9a d4       	rcall	.+2356   	; 0x10c8 <usart_spi_select_device>
     794:	f8 01       	movw	r30, r16
     796:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     798:	e0 ea       	ldi	r30, 0xA0	; 160
     79a:	f9 e0       	ldi	r31, 0x09	; 9
     79c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     79e:	85 ff       	sbrs	r24, 5
     7a0:	fd cf       	rjmp	.-6      	; 0x79c <st7565r_init+0x8c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7a2:	80 ea       	ldi	r24, 0xA0	; 160
     7a4:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7a8:	e0 ea       	ldi	r30, 0xA0	; 160
     7aa:	f9 e0       	ldi	r31, 0x09	; 9
     7ac:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7ae:	86 ff       	sbrs	r24, 6
     7b0:	fd cf       	rjmp	.-6      	; 0x7ac <st7565r_init+0x9c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7b2:	e0 ea       	ldi	r30, 0xA0	; 160
     7b4:	f9 e0       	ldi	r31, 0x09	; 9
     7b6:	80 e4       	ldi	r24, 0x40	; 64
     7b8:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7ba:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7bc:	be 01       	movw	r22, r28
     7be:	6f 5f       	subi	r22, 0xFF	; 255
     7c0:	7f 4f       	sbci	r23, 0xFF	; 255
     7c2:	80 ea       	ldi	r24, 0xA0	; 160
     7c4:	99 e0       	ldi	r25, 0x09	; 9
     7c6:	96 d4       	rcall	.+2348   	; 0x10f4 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7c8:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7ca:	89 83       	std	Y+1, r24	; 0x01
     7cc:	be 01       	movw	r22, r28
     7ce:	6f 5f       	subi	r22, 0xFF	; 255
     7d0:	7f 4f       	sbci	r23, 0xFF	; 255
     7d2:	80 ea       	ldi	r24, 0xA0	; 160
     7d4:	99 e0       	ldi	r25, 0x09	; 9
     7d6:	78 d4       	rcall	.+2288   	; 0x10c8 <usart_spi_select_device>
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7de:	e0 ea       	ldi	r30, 0xA0	; 160
     7e0:	f9 e0       	ldi	r31, 0x09	; 9
     7e2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7e4:	85 ff       	sbrs	r24, 5
     7e6:	fd cf       	rjmp	.-6      	; 0x7e2 <st7565r_init+0xd2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7e8:	86 ea       	ldi	r24, 0xA6	; 166
     7ea:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7ee:	e0 ea       	ldi	r30, 0xA0	; 160
     7f0:	f9 e0       	ldi	r31, 0x09	; 9
     7f2:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7f4:	86 ff       	sbrs	r24, 6
     7f6:	fd cf       	rjmp	.-6      	; 0x7f2 <st7565r_init+0xe2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7f8:	e0 ea       	ldi	r30, 0xA0	; 160
     7fa:	f9 e0       	ldi	r31, 0x09	; 9
     7fc:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7fe:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     800:	80 81       	ld	r24, Z
     802:	be 01       	movw	r22, r28
     804:	6f 5f       	subi	r22, 0xFF	; 255
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	80 ea       	ldi	r24, 0xA0	; 160
     80a:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     80c:	73 d4       	rcall	.+2278   	; 0x10f4 <usart_spi_deselect_device>
     80e:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     810:	89 83       	std	Y+1, r24	; 0x01
     812:	be 01       	movw	r22, r28
     814:	6f 5f       	subi	r22, 0xFF	; 255
     816:	7f 4f       	sbci	r23, 0xFF	; 255
     818:	80 ea       	ldi	r24, 0xA0	; 160
     81a:	99 e0       	ldi	r25, 0x09	; 9
     81c:	55 d4       	rcall	.+2218   	; 0x10c8 <usart_spi_select_device>
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     824:	e0 ea       	ldi	r30, 0xA0	; 160
     826:	f9 e0       	ldi	r31, 0x09	; 9
     828:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     82a:	85 ff       	sbrs	r24, 5
     82c:	fd cf       	rjmp	.-6      	; 0x828 <st7565r_init+0x118>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     82e:	88 ec       	ldi	r24, 0xC8	; 200
     830:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     834:	e0 ea       	ldi	r30, 0xA0	; 160
     836:	f9 e0       	ldi	r31, 0x09	; 9
     838:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     83a:	86 ff       	sbrs	r24, 6
     83c:	fd cf       	rjmp	.-6      	; 0x838 <st7565r_init+0x128>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     83e:	e0 ea       	ldi	r30, 0xA0	; 160
     840:	f9 e0       	ldi	r31, 0x09	; 9
     842:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     844:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     846:	80 81       	ld	r24, Z
     848:	be 01       	movw	r22, r28
     84a:	6f 5f       	subi	r22, 0xFF	; 255
     84c:	7f 4f       	sbci	r23, 0xFF	; 255
     84e:	80 ea       	ldi	r24, 0xA0	; 160
     850:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     852:	50 d4       	rcall	.+2208   	; 0x10f4 <usart_spi_deselect_device>
     854:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     856:	89 83       	std	Y+1, r24	; 0x01
     858:	be 01       	movw	r22, r28
     85a:	6f 5f       	subi	r22, 0xFF	; 255
     85c:	7f 4f       	sbci	r23, 0xFF	; 255
     85e:	80 ea       	ldi	r24, 0xA0	; 160
     860:	99 e0       	ldi	r25, 0x09	; 9
     862:	32 d4       	rcall	.+2148   	; 0x10c8 <usart_spi_select_device>
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     86a:	e0 ea       	ldi	r30, 0xA0	; 160
     86c:	f9 e0       	ldi	r31, 0x09	; 9
     86e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     870:	85 ff       	sbrs	r24, 5
     872:	fd cf       	rjmp	.-6      	; 0x86e <st7565r_init+0x15e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     874:	82 ea       	ldi	r24, 0xA2	; 162
     876:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     87a:	e0 ea       	ldi	r30, 0xA0	; 160
     87c:	f9 e0       	ldi	r31, 0x09	; 9
     87e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     880:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     882:	fd cf       	rjmp	.-6      	; 0x87e <st7565r_init+0x16e>
     884:	e0 ea       	ldi	r30, 0xA0	; 160
     886:	f9 e0       	ldi	r31, 0x09	; 9
     888:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     88a:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     88c:	80 81       	ld	r24, Z
     88e:	be 01       	movw	r22, r28
     890:	6f 5f       	subi	r22, 0xFF	; 255
     892:	7f 4f       	sbci	r23, 0xFF	; 255
     894:	80 ea       	ldi	r24, 0xA0	; 160
     896:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     898:	2d d4       	rcall	.+2138   	; 0x10f4 <usart_spi_deselect_device>
     89a:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     89c:	89 83       	std	Y+1, r24	; 0x01
     89e:	be 01       	movw	r22, r28
     8a0:	6f 5f       	subi	r22, 0xFF	; 255
     8a2:	7f 4f       	sbci	r23, 0xFF	; 255
     8a4:	80 ea       	ldi	r24, 0xA0	; 160
     8a6:	99 e0       	ldi	r25, 0x09	; 9
     8a8:	0f d4       	rcall	.+2078   	; 0x10c8 <usart_spi_select_device>
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8b0:	e0 ea       	ldi	r30, 0xA0	; 160
     8b2:	f9 e0       	ldi	r31, 0x09	; 9
     8b4:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8b6:	85 ff       	sbrs	r24, 5
     8b8:	fd cf       	rjmp	.-6      	; 0x8b4 <st7565r_init+0x1a4>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8ba:	8f e2       	ldi	r24, 0x2F	; 47
     8bc:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8c0:	e0 ea       	ldi	r30, 0xA0	; 160
     8c2:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8c4:	81 81       	ldd	r24, Z+1	; 0x01
     8c6:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8c8:	fd cf       	rjmp	.-6      	; 0x8c4 <st7565r_init+0x1b4>
     8ca:	e0 ea       	ldi	r30, 0xA0	; 160
     8cc:	f9 e0       	ldi	r31, 0x09	; 9
     8ce:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     8d0:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8d2:	80 81       	ld	r24, Z
     8d4:	be 01       	movw	r22, r28
     8d6:	6f 5f       	subi	r22, 0xFF	; 255
     8d8:	7f 4f       	sbci	r23, 0xFF	; 255
     8da:	80 ea       	ldi	r24, 0xA0	; 160
     8dc:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8de:	0a d4       	rcall	.+2068   	; 0x10f4 <usart_spi_deselect_device>
     8e0:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8e2:	89 83       	std	Y+1, r24	; 0x01
     8e4:	be 01       	movw	r22, r28
     8e6:	6f 5f       	subi	r22, 0xFF	; 255
     8e8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ea:	80 ea       	ldi	r24, 0xA0	; 160
     8ec:	99 e0       	ldi	r25, 0x09	; 9
     8ee:	ec d3       	rcall	.+2008   	; 0x10c8 <usart_spi_select_device>
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8f6:	e0 ea       	ldi	r30, 0xA0	; 160
     8f8:	f9 e0       	ldi	r31, 0x09	; 9
     8fa:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8fc:	85 ff       	sbrs	r24, 5
     8fe:	fd cf       	rjmp	.-6      	; 0x8fa <st7565r_init+0x1ea>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     900:	88 ef       	ldi	r24, 0xF8	; 248
     902:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     906:	e0 ea       	ldi	r30, 0xA0	; 160
     908:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     90a:	81 81       	ldd	r24, Z+1	; 0x01
     90c:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     90e:	fd cf       	rjmp	.-6      	; 0x90a <st7565r_init+0x1fa>
     910:	e0 ea       	ldi	r30, 0xA0	; 160
     912:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     914:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     916:	81 83       	std	Z+1, r24	; 0x01
     918:	80 81       	ld	r24, Z
     91a:	be 01       	movw	r22, r28
     91c:	6f 5f       	subi	r22, 0xFF	; 255
     91e:	7f 4f       	sbci	r23, 0xFF	; 255
     920:	80 ea       	ldi	r24, 0xA0	; 160
     922:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     924:	e7 d3       	rcall	.+1998   	; 0x10f4 <usart_spi_deselect_device>
     926:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     928:	89 83       	std	Y+1, r24	; 0x01
     92a:	be 01       	movw	r22, r28
     92c:	6f 5f       	subi	r22, 0xFF	; 255
     92e:	7f 4f       	sbci	r23, 0xFF	; 255
     930:	80 ea       	ldi	r24, 0xA0	; 160
     932:	99 e0       	ldi	r25, 0x09	; 9
     934:	c9 d3       	rcall	.+1938   	; 0x10c8 <usart_spi_select_device>
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     93c:	e0 ea       	ldi	r30, 0xA0	; 160
     93e:	f9 e0       	ldi	r31, 0x09	; 9
     940:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     942:	85 ff       	sbrs	r24, 5
     944:	fd cf       	rjmp	.-6      	; 0x940 <st7565r_init+0x230>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     946:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     94a:	e0 ea       	ldi	r30, 0xA0	; 160
     94c:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     94e:	81 81       	ldd	r24, Z+1	; 0x01
     950:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     952:	fd cf       	rjmp	.-6      	; 0x94e <st7565r_init+0x23e>
     954:	e0 ea       	ldi	r30, 0xA0	; 160
     956:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     958:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     95a:	81 83       	std	Z+1, r24	; 0x01
     95c:	80 81       	ld	r24, Z
     95e:	be 01       	movw	r22, r28
     960:	6f 5f       	subi	r22, 0xFF	; 255
     962:	7f 4f       	sbci	r23, 0xFF	; 255
     964:	80 ea       	ldi	r24, 0xA0	; 160
     966:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     968:	c5 d3       	rcall	.+1930   	; 0x10f4 <usart_spi_deselect_device>
     96a:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     96c:	89 83       	std	Y+1, r24	; 0x01
     96e:	be 01       	movw	r22, r28
     970:	6f 5f       	subi	r22, 0xFF	; 255
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	80 ea       	ldi	r24, 0xA0	; 160
     976:	99 e0       	ldi	r25, 0x09	; 9
     978:	a7 d3       	rcall	.+1870   	; 0x10c8 <usart_spi_select_device>
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     980:	e0 ea       	ldi	r30, 0xA0	; 160
     982:	f9 e0       	ldi	r31, 0x09	; 9
     984:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     986:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     988:	fd cf       	rjmp	.-6      	; 0x984 <st7565r_init+0x274>
     98a:	81 e2       	ldi	r24, 0x21	; 33
     98c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     990:	e0 ea       	ldi	r30, 0xA0	; 160
     992:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     994:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     996:	86 ff       	sbrs	r24, 6
     998:	fd cf       	rjmp	.-6      	; 0x994 <st7565r_init+0x284>
     99a:	e0 ea       	ldi	r30, 0xA0	; 160
     99c:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     99e:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9a0:	81 83       	std	Z+1, r24	; 0x01
     9a2:	80 81       	ld	r24, Z
     9a4:	be 01       	movw	r22, r28
     9a6:	6f 5f       	subi	r22, 0xFF	; 255
     9a8:	7f 4f       	sbci	r23, 0xFF	; 255
     9aa:	80 ea       	ldi	r24, 0xA0	; 160
     9ac:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9ae:	a2 d3       	rcall	.+1860   	; 0x10f4 <usart_spi_deselect_device>
     9b0:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9b2:	89 83       	std	Y+1, r24	; 0x01
     9b4:	be 01       	movw	r22, r28
     9b6:	6f 5f       	subi	r22, 0xFF	; 255
     9b8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ba:	80 ea       	ldi	r24, 0xA0	; 160
     9bc:	99 e0       	ldi	r25, 0x09	; 9
     9be:	84 d3       	rcall	.+1800   	; 0x10c8 <usart_spi_select_device>
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9c6:	e0 ea       	ldi	r30, 0xA0	; 160
     9c8:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9ca:	81 81       	ldd	r24, Z+1	; 0x01
     9cc:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9ce:	fd cf       	rjmp	.-6      	; 0x9ca <st7565r_init+0x2ba>
     9d0:	81 e8       	ldi	r24, 0x81	; 129
     9d2:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9d6:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9d8:	f9 e0       	ldi	r31, 0x09	; 9
     9da:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9dc:	86 ff       	sbrs	r24, 6
     9de:	fd cf       	rjmp	.-6      	; 0x9da <st7565r_init+0x2ca>
     9e0:	e0 ea       	ldi	r30, 0xA0	; 160
     9e2:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     9e4:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9e6:	81 83       	std	Z+1, r24	; 0x01
     9e8:	80 81       	ld	r24, Z
     9ea:	be 01       	movw	r22, r28
     9ec:	6f 5f       	subi	r22, 0xFF	; 255
     9ee:	7f 4f       	sbci	r23, 0xFF	; 255
     9f0:	80 ea       	ldi	r24, 0xA0	; 160
     9f2:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9f4:	7f d3       	rcall	.+1790   	; 0x10f4 <usart_spi_deselect_device>
     9f6:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9f8:	89 83       	std	Y+1, r24	; 0x01
     9fa:	be 01       	movw	r22, r28
     9fc:	6f 5f       	subi	r22, 0xFF	; 255
     9fe:	7f 4f       	sbci	r23, 0xFF	; 255
     a00:	80 ea       	ldi	r24, 0xA0	; 160
     a02:	99 e0       	ldi	r25, 0x09	; 9
     a04:	61 d3       	rcall	.+1730   	; 0x10c8 <usart_spi_select_device>
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a0c:	e0 ea       	ldi	r30, 0xA0	; 160
     a0e:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a10:	81 81       	ldd	r24, Z+1	; 0x01
     a12:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a14:	fd cf       	rjmp	.-6      	; 0xa10 <st7565r_init+0x300>
     a16:	89 e3       	ldi	r24, 0x39	; 57
     a18:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a1c:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a1e:	f9 e0       	ldi	r31, 0x09	; 9
     a20:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a22:	86 ff       	sbrs	r24, 6
     a24:	fd cf       	rjmp	.-6      	; 0xa20 <st7565r_init+0x310>
     a26:	e0 ea       	ldi	r30, 0xA0	; 160
     a28:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a2a:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a2c:	81 83       	std	Z+1, r24	; 0x01
     a2e:	80 81       	ld	r24, Z
     a30:	be 01       	movw	r22, r28
     a32:	6f 5f       	subi	r22, 0xFF	; 255
     a34:	7f 4f       	sbci	r23, 0xFF	; 255
     a36:	80 ea       	ldi	r24, 0xA0	; 160
     a38:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     a3a:	5c d3       	rcall	.+1720   	; 0x10f4 <usart_spi_deselect_device>
     a3c:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     a3e:	89 83       	std	Y+1, r24	; 0x01
     a40:	be 01       	movw	r22, r28
     a42:	6f 5f       	subi	r22, 0xFF	; 255
     a44:	7f 4f       	sbci	r23, 0xFF	; 255
     a46:	80 ea       	ldi	r24, 0xA0	; 160
     a48:	99 e0       	ldi	r25, 0x09	; 9
     a4a:	3e d3       	rcall	.+1660   	; 0x10c8 <usart_spi_select_device>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a52:	e0 ea       	ldi	r30, 0xA0	; 160
     a54:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a56:	81 81       	ldd	r24, Z+1	; 0x01
     a58:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a5a:	fd cf       	rjmp	.-6      	; 0xa56 <st7565r_init+0x346>
     a5c:	8f ea       	ldi	r24, 0xAF	; 175
     a5e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a62:	e0 ea       	ldi	r30, 0xA0	; 160
     a64:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a66:	81 81       	ldd	r24, Z+1	; 0x01
     a68:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a6a:	fd cf       	rjmp	.-6      	; 0xa66 <st7565r_init+0x356>
     a6c:	e0 ea       	ldi	r30, 0xA0	; 160
     a6e:	f9 e0       	ldi	r31, 0x09	; 9
     a70:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a72:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a74:	80 81       	ld	r24, Z
     a76:	be 01       	movw	r22, r28
     a78:	6f 5f       	subi	r22, 0xFF	; 255
     a7a:	7f 4f       	sbci	r23, 0xFF	; 255
     a7c:	80 ea       	ldi	r24, 0xA0	; 160
     a7e:	99 e0       	ldi	r25, 0x09	; 9
     a80:	39 d3       	rcall	.+1650   	; 0x10f4 <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     a82:	0f 90       	pop	r0
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16
     a8c:	ff 90       	pop	r15
     a8e:	ef 90       	pop	r14
     a90:	df 90       	pop	r13
     a92:	cf 90       	pop	r12
     a94:	bf 90       	pop	r11
     a96:	08 95       	ret

00000a98 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	1f 92       	push	r1
     a9e:	1f 92       	push	r1
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     aa4:	8f ef       	ldi	r24, 0xFF	; 255
     aa6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     aaa:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     aae:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     ab2:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     ab6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     aba:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     abe:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
     ac2:	6c e0       	ldi	r22, 0x0C	; 12
     ac4:	81 e4       	ldi	r24, 0x41	; 65
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	c7 d6       	rcall	.+3470   	; 0x1858 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     aca:	8f b7       	in	r24, 0x3f	; 63
     acc:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     ace:	f8 94       	cli
	return flags;
     ad0:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     ad2:	e0 e5       	ldi	r30, 0x50	; 80
     ad4:	f0 e0       	ldi	r31, 0x00	; 0
     ad6:	80 81       	ld	r24, Z
     ad8:	82 60       	ori	r24, 0x02	; 2
     ada:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     adc:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     ade:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     ae0:	81 ff       	sbrs	r24, 1
     ae2:	fd cf       	rjmp	.-6      	; 0xade <sysclk_init+0x46>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     ae4:	61 e0       	ldi	r22, 0x01	; 1
     ae6:	80 e4       	ldi	r24, 0x40	; 64
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	b6 d6       	rcall	.+3436   	; 0x1858 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     aec:	8f b7       	in	r24, 0x3f	; 63
     aee:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     af0:	f8 94       	cli
	return flags;
     af2:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     af4:	e0 e5       	ldi	r30, 0x50	; 80
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	80 81       	ld	r24, Z
     afa:	8e 7f       	andi	r24, 0xFE	; 254
     afc:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     afe:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     b00:	0f 90       	pop	r0
     b02:	0f 90       	pop	r0
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	08 95       	ret

00000b0a <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	1f 92       	push	r1
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b14:	9f b7       	in	r25, 0x3f	; 63
     b16:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     b18:	f8 94       	cli
	return flags;
     b1a:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     b1c:	e8 2f       	mov	r30, r24
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	e0 59       	subi	r30, 0x90	; 144
     b22:	ff 4f       	sbci	r31, 0xFF	; 255
     b24:	60 95       	com	r22
     b26:	80 81       	ld	r24, Z
     b28:	68 23       	and	r22, r24
     b2a:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     b2c:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     b2e:	0f 90       	pop	r0
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	08 95       	ret

00000b36 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	1f 92       	push	r1
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b40:	9f b7       	in	r25, 0x3f	; 63
     b42:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     b44:	f8 94       	cli
	return flags;
     b46:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
     b48:	e8 2f       	mov	r30, r24
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	e0 59       	subi	r30, 0x90	; 144
     b4e:	ff 4f       	sbci	r31, 0xFF	; 255
     b50:	80 81       	ld	r24, Z
     b52:	68 2b       	or	r22, r24
     b54:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     b56:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     b58:	0f 90       	pop	r0
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	08 95       	ret

00000b60 <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     b60:	ff 92       	push	r15
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	1f 92       	push	r1
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
     b70:	08 2f       	mov	r16, r24
     b72:	f6 2e       	mov	r15, r22
     b74:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     b76:	1a d1       	rcall	.+564    	; 0xdac <gfx_mono_framebuffer_put_byte>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     b78:	0f 70       	andi	r16, 0x0F	; 15
     b7a:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     b7c:	8b e2       	ldi	r24, 0x2B	; 43
     b7e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     b80:	be 01       	movw	r22, r28
     b82:	6f 5f       	subi	r22, 0xFF	; 255
     b84:	7f 4f       	sbci	r23, 0xFF	; 255
     b86:	80 ea       	ldi	r24, 0xA0	; 160
     b88:	99 e0       	ldi	r25, 0x09	; 9
     b8a:	9e d2       	rcall	.+1340   	; 0x10c8 <usart_spi_select_device>
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     b92:	e0 ea       	ldi	r30, 0xA0	; 160
     b94:	f9 e0       	ldi	r31, 0x09	; 9
     b96:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     b98:	95 ff       	sbrs	r25, 5
     b9a:	fd cf       	rjmp	.-6      	; 0xb96 <gfx_mono_st7565r_put_byte+0x36>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     b9c:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     ba0:	e0 ea       	ldi	r30, 0xA0	; 160
     ba2:	f9 e0       	ldi	r31, 0x09	; 9
     ba4:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     ba6:	86 ff       	sbrs	r24, 6
     ba8:	fd cf       	rjmp	.-6      	; 0xba4 <gfx_mono_st7565r_put_byte+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     baa:	e0 ea       	ldi	r30, 0xA0	; 160
     bac:	f9 e0       	ldi	r31, 0x09	; 9
     bae:	80 e4       	ldi	r24, 0x40	; 64
     bb0:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     bb2:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     bb4:	be 01       	movw	r22, r28
     bb6:	6f 5f       	subi	r22, 0xFF	; 255
     bb8:	7f 4f       	sbci	r23, 0xFF	; 255
     bba:	80 ea       	ldi	r24, 0xA0	; 160
     bbc:	99 e0       	ldi	r25, 0x09	; 9
     bbe:	9a d2       	rcall	.+1332   	; 0x10f4 <usart_spi_deselect_device>
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     bc0:	0f 2d       	mov	r16, r15
     bc2:	0f 77       	andi	r16, 0x7F	; 127
     bc4:	02 95       	swap	r16
     bc6:	0f 70       	andi	r16, 0x0F	; 15
     bc8:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     bca:	8b e2       	ldi	r24, 0x2B	; 43
     bcc:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     bce:	be 01       	movw	r22, r28
     bd0:	6f 5f       	subi	r22, 0xFF	; 255
     bd2:	7f 4f       	sbci	r23, 0xFF	; 255
     bd4:	80 ea       	ldi	r24, 0xA0	; 160
     bd6:	99 e0       	ldi	r25, 0x09	; 9
     bd8:	77 d2       	rcall	.+1262   	; 0x10c8 <usart_spi_select_device>
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     be0:	e0 ea       	ldi	r30, 0xA0	; 160
     be2:	f9 e0       	ldi	r31, 0x09	; 9
     be4:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     be6:	85 ff       	sbrs	r24, 5
     be8:	fd cf       	rjmp	.-6      	; 0xbe4 <gfx_mono_st7565r_put_byte+0x84>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     bea:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     bee:	e0 ea       	ldi	r30, 0xA0	; 160
     bf0:	f9 e0       	ldi	r31, 0x09	; 9
     bf2:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     bf4:	86 ff       	sbrs	r24, 6
     bf6:	fd cf       	rjmp	.-6      	; 0xbf2 <gfx_mono_st7565r_put_byte+0x92>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     bf8:	e0 ea       	ldi	r30, 0xA0	; 160
     bfa:	f9 e0       	ldi	r31, 0x09	; 9
     bfc:	80 e4       	ldi	r24, 0x40	; 64
     bfe:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     c00:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     c02:	be 01       	movw	r22, r28
     c04:	6f 5f       	subi	r22, 0xFF	; 255
     c06:	7f 4f       	sbci	r23, 0xFF	; 255
     c08:	80 ea       	ldi	r24, 0xA0	; 160
     c0a:	99 e0       	ldi	r25, 0x09	; 9
     c0c:	73 d2       	rcall	.+1254   	; 0x10f4 <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     c0e:	0f 2d       	mov	r16, r15
     c10:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     c12:	8b e2       	ldi	r24, 0x2B	; 43
     c14:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     c16:	be 01       	movw	r22, r28
     c18:	6f 5f       	subi	r22, 0xFF	; 255
     c1a:	7f 4f       	sbci	r23, 0xFF	; 255
     c1c:	80 ea       	ldi	r24, 0xA0	; 160
     c1e:	99 e0       	ldi	r25, 0x09	; 9
     c20:	53 d2       	rcall	.+1190   	; 0x10c8 <usart_spi_select_device>
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     c28:	e0 ea       	ldi	r30, 0xA0	; 160
     c2a:	f9 e0       	ldi	r31, 0x09	; 9
     c2c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     c2e:	85 ff       	sbrs	r24, 5
     c30:	fd cf       	rjmp	.-6      	; 0xc2c <gfx_mono_st7565r_put_byte+0xcc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     c32:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     c36:	e0 ea       	ldi	r30, 0xA0	; 160
     c38:	f9 e0       	ldi	r31, 0x09	; 9
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     c3c:	86 ff       	sbrs	r24, 6
     c3e:	fd cf       	rjmp	.-6      	; 0xc3a <gfx_mono_st7565r_put_byte+0xda>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     c40:	e0 ea       	ldi	r30, 0xA0	; 160
     c42:	f9 e0       	ldi	r31, 0x09	; 9
     c44:	80 e4       	ldi	r24, 0x40	; 64
     c46:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     c48:	80 81       	ld	r24, Z
     c4a:	be 01       	movw	r22, r28
     c4c:	6f 5f       	subi	r22, 0xFF	; 255
     c4e:	7f 4f       	sbci	r23, 0xFF	; 255
     c50:	80 ea       	ldi	r24, 0xA0	; 160
     c52:	99 e0       	ldi	r25, 0x09	; 9
     c54:	4f d2       	rcall	.+1182   	; 0x10f4 <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     c56:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     c58:	89 83       	std	Y+1, r24	; 0x01
     c5a:	be 01       	movw	r22, r28
     c5c:	6f 5f       	subi	r22, 0xFF	; 255
     c5e:	7f 4f       	sbci	r23, 0xFF	; 255
     c60:	80 ea       	ldi	r24, 0xA0	; 160
     c62:	99 e0       	ldi	r25, 0x09	; 9
     c64:	31 d2       	rcall	.+1122   	; 0x10c8 <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     c6c:	e0 ea       	ldi	r30, 0xA0	; 160
     c6e:	f9 e0       	ldi	r31, 0x09	; 9
     c70:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     c72:	85 ff       	sbrs	r24, 5
     c74:	fd cf       	rjmp	.-6      	; 0xc70 <gfx_mono_st7565r_put_byte+0x110>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     c76:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     c7a:	e0 ea       	ldi	r30, 0xA0	; 160
     c7c:	f9 e0       	ldi	r31, 0x09	; 9
     c7e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     c80:	86 ff       	sbrs	r24, 6
     c82:	fd cf       	rjmp	.-6      	; 0xc7e <gfx_mono_st7565r_put_byte+0x11e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     c84:	e0 ea       	ldi	r30, 0xA0	; 160
     c86:	f9 e0       	ldi	r31, 0x09	; 9
     c88:	80 e4       	ldi	r24, 0x40	; 64
     c8a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     c8c:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     c94:	be 01       	movw	r22, r28
     c96:	6f 5f       	subi	r22, 0xFF	; 255
     c98:	7f 4f       	sbci	r23, 0xFF	; 255
     c9a:	80 ea       	ldi	r24, 0xA0	; 160
     c9c:	99 e0       	ldi	r25, 0x09	; 9
     c9e:	2a d2       	rcall	.+1108   	; 0x10f4 <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     ca0:	0f 90       	pop	r0
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	1f 91       	pop	r17
     ca8:	0f 91       	pop	r16
     caa:	ff 90       	pop	r15
     cac:	08 95       	ret

00000cae <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     cae:	0f 93       	push	r16
     cb0:	1f 93       	push	r17
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
     cb6:	1f 92       	push	r1
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     cbc:	88 e2       	ldi	r24, 0x28	; 40
     cbe:	90 e2       	ldi	r25, 0x20	; 32
     cc0:	70 d0       	rcall	.+224    	; 0xda2 <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     cc2:	26 dd       	rcall	.-1460   	; 0x710 <st7565r_init>
     cc4:	8b e2       	ldi	r24, 0x2B	; 43
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     cc6:	89 83       	std	Y+1, r24	; 0x01
     cc8:	be 01       	movw	r22, r28
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     cca:	6f 5f       	subi	r22, 0xFF	; 255
     ccc:	7f 4f       	sbci	r23, 0xFF	; 255
     cce:	80 ea       	ldi	r24, 0xA0	; 160
     cd0:	99 e0       	ldi	r25, 0x09	; 9
     cd2:	fa d1       	rcall	.+1012   	; 0x10c8 <usart_spi_select_device>
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     cda:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     cdc:	f9 e0       	ldi	r31, 0x09	; 9
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	85 ff       	sbrs	r24, 5
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     ce2:	fd cf       	rjmp	.-6      	; 0xcde <gfx_mono_st7565r_init+0x30>
     ce4:	80 e4       	ldi	r24, 0x40	; 64
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     ce6:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     cea:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     cec:	f9 e0       	ldi	r31, 0x09	; 9
     cee:	81 81       	ldd	r24, Z+1	; 0x01
     cf0:	86 ff       	sbrs	r24, 6
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     cf2:	fd cf       	rjmp	.-6      	; 0xcee <gfx_mono_st7565r_init+0x40>
     cf4:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     cf6:	f9 e0       	ldi	r31, 0x09	; 9
     cf8:	80 e4       	ldi	r24, 0x40	; 64
     cfa:	81 83       	std	Z+1, r24	; 0x01
     cfc:	80 81       	ld	r24, Z
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     cfe:	be 01       	movw	r22, r28
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     d00:	6f 5f       	subi	r22, 0xFF	; 255
     d02:	7f 4f       	sbci	r23, 0xFF	; 255
     d04:	80 ea       	ldi	r24, 0xA0	; 160
     d06:	99 e0       	ldi	r25, 0x09	; 9
     d08:	f5 d1       	rcall	.+1002   	; 0x10f4 <usart_spi_deselect_device>
     d0a:	00 e0       	ldi	r16, 0x00	; 0

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     d0c:	0a c0       	rjmp	.+20     	; 0xd22 <gfx_mono_st7565r_init+0x74>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     d0e:	40 e0       	ldi	r20, 0x00	; 0
     d10:	61 2f       	mov	r22, r17
     d12:	80 2f       	mov	r24, r16
     d14:	25 df       	rcall	.-438    	; 0xb60 <gfx_mono_st7565r_put_byte>
     d16:	1f 5f       	subi	r17, 0xFF	; 255
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     d18:	10 38       	cpi	r17, 0x80	; 128
     d1a:	c9 f7       	brne	.-14     	; 0xd0e <gfx_mono_st7565r_init+0x60>
     d1c:	0f 5f       	subi	r16, 0xFF	; 255

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     d1e:	04 30       	cpi	r16, 0x04	; 4
     d20:	11 f0       	breq	.+4      	; 0xd26 <gfx_mono_st7565r_init+0x78>
     d22:	10 e0       	ldi	r17, 0x00	; 0
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     d24:	f4 cf       	rjmp	.-24     	; 0xd0e <gfx_mono_st7565r_init+0x60>
     d26:	0f 90       	pop	r0
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	08 95       	ret

00000d32 <gfx_mono_st7565r_draw_pixel>:
     d32:	ff 92       	push	r15
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     d34:	0f 93       	push	r16
     d36:	1f 93       	push	r17
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     d3c:	88 23       	and	r24, r24
     d3e:	4c f1       	brlt	.+82     	; 0xd92 <gfx_mono_st7565r_draw_pixel+0x60>
     d40:	60 32       	cpi	r22, 0x20	; 32
     d42:	38 f5       	brcc	.+78     	; 0xd92 <gfx_mono_st7565r_draw_pixel+0x60>
     d44:	d4 2f       	mov	r29, r20
     d46:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     d48:	f6 2e       	mov	r15, r22
     d4a:	f6 94       	lsr	r15
     d4c:	f6 94       	lsr	r15
     d4e:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	88 e0       	ldi	r24, 0x08	; 8
     d54:	f8 9e       	mul	r15, r24
     d56:	60 19       	sub	r22, r0
     d58:	71 09       	sbc	r23, r1
     d5a:	11 24       	eor	r1, r1
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	8c 01       	movw	r16, r24
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <gfx_mono_st7565r_draw_pixel+0x36>
     d64:	00 0f       	add	r16, r16
     d66:	11 1f       	adc	r17, r17
     d68:	6a 95       	dec	r22
     d6a:	e2 f7       	brpl	.-8      	; 0xd64 <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     d6c:	6c 2f       	mov	r22, r28
     d6e:	8f 2d       	mov	r24, r15
     d70:	2b d0       	rcall	.+86     	; 0xdc8 <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     d72:	d1 30       	cpi	r29, 0x01	; 1
     d74:	21 f0       	breq	.+8      	; 0xd7e <gfx_mono_st7565r_draw_pixel+0x4c>
     d76:	28 f0       	brcs	.+10     	; 0xd82 <gfx_mono_st7565r_draw_pixel+0x50>
     d78:	d2 30       	cpi	r29, 0x02	; 2
     d7a:	31 f0       	breq	.+12     	; 0xd88 <gfx_mono_st7565r_draw_pixel+0x56>
     d7c:	06 c0       	rjmp	.+12     	; 0xd8a <gfx_mono_st7565r_draw_pixel+0x58>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     d7e:	80 2b       	or	r24, r16
		break;
     d80:	04 c0       	rjmp	.+8      	; 0xd8a <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     d82:	00 95       	com	r16
     d84:	80 23       	and	r24, r16
		break;
     d86:	01 c0       	rjmp	.+2      	; 0xd8a <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     d88:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     d8a:	48 2f       	mov	r20, r24
     d8c:	6c 2f       	mov	r22, r28
     d8e:	8f 2d       	mov	r24, r15
     d90:	e7 de       	rcall	.-562    	; 0xb60 <gfx_mono_st7565r_put_byte>
}
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	1f 91       	pop	r17
     d98:	0f 91       	pop	r16
     d9a:	ff 90       	pop	r15
     d9c:	08 95       	ret

00000d9e <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     d9e:	14 c0       	rjmp	.+40     	; 0xdc8 <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     da0:	08 95       	ret

00000da2 <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
     da2:	80 93 28 22 	sts	0x2228, r24	; 0x802228 <fbpointer>
     da6:	90 93 29 22 	sts	0x2229, r25	; 0x802229 <fbpointer+0x1>
     daa:	08 95       	ret

00000dac <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     dac:	20 91 28 22 	lds	r18, 0x2228	; 0x802228 <fbpointer>
     db0:	30 91 29 22 	lds	r19, 0x2229	; 0x802229 <fbpointer+0x1>
     db4:	90 e8       	ldi	r25, 0x80	; 128
     db6:	89 9f       	mul	r24, r25
     db8:	20 0d       	add	r18, r0
     dba:	31 1d       	adc	r19, r1
     dbc:	11 24       	eor	r1, r1
     dbe:	f9 01       	movw	r30, r18
     dc0:	e6 0f       	add	r30, r22
     dc2:	f1 1d       	adc	r31, r1
     dc4:	40 83       	st	Z, r20
     dc6:	08 95       	ret

00000dc8 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     dc8:	20 91 28 22 	lds	r18, 0x2228	; 0x802228 <fbpointer>
     dcc:	30 91 29 22 	lds	r19, 0x2229	; 0x802229 <fbpointer+0x1>
     dd0:	90 e8       	ldi	r25, 0x80	; 128
     dd2:	89 9f       	mul	r24, r25
     dd4:	20 0d       	add	r18, r0
     dd6:	31 1d       	adc	r19, r1
     dd8:	11 24       	eor	r1, r1
     dda:	f9 01       	movw	r30, r18
     ddc:	e6 0f       	add	r30, r22
     dde:	f1 1d       	adc	r31, r1
}
     de0:	80 81       	ld	r24, Z
     de2:	08 95       	ret

00000de4 <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
     de4:	ff 92       	push	r15
     de6:	0f 93       	push	r16
     de8:	1f 93       	push	r17
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	e4 2f       	mov	r30, r20
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	e8 0f       	add	r30, r24
     df4:	f1 1d       	adc	r31, r1
     df6:	e1 38       	cpi	r30, 0x81	; 129
     df8:	f1 05       	cpc	r31, r1
     dfa:	1c f0       	brlt	.+6      	; 0xe02 <gfx_mono_generic_draw_horizontal_line+0x1e>
     dfc:	c0 e8       	ldi	r28, 0x80	; 128
     dfe:	4c 2f       	mov	r20, r28
     e00:	48 1b       	sub	r20, r24
     e02:	44 23       	and	r20, r20
     e04:	09 f4       	brne	.+2      	; 0xe08 <gfx_mono_generic_draw_horizontal_line+0x24>
     e06:	4a c0       	rjmp	.+148    	; 0xe9c <gfx_mono_generic_draw_horizontal_line+0xb8>
     e08:	d6 2f       	mov	r29, r22
     e0a:	d6 95       	lsr	r29
     e0c:	d6 95       	lsr	r29
     e0e:	d6 95       	lsr	r29
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	98 e0       	ldi	r25, 0x08	; 8
     e14:	d9 9f       	mul	r29, r25
     e16:	60 19       	sub	r22, r0
     e18:	71 09       	sbc	r23, r1
     e1a:	11 24       	eor	r1, r1
     e1c:	e1 e0       	ldi	r30, 0x01	; 1
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	df 01       	movw	r26, r30
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <gfx_mono_generic_draw_horizontal_line+0x44>
     e24:	aa 0f       	add	r26, r26
     e26:	bb 1f       	adc	r27, r27
     e28:	6a 95       	dec	r22
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <gfx_mono_generic_draw_horizontal_line+0x40>
     e2c:	fa 2e       	mov	r15, r26
     e2e:	21 30       	cpi	r18, 0x01	; 1
     e30:	21 f0       	breq	.+8      	; 0xe3a <gfx_mono_generic_draw_horizontal_line+0x56>
     e32:	98 f0       	brcs	.+38     	; 0xe5a <gfx_mono_generic_draw_horizontal_line+0x76>
     e34:	22 30       	cpi	r18, 0x02	; 2
     e36:	19 f1       	breq	.+70     	; 0xe7e <gfx_mono_generic_draw_horizontal_line+0x9a>
     e38:	31 c0       	rjmp	.+98     	; 0xe9c <gfx_mono_generic_draw_horizontal_line+0xb8>
     e3a:	c4 2f       	mov	r28, r20
     e3c:	1f ef       	ldi	r17, 0xFF	; 255
     e3e:	18 0f       	add	r17, r24
     e40:	01 2f       	mov	r16, r17
     e42:	0c 0f       	add	r16, r28
     e44:	60 2f       	mov	r22, r16
     e46:	8d 2f       	mov	r24, r29
     e48:	aa df       	rcall	.-172    	; 0xd9e <gfx_mono_st7565r_get_byte>
     e4a:	4f 2d       	mov	r20, r15
     e4c:	48 2b       	or	r20, r24
     e4e:	60 2f       	mov	r22, r16
     e50:	8d 2f       	mov	r24, r29
     e52:	86 de       	rcall	.-756    	; 0xb60 <gfx_mono_st7565r_put_byte>
     e54:	c1 50       	subi	r28, 0x01	; 1
     e56:	a1 f7       	brne	.-24     	; 0xe40 <gfx_mono_generic_draw_horizontal_line+0x5c>
     e58:	21 c0       	rjmp	.+66     	; 0xe9c <gfx_mono_generic_draw_horizontal_line+0xb8>
     e5a:	c4 2f       	mov	r28, r20
     e5c:	1f ef       	ldi	r17, 0xFF	; 255
     e5e:	18 0f       	add	r17, r24
     e60:	fa 2e       	mov	r15, r26
     e62:	f0 94       	com	r15
     e64:	01 2f       	mov	r16, r17
     e66:	0c 0f       	add	r16, r28
     e68:	60 2f       	mov	r22, r16
     e6a:	8d 2f       	mov	r24, r29
     e6c:	98 df       	rcall	.-208    	; 0xd9e <gfx_mono_st7565r_get_byte>
     e6e:	4f 2d       	mov	r20, r15
     e70:	48 23       	and	r20, r24
     e72:	60 2f       	mov	r22, r16
     e74:	8d 2f       	mov	r24, r29
     e76:	74 de       	rcall	.-792    	; 0xb60 <gfx_mono_st7565r_put_byte>
     e78:	c1 50       	subi	r28, 0x01	; 1
     e7a:	a1 f7       	brne	.-24     	; 0xe64 <gfx_mono_generic_draw_horizontal_line+0x80>
     e7c:	0f c0       	rjmp	.+30     	; 0xe9c <gfx_mono_generic_draw_horizontal_line+0xb8>
     e7e:	c4 2f       	mov	r28, r20
     e80:	1f ef       	ldi	r17, 0xFF	; 255
     e82:	18 0f       	add	r17, r24
     e84:	01 2f       	mov	r16, r17
     e86:	0c 0f       	add	r16, r28
     e88:	60 2f       	mov	r22, r16
     e8a:	8d 2f       	mov	r24, r29
     e8c:	88 df       	rcall	.-240    	; 0xd9e <gfx_mono_st7565r_get_byte>
     e8e:	4f 2d       	mov	r20, r15
     e90:	48 27       	eor	r20, r24
     e92:	60 2f       	mov	r22, r16
     e94:	8d 2f       	mov	r24, r29
     e96:	64 de       	rcall	.-824    	; 0xb60 <gfx_mono_st7565r_put_byte>
     e98:	c1 50       	subi	r28, 0x01	; 1
     e9a:	a1 f7       	brne	.-24     	; 0xe84 <gfx_mono_generic_draw_horizontal_line+0xa0>
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	1f 91       	pop	r17
     ea2:	0f 91       	pop	r16
     ea4:	ff 90       	pop	r15
     ea6:	08 95       	ret

00000ea8 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     ea8:	ff 92       	push	r15
     eaa:	0f 93       	push	r16
     eac:	1f 93       	push	r17
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
	if (height == 0) {
     eb2:	22 23       	and	r18, r18
     eb4:	69 f0       	breq	.+26     	; 0xed0 <gfx_mono_generic_draw_filled_rect+0x28>
     eb6:	f4 2e       	mov	r15, r20
     eb8:	18 2f       	mov	r17, r24
     eba:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     ebc:	df ef       	ldi	r29, 0xFF	; 255
     ebe:	d6 0f       	add	r29, r22
     ec0:	6d 2f       	mov	r22, r29
     ec2:	6c 0f       	add	r22, r28
     ec4:	20 2f       	mov	r18, r16
     ec6:	4f 2d       	mov	r20, r15
     ec8:	81 2f       	mov	r24, r17
     eca:	8c df       	rcall	.-232    	; 0xde4 <gfx_mono_generic_draw_horizontal_line>
     ecc:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
     ece:	c1 f7       	brne	.-16     	; 0xec0 <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
     ed0:	df 91       	pop	r29
     ed2:	cf 91       	pop	r28
     ed4:	1f 91       	pop	r17
     ed6:	0f 91       	pop	r16
     ed8:	ff 90       	pop	r15
     eda:	08 95       	ret

00000edc <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
     edc:	af 92       	push	r10
     ede:	bf 92       	push	r11
     ee0:	cf 92       	push	r12
     ee2:	df 92       	push	r13
     ee4:	ef 92       	push	r14
     ee6:	ff 92       	push	r15
     ee8:	0f 93       	push	r16
     eea:	1f 93       	push	r17
     eec:	cf 93       	push	r28
     eee:	df 93       	push	r29
     ef0:	c8 2f       	mov	r28, r24
     ef2:	e6 2e       	mov	r14, r22
     ef4:	b4 2e       	mov	r11, r20
     ef6:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
     ef8:	00 e0       	ldi	r16, 0x00	; 0
     efa:	f9 01       	movw	r30, r18
     efc:	24 81       	ldd	r18, Z+4	; 0x04
     efe:	43 81       	ldd	r20, Z+3	; 0x03
     f00:	6b 2d       	mov	r22, r11
     f02:	8e 2d       	mov	r24, r14
     f04:	d1 df       	rcall	.-94     	; 0xea8 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
     f06:	f6 01       	movw	r30, r12
     f08:	80 81       	ld	r24, Z
     f0a:	81 11       	cpse	r24, r1
     f0c:	39 c0       	rjmp	.+114    	; 0xf80 <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     f0e:	83 81       	ldd	r24, Z+3	; 0x03
     f10:	28 2f       	mov	r18, r24
     f12:	26 95       	lsr	r18
     f14:	26 95       	lsr	r18
     f16:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     f18:	87 70       	andi	r24, 0x07	; 7
     f1a:	09 f0       	breq	.+2      	; 0xf1e <gfx_mono_draw_char+0x42>
		char_row_size++;
     f1c:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
     f1e:	f6 01       	movw	r30, r12
     f20:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
     f22:	8c 2f       	mov	r24, r28
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	35 81       	ldd	r19, Z+5	; 0x05
     f28:	83 1b       	sub	r24, r19
     f2a:	91 09       	sbc	r25, r1
     f2c:	2a 9d       	mul	r18, r10
     f2e:	90 01       	movw	r18, r0
     f30:	11 24       	eor	r1, r1
     f32:	82 9f       	mul	r24, r18
     f34:	a0 01       	movw	r20, r0
     f36:	83 9f       	mul	r24, r19
     f38:	50 0d       	add	r21, r0
     f3a:	92 9f       	mul	r25, r18
     f3c:	50 0d       	add	r21, r0
     f3e:	11 24       	eor	r1, r1
     f40:	01 81       	ldd	r16, Z+1	; 0x01
     f42:	12 81       	ldd	r17, Z+2	; 0x02
     f44:	04 0f       	add	r16, r20
     f46:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
     f48:	f6 01       	movw	r30, r12
     f4a:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
     f4c:	ff 20       	and	r15, r15
     f4e:	a1 f0       	breq	.+40     	; 0xf78 <gfx_mono_draw_char+0x9c>
     f50:	d0 e0       	ldi	r29, 0x00	; 0
     f52:	c0 e0       	ldi	r28, 0x00	; 0
     f54:	8e 2d       	mov	r24, r14
     f56:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     f58:	9c 2f       	mov	r25, r28
     f5a:	97 70       	andi	r25, 0x07	; 7
     f5c:	21 f4       	brne	.+8      	; 0xf66 <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     f5e:	f8 01       	movw	r30, r16
     f60:	d4 91       	lpm	r29, Z
				glyph_data++;
     f62:	0f 5f       	subi	r16, 0xFF	; 255
     f64:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
     f66:	dd 23       	and	r29, r29
     f68:	1c f4       	brge	.+6      	; 0xf70 <gfx_mono_draw_char+0x94>
				gfx_mono_draw_pixel(inc_x, inc_y,
     f6a:	41 e0       	ldi	r20, 0x01	; 1
     f6c:	6b 2d       	mov	r22, r11
     f6e:	e1 de       	rcall	.-574    	; 0xd32 <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
     f70:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     f72:	cf 5f       	subi	r28, 0xFF	; 255
     f74:	fc 12       	cpse	r15, r28
     f76:	ee cf       	rjmp	.-36     	; 0xf54 <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
     f78:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
     f7a:	aa 94       	dec	r10
	} while (rows_left > 0);
     f7c:	a1 10       	cpse	r10, r1
     f7e:	e4 cf       	rjmp	.-56     	; 0xf48 <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	1f 91       	pop	r17
     f86:	0f 91       	pop	r16
     f88:	ff 90       	pop	r15
     f8a:	ef 90       	pop	r14
     f8c:	df 90       	pop	r13
     f8e:	cf 90       	pop	r12
     f90:	bf 90       	pop	r11
     f92:	af 90       	pop	r10
     f94:	08 95       	ret

00000f96 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
     f96:	df 92       	push	r13
     f98:	ef 92       	push	r14
     f9a:	ff 92       	push	r15
     f9c:	0f 93       	push	r16
     f9e:	1f 93       	push	r17
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	d6 2e       	mov	r13, r22
     fa6:	04 2f       	mov	r16, r20
     fa8:	79 01       	movw	r14, r18
     faa:	ec 01       	movw	r28, r24
     fac:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
     fae:	89 91       	ld	r24, Y+
     fb0:	8a 30       	cpi	r24, 0x0A	; 10
     fb2:	31 f4       	brne	.+12     	; 0xfc0 <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
     fb4:	f7 01       	movw	r30, r14
     fb6:	84 81       	ldd	r24, Z+4	; 0x04
     fb8:	8f 5f       	subi	r24, 0xFF	; 255
     fba:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     fbc:	1d 2d       	mov	r17, r13
     fbe:	09 c0       	rjmp	.+18     	; 0xfd2 <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
     fc0:	8d 30       	cpi	r24, 0x0D	; 13
     fc2:	39 f0       	breq	.+14     	; 0xfd2 <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
     fc4:	97 01       	movw	r18, r14
     fc6:	40 2f       	mov	r20, r16
     fc8:	61 2f       	mov	r22, r17
     fca:	88 df       	rcall	.-240    	; 0xedc <gfx_mono_draw_char>
			x += font->width;
     fcc:	f7 01       	movw	r30, r14
     fce:	83 81       	ldd	r24, Z+3	; 0x03
     fd0:	18 0f       	add	r17, r24
		}
	} while (*(++str));
     fd2:	88 81       	ld	r24, Y
     fd4:	81 11       	cpse	r24, r1
     fd6:	eb cf       	rjmp	.-42     	; 0xfae <gfx_mono_draw_string+0x18>
}
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	1f 91       	pop	r17
     fde:	0f 91       	pop	r16
     fe0:	ff 90       	pop	r15
     fe2:	ef 90       	pop	r14
     fe4:	df 90       	pop	r13
     fe6:	08 95       	ret

00000fe8 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     ff2:	c6 2f       	mov	r28, r22
     ff4:	d0 e0       	ldi	r29, 0x00	; 0
     ff6:	de 01       	movw	r26, r28
     ff8:	02 2e       	mov	r0, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <ioport_configure_port_pin+0x18>
     ffc:	b5 95       	asr	r27
     ffe:	a7 95       	ror	r26
    1000:	0a 94       	dec	r0
    1002:	e2 f7       	brpl	.-8      	; 0xffc <ioport_configure_port_pin+0x14>
    1004:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1006:	50 8b       	std	Z+16, r21	; 0x10
    1008:	2f 5f       	subi	r18, 0xFF	; 255
    100a:	3f 4f       	sbci	r19, 0xFF	; 255
    100c:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    100e:	28 30       	cpi	r18, 0x08	; 8
    1010:	31 05       	cpc	r19, r1
    1012:	89 f7       	brne	.-30     	; 0xff6 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    1014:	40 ff       	sbrs	r20, 0
    1016:	0a c0       	rjmp	.+20     	; 0x102c <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    1018:	41 ff       	sbrs	r20, 1
    101a:	03 c0       	rjmp	.+6      	; 0x1022 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    101c:	fc 01       	movw	r30, r24
    101e:	65 83       	std	Z+5, r22	; 0x05
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    1022:	fc 01       	movw	r30, r24
    1024:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    1026:	fc 01       	movw	r30, r24
    1028:	61 83       	std	Z+1, r22	; 0x01
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    102c:	fc 01       	movw	r30, r24
    102e:	62 83       	std	Z+2, r22	; 0x02
	}
}
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	08 95       	ret

00001036 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
    1036:	80 3a       	cpi	r24, 0xA0	; 160
    1038:	28 e0       	ldi	r18, 0x08	; 8
    103a:	92 07       	cpc	r25, r18
    103c:	21 f4       	brne	.+8      	; 0x1046 <usart_spi_init+0x10>
    103e:	60 e1       	ldi	r22, 0x10	; 16
    1040:	83 e0       	ldi	r24, 0x03	; 3
    1042:	63 cd       	rjmp	.-1338   	; 0xb0a <sysclk_enable_module>
    1044:	08 95       	ret
    1046:	80 3b       	cpi	r24, 0xB0	; 176
    1048:	28 e0       	ldi	r18, 0x08	; 8
    104a:	92 07       	cpc	r25, r18
    104c:	21 f4       	brne	.+8      	; 0x1056 <usart_spi_init+0x20>
    104e:	60 e2       	ldi	r22, 0x20	; 32
    1050:	83 e0       	ldi	r24, 0x03	; 3
    1052:	5b cd       	rjmp	.-1354   	; 0xb0a <sysclk_enable_module>
    1054:	08 95       	ret
    1056:	80 3a       	cpi	r24, 0xA0	; 160
    1058:	29 e0       	ldi	r18, 0x09	; 9
    105a:	92 07       	cpc	r25, r18
    105c:	21 f4       	brne	.+8      	; 0x1066 <usart_spi_init+0x30>
    105e:	60 e1       	ldi	r22, 0x10	; 16
    1060:	84 e0       	ldi	r24, 0x04	; 4
    1062:	53 cd       	rjmp	.-1370   	; 0xb0a <sysclk_enable_module>
    1064:	08 95       	ret
    1066:	80 3b       	cpi	r24, 0xB0	; 176
    1068:	29 e0       	ldi	r18, 0x09	; 9
    106a:	92 07       	cpc	r25, r18
    106c:	21 f4       	brne	.+8      	; 0x1076 <usart_spi_init+0x40>
    106e:	60 e2       	ldi	r22, 0x20	; 32
    1070:	84 e0       	ldi	r24, 0x04	; 4
    1072:	4b cd       	rjmp	.-1386   	; 0xb0a <sysclk_enable_module>
    1074:	08 95       	ret
    1076:	80 3a       	cpi	r24, 0xA0	; 160
    1078:	2a e0       	ldi	r18, 0x0A	; 10
    107a:	92 07       	cpc	r25, r18
    107c:	21 f4       	brne	.+8      	; 0x1086 <usart_spi_init+0x50>
    107e:	60 e1       	ldi	r22, 0x10	; 16
    1080:	85 e0       	ldi	r24, 0x05	; 5
    1082:	43 cd       	rjmp	.-1402   	; 0xb0a <sysclk_enable_module>
    1084:	08 95       	ret
    1086:	80 3a       	cpi	r24, 0xA0	; 160
    1088:	9b 40       	sbci	r25, 0x0B	; 11
    108a:	19 f4       	brne	.+6      	; 0x1092 <usart_spi_init+0x5c>
    108c:	60 e1       	ldi	r22, 0x10	; 16
    108e:	86 e0       	ldi	r24, 0x06	; 6
    1090:	3c cd       	rjmp	.-1416   	; 0xb0a <sysclk_enable_module>
    1092:	08 95       	ret

00001094 <usart_spi_setup_device>:
    1094:	0f 93       	push	r16
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	00 d0       	rcall	.+0      	; 0x109e <usart_spi_setup_device+0xa>
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <usart_spi_setup_device+0xc>
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	09 83       	std	Y+1, r16	; 0x01
    10a6:	1a 83       	std	Y+2, r17	; 0x02
    10a8:	2b 83       	std	Y+3, r18	; 0x03
    10aa:	3c 83       	std	Y+4, r19	; 0x04
    10ac:	4d 83       	std	Y+5, r20	; 0x05
    10ae:	1e 82       	std	Y+6, r1	; 0x06
    10b0:	be 01       	movw	r22, r28
    10b2:	6f 5f       	subi	r22, 0xFF	; 255
    10b4:	7f 4f       	sbci	r23, 0xFF	; 255
    10b6:	51 d6       	rcall	.+3234   	; 0x1d5a <usart_init_spi>
    10b8:	26 96       	adiw	r28, 0x06	; 6
    10ba:	cd bf       	out	0x3d, r28	; 61
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	1f 91       	pop	r17
    10c4:	0f 91       	pop	r16
    10c6:	08 95       	ret

000010c8 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    10c8:	fb 01       	movw	r30, r22
    10ca:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    10cc:	e8 2f       	mov	r30, r24
    10ce:	e6 95       	lsr	r30
    10d0:	e6 95       	lsr	r30
    10d2:	e6 95       	lsr	r30
    10d4:	40 e2       	ldi	r20, 0x20	; 32
    10d6:	e4 9f       	mul	r30, r20
    10d8:	f0 01       	movw	r30, r0
    10da:	11 24       	eor	r1, r1
    10dc:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    10de:	87 70       	andi	r24, 0x07	; 7
    10e0:	21 e0       	ldi	r18, 0x01	; 1
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	a9 01       	movw	r20, r18
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <usart_spi_select_device+0x24>
    10e8:	44 0f       	add	r20, r20
    10ea:	55 1f       	adc	r21, r21
    10ec:	8a 95       	dec	r24
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    10f0:	46 83       	std	Z+6, r20	; 0x06
    10f2:	08 95       	ret

000010f4 <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    10f4:	fb 01       	movw	r30, r22
    10f6:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    10f8:	e8 2f       	mov	r30, r24
    10fa:	e6 95       	lsr	r30
    10fc:	e6 95       	lsr	r30
    10fe:	e6 95       	lsr	r30
    1100:	40 e2       	ldi	r20, 0x20	; 32
    1102:	e4 9f       	mul	r30, r20
    1104:	f0 01       	movw	r30, r0
    1106:	11 24       	eor	r1, r1
    1108:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    110a:	87 70       	andi	r24, 0x07	; 7
    110c:	21 e0       	ldi	r18, 0x01	; 1
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	a9 01       	movw	r20, r18
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <usart_spi_deselect_device+0x24>
    1114:	44 0f       	add	r20, r20
    1116:	55 1f       	adc	r21, r21
    1118:	8a 95       	dec	r24
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    111c:	45 83       	std	Z+5, r20	; 0x05
    111e:	08 95       	ret

00001120 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    1120:	43 e0       	ldi	r20, 0x03	; 3
    1122:	50 e0       	ldi	r21, 0x00	; 0
    1124:	61 e0       	ldi	r22, 0x01	; 1
    1126:	80 ee       	ldi	r24, 0xE0	; 224
    1128:	97 e0       	ldi	r25, 0x07	; 7
    112a:	5e df       	rcall	.-324    	; 0xfe8 <ioport_configure_port_pin>
    112c:	43 e0       	ldi	r20, 0x03	; 3
    112e:	50 e0       	ldi	r21, 0x00	; 0
    1130:	62 e0       	ldi	r22, 0x02	; 2
    1132:	80 ee       	ldi	r24, 0xE0	; 224
    1134:	97 e0       	ldi	r25, 0x07	; 7
    1136:	58 df       	rcall	.-336    	; 0xfe8 <ioport_configure_port_pin>
    1138:	43 e0       	ldi	r20, 0x03	; 3
    113a:	50 e0       	ldi	r21, 0x00	; 0
    113c:	60 e1       	ldi	r22, 0x10	; 16
    113e:	80 e6       	ldi	r24, 0x60	; 96
    1140:	96 e0       	ldi	r25, 0x06	; 6
    1142:	52 df       	rcall	.-348    	; 0xfe8 <ioport_configure_port_pin>
    1144:	41 e0       	ldi	r20, 0x01	; 1
    1146:	50 e4       	ldi	r21, 0x40	; 64
    1148:	60 e2       	ldi	r22, 0x20	; 32
    114a:	80 e6       	ldi	r24, 0x60	; 96
    114c:	96 e0       	ldi	r25, 0x06	; 6
    114e:	4c df       	rcall	.-360    	; 0xfe8 <ioport_configure_port_pin>
    1150:	40 e0       	ldi	r20, 0x00	; 0
    1152:	5b e1       	ldi	r21, 0x1B	; 27
    1154:	60 e2       	ldi	r22, 0x20	; 32
    1156:	80 e8       	ldi	r24, 0x80	; 128
    1158:	96 e0       	ldi	r25, 0x06	; 6
    115a:	46 df       	rcall	.-372    	; 0xfe8 <ioport_configure_port_pin>
    115c:	40 e0       	ldi	r20, 0x00	; 0
    115e:	5b e1       	ldi	r21, 0x1B	; 27
    1160:	62 e0       	ldi	r22, 0x02	; 2
    1162:	80 ea       	ldi	r24, 0xA0	; 160
    1164:	96 e0       	ldi	r25, 0x06	; 6
    1166:	40 df       	rcall	.-384    	; 0xfe8 <ioport_configure_port_pin>
    1168:	40 e0       	ldi	r20, 0x00	; 0
    116a:	5b e1       	ldi	r21, 0x1B	; 27
    116c:	64 e0       	ldi	r22, 0x04	; 4
    116e:	80 ea       	ldi	r24, 0xA0	; 160
    1170:	96 e0       	ldi	r25, 0x06	; 6
    1172:	3a df       	rcall	.-396    	; 0xfe8 <ioport_configure_port_pin>
    1174:	43 e0       	ldi	r20, 0x03	; 3
    1176:	50 e0       	ldi	r21, 0x00	; 0
    1178:	62 e0       	ldi	r22, 0x02	; 2
    117a:	80 e6       	ldi	r24, 0x60	; 96
    117c:	96 e0       	ldi	r25, 0x06	; 6
    117e:	34 df       	rcall	.-408    	; 0xfe8 <ioport_configure_port_pin>
    1180:	43 e0       	ldi	r20, 0x03	; 3
    1182:	50 e0       	ldi	r21, 0x00	; 0
    1184:	68 e0       	ldi	r22, 0x08	; 8
    1186:	80 e6       	ldi	r24, 0x60	; 96
    1188:	96 e0       	ldi	r25, 0x06	; 6
    118a:	2e df       	rcall	.-420    	; 0xfe8 <ioport_configure_port_pin>
    118c:	43 e0       	ldi	r20, 0x03	; 3
    118e:	50 e0       	ldi	r21, 0x00	; 0
    1190:	68 e0       	ldi	r22, 0x08	; 8
    1192:	80 ea       	ldi	r24, 0xA0	; 160
    1194:	96 e0       	ldi	r25, 0x06	; 6
    1196:	28 df       	rcall	.-432    	; 0xfe8 <ioport_configure_port_pin>
    1198:	43 e0       	ldi	r20, 0x03	; 3
    119a:	50 e0       	ldi	r21, 0x00	; 0
    119c:	61 e0       	ldi	r22, 0x01	; 1
    119e:	80 e6       	ldi	r24, 0x60	; 96
    11a0:	96 e0       	ldi	r25, 0x06	; 6
    11a2:	22 df       	rcall	.-444    	; 0xfe8 <ioport_configure_port_pin>
    11a4:	43 e0       	ldi	r20, 0x03	; 3
    11a6:	50 e0       	ldi	r21, 0x00	; 0
    11a8:	68 e0       	ldi	r22, 0x08	; 8
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	96 e0       	ldi	r25, 0x06	; 6
    11ae:	1c df       	rcall	.-456    	; 0xfe8 <ioport_configure_port_pin>
    11b0:	41 e0       	ldi	r20, 0x01	; 1
    11b2:	50 e0       	ldi	r21, 0x00	; 0
    11b4:	60 e1       	ldi	r22, 0x10	; 16
    11b6:	80 e8       	ldi	r24, 0x80	; 128
    11b8:	96 e0       	ldi	r25, 0x06	; 6
    11ba:	16 cf       	rjmp	.-468    	; 0xfe8 <ioport_configure_port_pin>
    11bc:	08 95       	ret

000011be <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	1f 92       	push	r1
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    11c8:	2f b7       	in	r18, 0x3f	; 63
    11ca:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    11cc:	f8 94       	cli
	return flags;
    11ce:	49 81       	ldd	r20, Y+1	; 0x01
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    11d0:	28 2f       	mov	r18, r24
    11d2:	39 2f       	mov	r19, r25
    11d4:	21 15       	cp	r18, r1
    11d6:	82 e0       	ldi	r24, 0x02	; 2
    11d8:	38 07       	cpc	r19, r24
    11da:	29 f4       	brne	.+10     	; 0x11e6 <adc_set_callback+0x28>
		adca_callback = callback;
    11dc:	60 93 34 22 	sts	0x2234, r22	; 0x802234 <adca_callback>
    11e0:	70 93 35 22 	sts	0x2235, r23	; 0x802235 <adca_callback+0x1>
    11e4:	07 c0       	rjmp	.+14     	; 0x11f4 <adc_set_callback+0x36>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    11e6:	20 34       	cpi	r18, 0x40	; 64
    11e8:	32 40       	sbci	r19, 0x02	; 2
    11ea:	21 f4       	brne	.+8      	; 0x11f4 <adc_set_callback+0x36>
		adcb_callback = callback;
    11ec:	60 93 32 22 	sts	0x2232, r22	; 0x802232 <adcb_callback>
    11f0:	70 93 33 22 	sts	0x2233, r23	; 0x802233 <adcb_callback+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    11f4:	4f bf       	out	0x3f, r20	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
    11f6:	0f 90       	pop	r0
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	08 95       	ret

000011fe <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    11fe:	81 15       	cp	r24, r1
    1200:	22 e0       	ldi	r18, 0x02	; 2
    1202:	92 07       	cpc	r25, r18
    1204:	61 f4       	brne	.+24     	; 0x121e <adc_enable_clock+0x20>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    1206:	80 91 2b 22 	lds	r24, 0x222B	; 0x80222b <adca_enable_count>
    120a:	91 e0       	ldi	r25, 0x01	; 1
    120c:	98 0f       	add	r25, r24
    120e:	90 93 2b 22 	sts	0x222B, r25	; 0x80222b <adca_enable_count>
    1212:	81 11       	cpse	r24, r1
    1214:	12 c0       	rjmp	.+36     	; 0x123a <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1216:	62 e0       	ldi	r22, 0x02	; 2
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	77 cc       	rjmp	.-1810   	; 0xb0a <sysclk_enable_module>
    121c:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    121e:	80 34       	cpi	r24, 0x40	; 64
    1220:	92 40       	sbci	r25, 0x02	; 2
    1222:	59 f4       	brne	.+22     	; 0x123a <adc_enable_clock+0x3c>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    1224:	80 91 2a 22 	lds	r24, 0x222A	; 0x80222a <adcb_enable_count>
    1228:	91 e0       	ldi	r25, 0x01	; 1
    122a:	98 0f       	add	r25, r24
    122c:	90 93 2a 22 	sts	0x222A, r25	; 0x80222a <adcb_enable_count>
    1230:	81 11       	cpse	r24, r1
    1232:	03 c0       	rjmp	.+6      	; 0x123a <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1234:	62 e0       	ldi	r22, 0x02	; 2
    1236:	82 e0       	ldi	r24, 0x02	; 2
    1238:	68 cc       	rjmp	.-1840   	; 0xb0a <sysclk_enable_module>
    123a:	08 95       	ret

0000123c <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    123c:	81 15       	cp	r24, r1
    123e:	22 e0       	ldi	r18, 0x02	; 2
    1240:	92 07       	cpc	r25, r18
    1242:	59 f4       	brne	.+22     	; 0x125a <adc_disable_clock+0x1e>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    1244:	80 91 2b 22 	lds	r24, 0x222B	; 0x80222b <adca_enable_count>
    1248:	81 50       	subi	r24, 0x01	; 1
    124a:	80 93 2b 22 	sts	0x222B, r24	; 0x80222b <adca_enable_count>
    124e:	81 11       	cpse	r24, r1
    1250:	11 c0       	rjmp	.+34     	; 0x1274 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1252:	62 e0       	ldi	r22, 0x02	; 2
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	6f cc       	rjmp	.-1826   	; 0xb36 <sysclk_disable_module>
    1258:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    125a:	80 34       	cpi	r24, 0x40	; 64
    125c:	92 40       	sbci	r25, 0x02	; 2
    125e:	51 f4       	brne	.+20     	; 0x1274 <adc_disable_clock+0x38>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    1260:	80 91 2a 22 	lds	r24, 0x222A	; 0x80222a <adcb_enable_count>
    1264:	81 50       	subi	r24, 0x01	; 1
    1266:	80 93 2a 22 	sts	0x222A, r24	; 0x80222a <adcb_enable_count>
    126a:	81 11       	cpse	r24, r1
    126c:	03 c0       	rjmp	.+6      	; 0x1274 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    126e:	62 e0       	ldi	r22, 0x02	; 2
    1270:	82 e0       	ldi	r24, 0x02	; 2
    1272:	61 cc       	rjmp	.-1854   	; 0xb36 <sysclk_disable_module>
    1274:	08 95       	ret

00001276 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    1276:	ef 92       	push	r14
    1278:	ff 92       	push	r15
    127a:	1f 93       	push	r17
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	1f 92       	push	r1
    1282:	1f 92       	push	r1
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    128a:	8f b7       	in	r24, 0x3f	; 63
    128c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    128e:	f8 94       	cli
	return flags;
    1290:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    1292:	c7 01       	movw	r24, r14
    1294:	b4 df       	rcall	.-152    	; 0x11fe <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    1296:	f7 01       	movw	r30, r14
    1298:	80 81       	ld	r24, Z
    129a:	81 60       	ori	r24, 0x01	; 1
    129c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    129e:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    12a0:	80 91 2d 22 	lds	r24, 0x222D	; 0x80222d <sleepmgr_locks+0x1>
    12a4:	8f 3f       	cpi	r24, 0xFF	; 255
    12a6:	09 f4       	brne	.+2      	; 0x12aa <adc_enable+0x34>
    12a8:	ff cf       	rjmp	.-2      	; 0x12a8 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    12aa:	8f b7       	in	r24, 0x3f	; 63
    12ac:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    12ae:	f8 94       	cli
	return flags;
    12b0:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    12b2:	ec e2       	ldi	r30, 0x2C	; 44
    12b4:	f2 e2       	ldi	r31, 0x22	; 34
    12b6:	81 81       	ldd	r24, Z+1	; 0x01
    12b8:	8f 5f       	subi	r24, 0xFF	; 255
    12ba:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    12bc:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	1f 91       	pop	r17
    12c8:	ff 90       	pop	r15
    12ca:	ef 90       	pop	r14
    12cc:	08 95       	ret

000012ce <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    12ce:	1f 92       	push	r1
    12d0:	0f 92       	push	r0
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	0f 92       	push	r0
    12d6:	11 24       	eor	r1, r1
    12d8:	0b b6       	in	r0, 0x3b	; 59
    12da:	0f 92       	push	r0
    12dc:	2f 93       	push	r18
    12de:	3f 93       	push	r19
    12e0:	4f 93       	push	r20
    12e2:	5f 93       	push	r21
    12e4:	6f 93       	push	r22
    12e6:	7f 93       	push	r23
    12e8:	8f 93       	push	r24
    12ea:	9f 93       	push	r25
    12ec:	af 93       	push	r26
    12ee:	bf 93       	push	r27
    12f0:	ef 93       	push	r30
    12f2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    12f4:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    12f8:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    12fc:	e0 91 34 22 	lds	r30, 0x2234	; 0x802234 <adca_callback>
    1300:	f0 91 35 22 	lds	r31, 0x2235	; 0x802235 <adca_callback+0x1>
    1304:	61 e0       	ldi	r22, 0x01	; 1
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	92 e0       	ldi	r25, 0x02	; 2
    130a:	19 95       	eicall
}
    130c:	ff 91       	pop	r31
    130e:	ef 91       	pop	r30
    1310:	bf 91       	pop	r27
    1312:	af 91       	pop	r26
    1314:	9f 91       	pop	r25
    1316:	8f 91       	pop	r24
    1318:	7f 91       	pop	r23
    131a:	6f 91       	pop	r22
    131c:	5f 91       	pop	r21
    131e:	4f 91       	pop	r20
    1320:	3f 91       	pop	r19
    1322:	2f 91       	pop	r18
    1324:	0f 90       	pop	r0
    1326:	0b be       	out	0x3b, r0	; 59
    1328:	0f 90       	pop	r0
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	0f 90       	pop	r0
    132e:	1f 90       	pop	r1
    1330:	18 95       	reti

00001332 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    1332:	1f 92       	push	r1
    1334:	0f 92       	push	r0
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	0f 92       	push	r0
    133a:	11 24       	eor	r1, r1
    133c:	0b b6       	in	r0, 0x3b	; 59
    133e:	0f 92       	push	r0
    1340:	2f 93       	push	r18
    1342:	3f 93       	push	r19
    1344:	4f 93       	push	r20
    1346:	5f 93       	push	r21
    1348:	6f 93       	push	r22
    134a:	7f 93       	push	r23
    134c:	8f 93       	push	r24
    134e:	9f 93       	push	r25
    1350:	af 93       	push	r26
    1352:	bf 93       	push	r27
    1354:	ef 93       	push	r30
    1356:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    1358:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    135c:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    1360:	e0 91 34 22 	lds	r30, 0x2234	; 0x802234 <adca_callback>
    1364:	f0 91 35 22 	lds	r31, 0x2235	; 0x802235 <adca_callback+0x1>
    1368:	62 e0       	ldi	r22, 0x02	; 2
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	92 e0       	ldi	r25, 0x02	; 2
    136e:	19 95       	eicall
}
    1370:	ff 91       	pop	r31
    1372:	ef 91       	pop	r30
    1374:	bf 91       	pop	r27
    1376:	af 91       	pop	r26
    1378:	9f 91       	pop	r25
    137a:	8f 91       	pop	r24
    137c:	7f 91       	pop	r23
    137e:	6f 91       	pop	r22
    1380:	5f 91       	pop	r21
    1382:	4f 91       	pop	r20
    1384:	3f 91       	pop	r19
    1386:	2f 91       	pop	r18
    1388:	0f 90       	pop	r0
    138a:	0b be       	out	0x3b, r0	; 59
    138c:	0f 90       	pop	r0
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	0f 90       	pop	r0
    1392:	1f 90       	pop	r1
    1394:	18 95       	reti

00001396 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    1396:	1f 92       	push	r1
    1398:	0f 92       	push	r0
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	0f 92       	push	r0
    139e:	11 24       	eor	r1, r1
    13a0:	0b b6       	in	r0, 0x3b	; 59
    13a2:	0f 92       	push	r0
    13a4:	2f 93       	push	r18
    13a6:	3f 93       	push	r19
    13a8:	4f 93       	push	r20
    13aa:	5f 93       	push	r21
    13ac:	6f 93       	push	r22
    13ae:	7f 93       	push	r23
    13b0:	8f 93       	push	r24
    13b2:	9f 93       	push	r25
    13b4:	af 93       	push	r26
    13b6:	bf 93       	push	r27
    13b8:	ef 93       	push	r30
    13ba:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    13bc:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    13c0:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    13c4:	e0 91 34 22 	lds	r30, 0x2234	; 0x802234 <adca_callback>
    13c8:	f0 91 35 22 	lds	r31, 0x2235	; 0x802235 <adca_callback+0x1>
    13cc:	64 e0       	ldi	r22, 0x04	; 4
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	92 e0       	ldi	r25, 0x02	; 2
    13d2:	19 95       	eicall
}
    13d4:	ff 91       	pop	r31
    13d6:	ef 91       	pop	r30
    13d8:	bf 91       	pop	r27
    13da:	af 91       	pop	r26
    13dc:	9f 91       	pop	r25
    13de:	8f 91       	pop	r24
    13e0:	7f 91       	pop	r23
    13e2:	6f 91       	pop	r22
    13e4:	5f 91       	pop	r21
    13e6:	4f 91       	pop	r20
    13e8:	3f 91       	pop	r19
    13ea:	2f 91       	pop	r18
    13ec:	0f 90       	pop	r0
    13ee:	0b be       	out	0x3b, r0	; 59
    13f0:	0f 90       	pop	r0
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	0f 90       	pop	r0
    13f6:	1f 90       	pop	r1
    13f8:	18 95       	reti

000013fa <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    13fa:	1f 92       	push	r1
    13fc:	0f 92       	push	r0
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	0f 92       	push	r0
    1402:	11 24       	eor	r1, r1
    1404:	0b b6       	in	r0, 0x3b	; 59
    1406:	0f 92       	push	r0
    1408:	2f 93       	push	r18
    140a:	3f 93       	push	r19
    140c:	4f 93       	push	r20
    140e:	5f 93       	push	r21
    1410:	6f 93       	push	r22
    1412:	7f 93       	push	r23
    1414:	8f 93       	push	r24
    1416:	9f 93       	push	r25
    1418:	af 93       	push	r26
    141a:	bf 93       	push	r27
    141c:	ef 93       	push	r30
    141e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    1420:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    1424:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    1428:	e0 91 34 22 	lds	r30, 0x2234	; 0x802234 <adca_callback>
    142c:	f0 91 35 22 	lds	r31, 0x2235	; 0x802235 <adca_callback+0x1>
    1430:	68 e0       	ldi	r22, 0x08	; 8
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	92 e0       	ldi	r25, 0x02	; 2
    1436:	19 95       	eicall
}
    1438:	ff 91       	pop	r31
    143a:	ef 91       	pop	r30
    143c:	bf 91       	pop	r27
    143e:	af 91       	pop	r26
    1440:	9f 91       	pop	r25
    1442:	8f 91       	pop	r24
    1444:	7f 91       	pop	r23
    1446:	6f 91       	pop	r22
    1448:	5f 91       	pop	r21
    144a:	4f 91       	pop	r20
    144c:	3f 91       	pop	r19
    144e:	2f 91       	pop	r18
    1450:	0f 90       	pop	r0
    1452:	0b be       	out	0x3b, r0	; 59
    1454:	0f 90       	pop	r0
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	0f 90       	pop	r0
    145a:	1f 90       	pop	r1
    145c:	18 95       	reti

0000145e <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    145e:	1f 92       	push	r1
    1460:	0f 92       	push	r0
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	0f 92       	push	r0
    1466:	11 24       	eor	r1, r1
    1468:	0b b6       	in	r0, 0x3b	; 59
    146a:	0f 92       	push	r0
    146c:	2f 93       	push	r18
    146e:	3f 93       	push	r19
    1470:	4f 93       	push	r20
    1472:	5f 93       	push	r21
    1474:	6f 93       	push	r22
    1476:	7f 93       	push	r23
    1478:	8f 93       	push	r24
    147a:	9f 93       	push	r25
    147c:	af 93       	push	r26
    147e:	bf 93       	push	r27
    1480:	ef 93       	push	r30
    1482:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    1484:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    1488:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    148c:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <adcb_callback>
    1490:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <adcb_callback+0x1>
    1494:	61 e0       	ldi	r22, 0x01	; 1
    1496:	80 e4       	ldi	r24, 0x40	; 64
    1498:	92 e0       	ldi	r25, 0x02	; 2
    149a:	19 95       	eicall
}
    149c:	ff 91       	pop	r31
    149e:	ef 91       	pop	r30
    14a0:	bf 91       	pop	r27
    14a2:	af 91       	pop	r26
    14a4:	9f 91       	pop	r25
    14a6:	8f 91       	pop	r24
    14a8:	7f 91       	pop	r23
    14aa:	6f 91       	pop	r22
    14ac:	5f 91       	pop	r21
    14ae:	4f 91       	pop	r20
    14b0:	3f 91       	pop	r19
    14b2:	2f 91       	pop	r18
    14b4:	0f 90       	pop	r0
    14b6:	0b be       	out	0x3b, r0	; 59
    14b8:	0f 90       	pop	r0
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	0f 90       	pop	r0
    14be:	1f 90       	pop	r1
    14c0:	18 95       	reti

000014c2 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    14c2:	1f 92       	push	r1
    14c4:	0f 92       	push	r0
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	0f 92       	push	r0
    14ca:	11 24       	eor	r1, r1
    14cc:	0b b6       	in	r0, 0x3b	; 59
    14ce:	0f 92       	push	r0
    14d0:	2f 93       	push	r18
    14d2:	3f 93       	push	r19
    14d4:	4f 93       	push	r20
    14d6:	5f 93       	push	r21
    14d8:	6f 93       	push	r22
    14da:	7f 93       	push	r23
    14dc:	8f 93       	push	r24
    14de:	9f 93       	push	r25
    14e0:	af 93       	push	r26
    14e2:	bf 93       	push	r27
    14e4:	ef 93       	push	r30
    14e6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    14e8:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    14ec:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    14f0:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <adcb_callback>
    14f4:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <adcb_callback+0x1>
    14f8:	62 e0       	ldi	r22, 0x02	; 2
    14fa:	80 e4       	ldi	r24, 0x40	; 64
    14fc:	92 e0       	ldi	r25, 0x02	; 2
    14fe:	19 95       	eicall
}
    1500:	ff 91       	pop	r31
    1502:	ef 91       	pop	r30
    1504:	bf 91       	pop	r27
    1506:	af 91       	pop	r26
    1508:	9f 91       	pop	r25
    150a:	8f 91       	pop	r24
    150c:	7f 91       	pop	r23
    150e:	6f 91       	pop	r22
    1510:	5f 91       	pop	r21
    1512:	4f 91       	pop	r20
    1514:	3f 91       	pop	r19
    1516:	2f 91       	pop	r18
    1518:	0f 90       	pop	r0
    151a:	0b be       	out	0x3b, r0	; 59
    151c:	0f 90       	pop	r0
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	0f 90       	pop	r0
    1522:	1f 90       	pop	r1
    1524:	18 95       	reti

00001526 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    1526:	1f 92       	push	r1
    1528:	0f 92       	push	r0
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	0f 92       	push	r0
    152e:	11 24       	eor	r1, r1
    1530:	0b b6       	in	r0, 0x3b	; 59
    1532:	0f 92       	push	r0
    1534:	2f 93       	push	r18
    1536:	3f 93       	push	r19
    1538:	4f 93       	push	r20
    153a:	5f 93       	push	r21
    153c:	6f 93       	push	r22
    153e:	7f 93       	push	r23
    1540:	8f 93       	push	r24
    1542:	9f 93       	push	r25
    1544:	af 93       	push	r26
    1546:	bf 93       	push	r27
    1548:	ef 93       	push	r30
    154a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    154c:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    1550:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    1554:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <adcb_callback>
    1558:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <adcb_callback+0x1>
    155c:	64 e0       	ldi	r22, 0x04	; 4
    155e:	80 e4       	ldi	r24, 0x40	; 64
    1560:	92 e0       	ldi	r25, 0x02	; 2
    1562:	19 95       	eicall
}
    1564:	ff 91       	pop	r31
    1566:	ef 91       	pop	r30
    1568:	bf 91       	pop	r27
    156a:	af 91       	pop	r26
    156c:	9f 91       	pop	r25
    156e:	8f 91       	pop	r24
    1570:	7f 91       	pop	r23
    1572:	6f 91       	pop	r22
    1574:	5f 91       	pop	r21
    1576:	4f 91       	pop	r20
    1578:	3f 91       	pop	r19
    157a:	2f 91       	pop	r18
    157c:	0f 90       	pop	r0
    157e:	0b be       	out	0x3b, r0	; 59
    1580:	0f 90       	pop	r0
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	0f 90       	pop	r0
    1586:	1f 90       	pop	r1
    1588:	18 95       	reti

0000158a <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    158a:	1f 92       	push	r1
    158c:	0f 92       	push	r0
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	0f 92       	push	r0
    1592:	11 24       	eor	r1, r1
    1594:	0b b6       	in	r0, 0x3b	; 59
    1596:	0f 92       	push	r0
    1598:	2f 93       	push	r18
    159a:	3f 93       	push	r19
    159c:	4f 93       	push	r20
    159e:	5f 93       	push	r21
    15a0:	6f 93       	push	r22
    15a2:	7f 93       	push	r23
    15a4:	8f 93       	push	r24
    15a6:	9f 93       	push	r25
    15a8:	af 93       	push	r26
    15aa:	bf 93       	push	r27
    15ac:	ef 93       	push	r30
    15ae:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    15b0:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    15b4:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    15b8:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <adcb_callback>
    15bc:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <adcb_callback+0x1>
    15c0:	68 e0       	ldi	r22, 0x08	; 8
    15c2:	80 e4       	ldi	r24, 0x40	; 64
    15c4:	92 e0       	ldi	r25, 0x02	; 2
    15c6:	19 95       	eicall
}
    15c8:	ff 91       	pop	r31
    15ca:	ef 91       	pop	r30
    15cc:	bf 91       	pop	r27
    15ce:	af 91       	pop	r26
    15d0:	9f 91       	pop	r25
    15d2:	8f 91       	pop	r24
    15d4:	7f 91       	pop	r23
    15d6:	6f 91       	pop	r22
    15d8:	5f 91       	pop	r21
    15da:	4f 91       	pop	r20
    15dc:	3f 91       	pop	r19
    15de:	2f 91       	pop	r18
    15e0:	0f 90       	pop	r0
    15e2:	0b be       	out	0x3b, r0	; 59
    15e4:	0f 90       	pop	r0
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	0f 90       	pop	r0
    15ea:	1f 90       	pop	r1
    15ec:	18 95       	reti

000015ee <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    15ee:	bf 92       	push	r11
    15f0:	cf 92       	push	r12
    15f2:	df 92       	push	r13
    15f4:	ef 92       	push	r14
    15f6:	ff 92       	push	r15
    15f8:	0f 93       	push	r16
    15fa:	1f 93       	push	r17
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	1f 92       	push	r1
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	8c 01       	movw	r16, r24
    1608:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    160a:	81 15       	cp	r24, r1
    160c:	22 e0       	ldi	r18, 0x02	; 2
    160e:	92 07       	cpc	r25, r18
    1610:	71 f4       	brne	.+28     	; 0x162e <adc_write_configuration+0x40>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    1612:	61 e2       	ldi	r22, 0x21	; 33
    1614:	70 e0       	ldi	r23, 0x00	; 0
    1616:	82 e0       	ldi	r24, 0x02	; 2
    1618:	25 d1       	rcall	.+586    	; 0x1864 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    161a:	c8 2e       	mov	r12, r24
    161c:	d1 2c       	mov	r13, r1
    161e:	60 e2       	ldi	r22, 0x20	; 32
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	82 e0       	ldi	r24, 0x02	; 2
    1624:	1f d1       	rcall	.+574    	; 0x1864 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    1626:	dc 2c       	mov	r13, r12
    1628:	cc 24       	eor	r12, r12
    162a:	c8 2a       	or	r12, r24
    162c:	10 c0       	rjmp	.+32     	; 0x164e <adc_write_configuration+0x60>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    162e:	80 34       	cpi	r24, 0x40	; 64
    1630:	92 40       	sbci	r25, 0x02	; 2
    1632:	c1 f5       	brne	.+112    	; 0x16a4 <adc_write_configuration+0xb6>
    1634:	65 e2       	ldi	r22, 0x25	; 37
    1636:	70 e0       	ldi	r23, 0x00	; 0
    1638:	82 e0       	ldi	r24, 0x02	; 2
    163a:	14 d1       	rcall	.+552    	; 0x1864 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    163c:	c8 2e       	mov	r12, r24
    163e:	d1 2c       	mov	r13, r1
    1640:	64 e2       	ldi	r22, 0x24	; 36
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	82 e0       	ldi	r24, 0x02	; 2
    1646:	0e d1       	rcall	.+540    	; 0x1864 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    1648:	dc 2c       	mov	r13, r12
    164a:	cc 24       	eor	r12, r12
    164c:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    164e:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1650:	89 83       	std	Y+1, r24	; 0x01
	return flags;
    1652:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    1654:	b9 80       	ldd	r11, Y+1	; 0x01
    1656:	c8 01       	movw	r24, r16
    1658:	d2 dd       	rcall	.-1116   	; 0x11fe <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    165a:	f8 01       	movw	r30, r16
    165c:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
    165e:	92 e0       	ldi	r25, 0x02	; 2
    1660:	90 83       	st	Z, r25
	adc->CAL = cal;
    1662:	c4 86       	std	Z+12, r12	; 0x0c
    1664:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
    1666:	f7 01       	movw	r30, r14
    1668:	25 81       	ldd	r18, Z+5	; 0x05
    166a:	36 81       	ldd	r19, Z+6	; 0x06
    166c:	f8 01       	movw	r30, r16
    166e:	20 8f       	std	Z+24, r18	; 0x18
    1670:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    1672:	f7 01       	movw	r30, r14
    1674:	92 81       	ldd	r25, Z+2	; 0x02
    1676:	f8 01       	movw	r30, r16
    1678:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    167a:	f7 01       	movw	r30, r14
    167c:	94 81       	ldd	r25, Z+4	; 0x04
    167e:	f8 01       	movw	r30, r16
    1680:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    1682:	f7 01       	movw	r30, r14
    1684:	93 81       	ldd	r25, Z+3	; 0x03
    1686:	f8 01       	movw	r30, r16
    1688:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    168a:	f7 01       	movw	r30, r14
    168c:	91 81       	ldd	r25, Z+1	; 0x01
    168e:	f8 01       	movw	r30, r16
    1690:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    1692:	81 70       	andi	r24, 0x01	; 1
    1694:	f7 01       	movw	r30, r14
    1696:	90 81       	ld	r25, Z
    1698:	89 2b       	or	r24, r25
    169a:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
    169c:	80 83       	st	Z, r24
    169e:	c8 01       	movw	r24, r16
    16a0:	cd dd       	rcall	.-1126   	; 0x123c <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    16a2:	bf be       	out	0x3f, r11	; 63

	cpu_irq_restore(flags);
}
    16a4:	0f 90       	pop	r0
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	1f 91       	pop	r17
    16ac:	0f 91       	pop	r16
    16ae:	ff 90       	pop	r15
    16b0:	ef 90       	pop	r14
    16b2:	df 90       	pop	r13
    16b4:	cf 90       	pop	r12
    16b6:	bf 90       	pop	r11
    16b8:	08 95       	ret

000016ba <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    16ba:	df 92       	push	r13
    16bc:	ef 92       	push	r14
    16be:	ff 92       	push	r15
    16c0:	0f 93       	push	r16
    16c2:	1f 93       	push	r17
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	1f 92       	push	r1
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	8c 01       	movw	r16, r24
    16d0:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    16d2:	8f b7       	in	r24, 0x3f	; 63
    16d4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    16d6:	f8 94       	cli
	return flags;
    16d8:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    16da:	c8 01       	movw	r24, r16
    16dc:	90 dd       	rcall	.-1248   	; 0x11fe <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    16de:	f8 01       	movw	r30, r16
    16e0:	80 81       	ld	r24, Z
    16e2:	80 7c       	andi	r24, 0xC0	; 192
    16e4:	f7 01       	movw	r30, r14
    16e6:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    16e8:	f8 01       	movw	r30, r16
    16ea:	80 8d       	ldd	r24, Z+24	; 0x18
    16ec:	91 8d       	ldd	r25, Z+25	; 0x19
    16ee:	f7 01       	movw	r30, r14
    16f0:	85 83       	std	Z+5, r24	; 0x05
    16f2:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    16f4:	f8 01       	movw	r30, r16
    16f6:	82 81       	ldd	r24, Z+2	; 0x02
    16f8:	f7 01       	movw	r30, r14
    16fa:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    16fc:	f8 01       	movw	r30, r16
    16fe:	84 81       	ldd	r24, Z+4	; 0x04
    1700:	f7 01       	movw	r30, r14
    1702:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    1704:	f8 01       	movw	r30, r16
    1706:	83 81       	ldd	r24, Z+3	; 0x03
    1708:	f7 01       	movw	r30, r14
    170a:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    170c:	f8 01       	movw	r30, r16
    170e:	81 81       	ldd	r24, Z+1	; 0x01
    1710:	f7 01       	movw	r30, r14
    1712:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
    1714:	c8 01       	movw	r24, r16
    1716:	92 dd       	rcall	.-1244   	; 0x123c <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1718:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    171a:	0f 90       	pop	r0
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	1f 91       	pop	r17
    1722:	0f 91       	pop	r16
    1724:	ff 90       	pop	r15
    1726:	ef 90       	pop	r14
    1728:	df 90       	pop	r13
    172a:	08 95       	ret

0000172c <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    172c:	af 92       	push	r10
    172e:	bf 92       	push	r11
    1730:	cf 92       	push	r12
    1732:	df 92       	push	r13
    1734:	ef 92       	push	r14
    1736:	ff 92       	push	r15
    1738:	0f 93       	push	r16
    173a:	1f 93       	push	r17
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	1f 92       	push	r1
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
    1746:	6c 01       	movw	r12, r24
    1748:	b6 2e       	mov	r11, r22
    174a:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    174c:	86 2f       	mov	r24, r22
    174e:	83 70       	andi	r24, 0x03	; 3
    1750:	29 f4       	brne	.+10     	; 0x175c <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    1752:	96 2f       	mov	r25, r22
    1754:	96 95       	lsr	r25
    1756:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    1758:	82 e0       	ldi	r24, 0x02	; 2
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    175c:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    175e:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1760:	90 ff       	sbrs	r25, 0
		index++;
    1762:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1764:	86 01       	movw	r16, r12
    1766:	00 5e       	subi	r16, 0xE0	; 224
    1768:	1f 4f       	sbci	r17, 0xFF	; 255
    176a:	98 e0       	ldi	r25, 0x08	; 8
    176c:	89 9f       	mul	r24, r25
    176e:	00 0d       	add	r16, r0
    1770:	11 1d       	adc	r17, r1
    1772:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1774:	8f b7       	in	r24, 0x3f	; 63
    1776:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1778:	f8 94       	cli
	return flags;
    177a:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    177c:	c6 01       	movw	r24, r12
    177e:	3f dd       	rcall	.-1410   	; 0x11fe <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    1780:	f7 01       	movw	r30, r14
    1782:	80 81       	ld	r24, Z
    1784:	f8 01       	movw	r30, r16
    1786:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    1788:	f7 01       	movw	r30, r14
    178a:	82 81       	ldd	r24, Z+2	; 0x02
    178c:	f8 01       	movw	r30, r16
    178e:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    1790:	f7 01       	movw	r30, r14
    1792:	81 81       	ldd	r24, Z+1	; 0x01
    1794:	f8 01       	movw	r30, r16
    1796:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1798:	b0 fe       	sbrs	r11, 0
    179a:	04 c0       	rjmp	.+8      	; 0x17a4 <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    179c:	f7 01       	movw	r30, r14
    179e:	83 81       	ldd	r24, Z+3	; 0x03
    17a0:	f8 01       	movw	r30, r16
    17a2:	86 83       	std	Z+6, r24	; 0x06
	}
	adc_disable_clock(adc);
    17a4:	c6 01       	movw	r24, r12
    17a6:	4a dd       	rcall	.-1388   	; 0x123c <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    17a8:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
    17aa:	0f 90       	pop	r0
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	1f 91       	pop	r17
    17b2:	0f 91       	pop	r16
    17b4:	ff 90       	pop	r15
    17b6:	ef 90       	pop	r14
    17b8:	df 90       	pop	r13
    17ba:	cf 90       	pop	r12
    17bc:	bf 90       	pop	r11
    17be:	af 90       	pop	r10
    17c0:	08 95       	ret

000017c2 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    17c2:	af 92       	push	r10
    17c4:	bf 92       	push	r11
    17c6:	cf 92       	push	r12
    17c8:	df 92       	push	r13
    17ca:	ef 92       	push	r14
    17cc:	ff 92       	push	r15
    17ce:	0f 93       	push	r16
    17d0:	1f 93       	push	r17
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
    17d6:	1f 92       	push	r1
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	6c 01       	movw	r12, r24
    17de:	b6 2e       	mov	r11, r22
    17e0:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    17e2:	86 2f       	mov	r24, r22
    17e4:	83 70       	andi	r24, 0x03	; 3
    17e6:	29 f4       	brne	.+10     	; 0x17f2 <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    17e8:	96 2f       	mov	r25, r22
    17ea:	96 95       	lsr	r25
    17ec:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    17ee:	82 e0       	ldi	r24, 0x02	; 2
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    17f2:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    17f4:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    17f6:	90 ff       	sbrs	r25, 0
		index++;
    17f8:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    17fa:	86 01       	movw	r16, r12
    17fc:	00 5e       	subi	r16, 0xE0	; 224
    17fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1800:	98 e0       	ldi	r25, 0x08	; 8
    1802:	89 9f       	mul	r24, r25
    1804:	00 0d       	add	r16, r0
    1806:	11 1d       	adc	r17, r1
    1808:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    180a:	8f b7       	in	r24, 0x3f	; 63
    180c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    180e:	f8 94       	cli
	return flags;
    1810:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    1812:	c6 01       	movw	r24, r12
    1814:	f4 dc       	rcall	.-1560   	; 0x11fe <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    1816:	f8 01       	movw	r30, r16
    1818:	80 81       	ld	r24, Z
    181a:	f7 01       	movw	r30, r14
    181c:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    181e:	f8 01       	movw	r30, r16
    1820:	82 81       	ldd	r24, Z+2	; 0x02
    1822:	f7 01       	movw	r30, r14
    1824:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    1826:	f8 01       	movw	r30, r16
    1828:	81 81       	ldd	r24, Z+1	; 0x01
    182a:	f7 01       	movw	r30, r14
    182c:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    182e:	b0 fe       	sbrs	r11, 0
    1830:	04 c0       	rjmp	.+8      	; 0x183a <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    1832:	f8 01       	movw	r30, r16
    1834:	86 81       	ldd	r24, Z+6	; 0x06
    1836:	f7 01       	movw	r30, r14
    1838:	83 83       	std	Z+3, r24	; 0x03
	}
	adc_disable_clock(adc);
    183a:	c6 01       	movw	r24, r12
    183c:	ff dc       	rcall	.-1538   	; 0x123c <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    183e:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
    1840:	0f 90       	pop	r0
    1842:	df 91       	pop	r29
    1844:	cf 91       	pop	r28
    1846:	1f 91       	pop	r17
    1848:	0f 91       	pop	r16
    184a:	ff 90       	pop	r15
    184c:	ef 90       	pop	r14
    184e:	df 90       	pop	r13
    1850:	cf 90       	pop	r12
    1852:	bf 90       	pop	r11
    1854:	af 90       	pop	r10
    1856:	08 95       	ret

00001858 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1858:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    185a:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    185c:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    185e:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1860:	60 83       	st	Z, r22
	ret                             // Return to caller
    1862:	08 95       	ret

00001864 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1864:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1868:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    186a:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    186c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1870:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1872:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1876:	08 95       	ret

00001878 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    1878:	fc 01       	movw	r30, r24
    187a:	91 81       	ldd	r25, Z+1	; 0x01
    187c:	95 ff       	sbrs	r25, 5
    187e:	fd cf       	rjmp	.-6      	; 0x187a <usart_putchar+0x2>
    1880:	60 83       	st	Z, r22
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	08 95       	ret

00001888 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1888:	4f 92       	push	r4
    188a:	5f 92       	push	r5
    188c:	6f 92       	push	r6
    188e:	7f 92       	push	r7
    1890:	8f 92       	push	r8
    1892:	9f 92       	push	r9
    1894:	af 92       	push	r10
    1896:	bf 92       	push	r11
    1898:	ef 92       	push	r14
    189a:	ff 92       	push	r15
    189c:	0f 93       	push	r16
    189e:	1f 93       	push	r17
    18a0:	cf 93       	push	r28
    18a2:	7c 01       	movw	r14, r24
    18a4:	4a 01       	movw	r8, r20
    18a6:	5b 01       	movw	r10, r22
    18a8:	28 01       	movw	r4, r16
    18aa:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    18ac:	fc 01       	movw	r30, r24
    18ae:	84 81       	ldd	r24, Z+4	; 0x04
    18b0:	82 ff       	sbrs	r24, 2
    18b2:	16 c0       	rjmp	.+44     	; 0x18e0 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    18b4:	d9 01       	movw	r26, r18
    18b6:	c8 01       	movw	r24, r16
    18b8:	68 94       	set
    18ba:	12 f8       	bld	r1, 2
    18bc:	b6 95       	lsr	r27
    18be:	a7 95       	ror	r26
    18c0:	97 95       	ror	r25
    18c2:	87 95       	ror	r24
    18c4:	16 94       	lsr	r1
    18c6:	d1 f7       	brne	.-12     	; 0x18bc <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    18c8:	b9 01       	movw	r22, r18
    18ca:	a8 01       	movw	r20, r16
    18cc:	03 2e       	mov	r0, r19
    18ce:	36 e1       	ldi	r19, 0x16	; 22
    18d0:	76 95       	lsr	r23
    18d2:	67 95       	ror	r22
    18d4:	57 95       	ror	r21
    18d6:	47 95       	ror	r20
    18d8:	3a 95       	dec	r19
    18da:	d1 f7       	brne	.-12     	; 0x18d0 <usart_set_baudrate+0x48>
    18dc:	30 2d       	mov	r19, r0
    18de:	15 c0       	rjmp	.+42     	; 0x190a <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    18e0:	d9 01       	movw	r26, r18
    18e2:	c8 01       	movw	r24, r16
    18e4:	68 94       	set
    18e6:	13 f8       	bld	r1, 3
    18e8:	b6 95       	lsr	r27
    18ea:	a7 95       	ror	r26
    18ec:	97 95       	ror	r25
    18ee:	87 95       	ror	r24
    18f0:	16 94       	lsr	r1
    18f2:	d1 f7       	brne	.-12     	; 0x18e8 <usart_set_baudrate+0x60>
		min_rate /= 2;
    18f4:	b9 01       	movw	r22, r18
    18f6:	a8 01       	movw	r20, r16
    18f8:	03 2e       	mov	r0, r19
    18fa:	37 e1       	ldi	r19, 0x17	; 23
    18fc:	76 95       	lsr	r23
    18fe:	67 95       	ror	r22
    1900:	57 95       	ror	r21
    1902:	47 95       	ror	r20
    1904:	3a 95       	dec	r19
    1906:	d1 f7       	brne	.-12     	; 0x18fc <usart_set_baudrate+0x74>
    1908:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    190a:	88 15       	cp	r24, r8
    190c:	99 05       	cpc	r25, r9
    190e:	aa 05       	cpc	r26, r10
    1910:	bb 05       	cpc	r27, r11
    1912:	08 f4       	brcc	.+2      	; 0x1916 <usart_set_baudrate+0x8e>
    1914:	a2 c0       	rjmp	.+324    	; 0x1a5a <usart_set_baudrate+0x1d2>
    1916:	84 16       	cp	r8, r20
    1918:	95 06       	cpc	r9, r21
    191a:	a6 06       	cpc	r10, r22
    191c:	b7 06       	cpc	r11, r23
    191e:	08 f4       	brcc	.+2      	; 0x1922 <usart_set_baudrate+0x9a>
    1920:	9e c0       	rjmp	.+316    	; 0x1a5e <usart_set_baudrate+0x1d6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1922:	f7 01       	movw	r30, r14
    1924:	84 81       	ldd	r24, Z+4	; 0x04
    1926:	82 fd       	sbrc	r24, 2
    1928:	04 c0       	rjmp	.+8      	; 0x1932 <usart_set_baudrate+0xaa>
		baud *= 2;
    192a:	88 0c       	add	r8, r8
    192c:	99 1c       	adc	r9, r9
    192e:	aa 1c       	adc	r10, r10
    1930:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1932:	c3 01       	movw	r24, r6
    1934:	b2 01       	movw	r22, r4
    1936:	a5 01       	movw	r20, r10
    1938:	94 01       	movw	r18, r8
    193a:	97 d5       	rcall	.+2862   	; 0x246a <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    193c:	2f 3f       	cpi	r18, 0xFF	; 255
    193e:	31 05       	cpc	r19, r1
    1940:	41 05       	cpc	r20, r1
    1942:	51 05       	cpc	r21, r1
    1944:	08 f4       	brcc	.+2      	; 0x1948 <usart_set_baudrate+0xc0>
    1946:	8d c0       	rjmp	.+282    	; 0x1a62 <usart_set_baudrate+0x1da>
    1948:	8f ef       	ldi	r24, 0xFF	; 255
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	a0 e0       	ldi	r26, 0x00	; 0
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	c9 ef       	ldi	r28, 0xF9	; 249
    1952:	05 c0       	rjmp	.+10     	; 0x195e <usart_set_baudrate+0xd6>
    1954:	28 17       	cp	r18, r24
    1956:	39 07       	cpc	r19, r25
    1958:	4a 07       	cpc	r20, r26
    195a:	5b 07       	cpc	r21, r27
    195c:	58 f0       	brcs	.+22     	; 0x1974 <usart_set_baudrate+0xec>
			break;
		}

		limit <<= 1;
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	aa 1f       	adc	r26, r26
    1964:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    1966:	cd 3f       	cpi	r28, 0xFD	; 253
    1968:	0c f4       	brge	.+2      	; 0x196c <usart_set_baudrate+0xe4>
			limit |= 1;
    196a:	81 60       	ori	r24, 0x01	; 1
    196c:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    196e:	c7 30       	cpi	r28, 0x07	; 7
    1970:	89 f7       	brne	.-30     	; 0x1954 <usart_set_baudrate+0xcc>
    1972:	4d c0       	rjmp	.+154    	; 0x1a0e <usart_set_baudrate+0x186>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1974:	cc 23       	and	r28, r28
    1976:	0c f0       	brlt	.+2      	; 0x197a <usart_set_baudrate+0xf2>
    1978:	4a c0       	rjmp	.+148    	; 0x1a0e <usart_set_baudrate+0x186>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    197a:	d5 01       	movw	r26, r10
    197c:	c4 01       	movw	r24, r8
    197e:	88 0f       	add	r24, r24
    1980:	99 1f       	adc	r25, r25
    1982:	aa 1f       	adc	r26, r26
    1984:	bb 1f       	adc	r27, r27
    1986:	88 0f       	add	r24, r24
    1988:	99 1f       	adc	r25, r25
    198a:	aa 1f       	adc	r26, r26
    198c:	bb 1f       	adc	r27, r27
    198e:	88 0f       	add	r24, r24
    1990:	99 1f       	adc	r25, r25
    1992:	aa 1f       	adc	r26, r26
    1994:	bb 1f       	adc	r27, r27
    1996:	48 1a       	sub	r4, r24
    1998:	59 0a       	sbc	r5, r25
    199a:	6a 0a       	sbc	r6, r26
    199c:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    199e:	ce 3f       	cpi	r28, 0xFE	; 254
    19a0:	ec f4       	brge	.+58     	; 0x19dc <usart_set_baudrate+0x154>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    19a2:	8d ef       	ldi	r24, 0xFD	; 253
    19a4:	9f ef       	ldi	r25, 0xFF	; 255
    19a6:	8c 1b       	sub	r24, r28
    19a8:	91 09       	sbc	r25, r1
    19aa:	c7 fd       	sbrc	r28, 7
    19ac:	93 95       	inc	r25
    19ae:	04 c0       	rjmp	.+8      	; 0x19b8 <usart_set_baudrate+0x130>
    19b0:	44 0c       	add	r4, r4
    19b2:	55 1c       	adc	r5, r5
    19b4:	66 1c       	adc	r6, r6
    19b6:	77 1c       	adc	r7, r7
    19b8:	8a 95       	dec	r24
    19ba:	d2 f7       	brpl	.-12     	; 0x19b0 <usart_set_baudrate+0x128>
    19bc:	d5 01       	movw	r26, r10
    19be:	c4 01       	movw	r24, r8
    19c0:	b6 95       	lsr	r27
    19c2:	a7 95       	ror	r26
    19c4:	97 95       	ror	r25
    19c6:	87 95       	ror	r24
    19c8:	bc 01       	movw	r22, r24
    19ca:	cd 01       	movw	r24, r26
    19cc:	64 0d       	add	r22, r4
    19ce:	75 1d       	adc	r23, r5
    19d0:	86 1d       	adc	r24, r6
    19d2:	97 1d       	adc	r25, r7
    19d4:	a5 01       	movw	r20, r10
    19d6:	94 01       	movw	r18, r8
    19d8:	48 d5       	rcall	.+2704   	; 0x246a <__udivmodsi4>
    19da:	35 c0       	rjmp	.+106    	; 0x1a46 <usart_set_baudrate+0x1be>
		} else {
			baud <<= exp + 3;
    19dc:	83 e0       	ldi	r24, 0x03	; 3
    19de:	8c 0f       	add	r24, r28
    19e0:	a5 01       	movw	r20, r10
    19e2:	94 01       	movw	r18, r8
    19e4:	04 c0       	rjmp	.+8      	; 0x19ee <usart_set_baudrate+0x166>
    19e6:	22 0f       	add	r18, r18
    19e8:	33 1f       	adc	r19, r19
    19ea:	44 1f       	adc	r20, r20
    19ec:	55 1f       	adc	r21, r21
    19ee:	8a 95       	dec	r24
    19f0:	d2 f7       	brpl	.-12     	; 0x19e6 <usart_set_baudrate+0x15e>
			div = (cpu_hz + baud / 2) / baud;
    19f2:	da 01       	movw	r26, r20
    19f4:	c9 01       	movw	r24, r18
    19f6:	b6 95       	lsr	r27
    19f8:	a7 95       	ror	r26
    19fa:	97 95       	ror	r25
    19fc:	87 95       	ror	r24
    19fe:	bc 01       	movw	r22, r24
    1a00:	cd 01       	movw	r24, r26
    1a02:	64 0d       	add	r22, r4
    1a04:	75 1d       	adc	r23, r5
    1a06:	86 1d       	adc	r24, r6
    1a08:	97 1d       	adc	r25, r7
    1a0a:	2f d5       	rcall	.+2654   	; 0x246a <__udivmodsi4>
    1a0c:	1c c0       	rjmp	.+56     	; 0x1a46 <usart_set_baudrate+0x1be>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1a0e:	83 e0       	ldi	r24, 0x03	; 3
    1a10:	8c 0f       	add	r24, r28
    1a12:	a5 01       	movw	r20, r10
    1a14:	94 01       	movw	r18, r8
    1a16:	04 c0       	rjmp	.+8      	; 0x1a20 <usart_set_baudrate+0x198>
    1a18:	22 0f       	add	r18, r18
    1a1a:	33 1f       	adc	r19, r19
    1a1c:	44 1f       	adc	r20, r20
    1a1e:	55 1f       	adc	r21, r21
    1a20:	8a 95       	dec	r24
    1a22:	d2 f7       	brpl	.-12     	; 0x1a18 <usart_set_baudrate+0x190>
		div = (cpu_hz + baud / 2) / baud - 1;
    1a24:	da 01       	movw	r26, r20
    1a26:	c9 01       	movw	r24, r18
    1a28:	b6 95       	lsr	r27
    1a2a:	a7 95       	ror	r26
    1a2c:	97 95       	ror	r25
    1a2e:	87 95       	ror	r24
    1a30:	bc 01       	movw	r22, r24
    1a32:	cd 01       	movw	r24, r26
    1a34:	64 0d       	add	r22, r4
    1a36:	75 1d       	adc	r23, r5
    1a38:	86 1d       	adc	r24, r6
    1a3a:	97 1d       	adc	r25, r7
    1a3c:	16 d5       	rcall	.+2604   	; 0x246a <__udivmodsi4>
    1a3e:	21 50       	subi	r18, 0x01	; 1
    1a40:	31 09       	sbc	r19, r1
    1a42:	41 09       	sbc	r20, r1
    1a44:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1a46:	83 2f       	mov	r24, r19
    1a48:	8f 70       	andi	r24, 0x0F	; 15
    1a4a:	c2 95       	swap	r28
    1a4c:	c0 7f       	andi	r28, 0xF0	; 240
    1a4e:	c8 2b       	or	r28, r24
    1a50:	f7 01       	movw	r30, r14
    1a52:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1a54:	26 83       	std	Z+6, r18	; 0x06

	return true;
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	18 c0       	rjmp	.+48     	; 0x1a8a <usart_set_baudrate+0x202>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	16 c0       	rjmp	.+44     	; 0x1a8a <usart_set_baudrate+0x202>
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	14 c0       	rjmp	.+40     	; 0x1a8a <usart_set_baudrate+0x202>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1a62:	d5 01       	movw	r26, r10
    1a64:	c4 01       	movw	r24, r8
    1a66:	88 0f       	add	r24, r24
    1a68:	99 1f       	adc	r25, r25
    1a6a:	aa 1f       	adc	r26, r26
    1a6c:	bb 1f       	adc	r27, r27
    1a6e:	88 0f       	add	r24, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	aa 1f       	adc	r26, r26
    1a74:	bb 1f       	adc	r27, r27
    1a76:	88 0f       	add	r24, r24
    1a78:	99 1f       	adc	r25, r25
    1a7a:	aa 1f       	adc	r26, r26
    1a7c:	bb 1f       	adc	r27, r27
    1a7e:	48 1a       	sub	r4, r24
    1a80:	59 0a       	sbc	r5, r25
    1a82:	6a 0a       	sbc	r6, r26
    1a84:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1a86:	c9 ef       	ldi	r28, 0xF9	; 249
    1a88:	8c cf       	rjmp	.-232    	; 0x19a2 <usart_set_baudrate+0x11a>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1a8a:	cf 91       	pop	r28
    1a8c:	1f 91       	pop	r17
    1a8e:	0f 91       	pop	r16
    1a90:	ff 90       	pop	r15
    1a92:	ef 90       	pop	r14
    1a94:	bf 90       	pop	r11
    1a96:	af 90       	pop	r10
    1a98:	9f 90       	pop	r9
    1a9a:	8f 90       	pop	r8
    1a9c:	7f 90       	pop	r7
    1a9e:	6f 90       	pop	r6
    1aa0:	5f 90       	pop	r5
    1aa2:	4f 90       	pop	r4
    1aa4:	08 95       	ret

00001aa6 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    1aa6:	0f 93       	push	r16
    1aa8:	1f 93       	push	r17
    1aaa:	cf 93       	push	r28
    1aac:	df 93       	push	r29
    1aae:	ec 01       	movw	r28, r24
    1ab0:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1ab2:	00 97       	sbiw	r24, 0x00	; 0
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <usart_init_rs232+0x12>
    1ab6:	fe c0       	rjmp	.+508    	; 0x1cb4 <usart_init_rs232+0x20e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1ab8:	80 3c       	cpi	r24, 0xC0	; 192
    1aba:	91 05       	cpc	r25, r1
    1abc:	21 f4       	brne	.+8      	; 0x1ac6 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1abe:	60 e1       	ldi	r22, 0x10	; 16
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	23 d8       	rcall	.-4026   	; 0xb0a <sysclk_enable_module>
    1ac4:	f7 c0       	rjmp	.+494    	; 0x1cb4 <usart_init_rs232+0x20e>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1ac6:	c0 38       	cpi	r28, 0x80	; 128
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	d8 07       	cpc	r29, r24
    1acc:	21 f4       	brne	.+8      	; 0x1ad6 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1ace:	62 e0       	ldi	r22, 0x02	; 2
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	1b d8       	rcall	.-4042   	; 0xb0a <sysclk_enable_module>
    1ad4:	ef c0       	rjmp	.+478    	; 0x1cb4 <usart_init_rs232+0x20e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1ad6:	c1 15       	cp	r28, r1
    1ad8:	e1 e0       	ldi	r30, 0x01	; 1
    1ada:	de 07       	cpc	r29, r30
    1adc:	21 f4       	brne	.+8      	; 0x1ae6 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1ade:	61 e0       	ldi	r22, 0x01	; 1
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	13 d8       	rcall	.-4058   	; 0xb0a <sysclk_enable_module>
    1ae4:	e7 c0       	rjmp	.+462    	; 0x1cb4 <usart_init_rs232+0x20e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1ae6:	c0 38       	cpi	r28, 0x80	; 128
    1ae8:	f3 e0       	ldi	r31, 0x03	; 3
    1aea:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1aec:	21 f4       	brne	.+8      	; 0x1af6 <usart_init_rs232+0x50>
    1aee:	61 e0       	ldi	r22, 0x01	; 1
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	0b d8       	rcall	.-4074   	; 0xb0a <sysclk_enable_module>
    1af4:	df c0       	rjmp	.+446    	; 0x1cb4 <usart_init_rs232+0x20e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1af6:	c0 39       	cpi	r28, 0x90	; 144
    1af8:	83 e0       	ldi	r24, 0x03	; 3
    1afa:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1afc:	21 f4       	brne	.+8      	; 0x1b06 <usart_init_rs232+0x60>
    1afe:	61 e0       	ldi	r22, 0x01	; 1
    1b00:	82 e0       	ldi	r24, 0x02	; 2
    1b02:	03 d8       	rcall	.-4090   	; 0xb0a <sysclk_enable_module>
    1b04:	d7 c0       	rjmp	.+430    	; 0x1cb4 <usart_init_rs232+0x20e>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1b06:	c1 15       	cp	r28, r1
    1b08:	e2 e0       	ldi	r30, 0x02	; 2
    1b0a:	de 07       	cpc	r29, r30
    1b0c:	29 f4       	brne	.+10     	; 0x1b18 <usart_init_rs232+0x72>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1b0e:	62 e0       	ldi	r22, 0x02	; 2
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1b16:	ce c0       	rjmp	.+412    	; 0x1cb4 <usart_init_rs232+0x20e>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1b18:	c0 34       	cpi	r28, 0x40	; 64
    1b1a:	f2 e0       	ldi	r31, 0x02	; 2
    1b1c:	df 07       	cpc	r29, r31
    1b1e:	29 f4       	brne	.+10     	; 0x1b2a <usart_init_rs232+0x84>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1b20:	62 e0       	ldi	r22, 0x02	; 2
    1b22:	82 e0       	ldi	r24, 0x02	; 2
    1b24:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1b28:	c5 c0       	rjmp	.+394    	; 0x1cb4 <usart_init_rs232+0x20e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1b2a:	c0 32       	cpi	r28, 0x20	; 32
    1b2c:	83 e0       	ldi	r24, 0x03	; 3
    1b2e:	d8 07       	cpc	r29, r24
    1b30:	29 f4       	brne	.+10     	; 0x1b3c <usart_init_rs232+0x96>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1b32:	64 e0       	ldi	r22, 0x04	; 4
    1b34:	82 e0       	ldi	r24, 0x02	; 2
    1b36:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1b3a:	bc c0       	rjmp	.+376    	; 0x1cb4 <usart_init_rs232+0x20e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1b3c:	c1 15       	cp	r28, r1
    1b3e:	e8 e0       	ldi	r30, 0x08	; 8
    1b40:	de 07       	cpc	r29, r30
    1b42:	29 f4       	brne	.+10     	; 0x1b4e <usart_init_rs232+0xa8>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1b44:	61 e0       	ldi	r22, 0x01	; 1
    1b46:	83 e0       	ldi	r24, 0x03	; 3
    1b48:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1b4c:	b3 c0       	rjmp	.+358    	; 0x1cb4 <usart_init_rs232+0x20e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1b4e:	c1 15       	cp	r28, r1
    1b50:	f9 e0       	ldi	r31, 0x09	; 9
    1b52:	df 07       	cpc	r29, r31
    1b54:	29 f4       	brne	.+10     	; 0x1b60 <usart_init_rs232+0xba>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1b56:	61 e0       	ldi	r22, 0x01	; 1
    1b58:	84 e0       	ldi	r24, 0x04	; 4
    1b5a:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1b5e:	aa c0       	rjmp	.+340    	; 0x1cb4 <usart_init_rs232+0x20e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1b60:	c1 15       	cp	r28, r1
    1b62:	8a e0       	ldi	r24, 0x0A	; 10
    1b64:	d8 07       	cpc	r29, r24
    1b66:	29 f4       	brne	.+10     	; 0x1b72 <usart_init_rs232+0xcc>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1b68:	61 e0       	ldi	r22, 0x01	; 1
    1b6a:	85 e0       	ldi	r24, 0x05	; 5
    1b6c:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1b70:	a1 c0       	rjmp	.+322    	; 0x1cb4 <usart_init_rs232+0x20e>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1b72:	c1 15       	cp	r28, r1
    1b74:	eb e0       	ldi	r30, 0x0B	; 11
    1b76:	de 07       	cpc	r29, r30
    1b78:	29 f4       	brne	.+10     	; 0x1b84 <usart_init_rs232+0xde>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1b7a:	61 e0       	ldi	r22, 0x01	; 1
    1b7c:	86 e0       	ldi	r24, 0x06	; 6
    1b7e:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1b82:	98 c0       	rjmp	.+304    	; 0x1cb4 <usart_init_rs232+0x20e>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1b84:	c0 34       	cpi	r28, 0x40	; 64
    1b86:	f8 e0       	ldi	r31, 0x08	; 8
    1b88:	df 07       	cpc	r29, r31
    1b8a:	29 f4       	brne	.+10     	; 0x1b96 <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1b8c:	62 e0       	ldi	r22, 0x02	; 2
    1b8e:	83 e0       	ldi	r24, 0x03	; 3
    1b90:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1b94:	8f c0       	rjmp	.+286    	; 0x1cb4 <usart_init_rs232+0x20e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1b96:	c0 34       	cpi	r28, 0x40	; 64
    1b98:	89 e0       	ldi	r24, 0x09	; 9
    1b9a:	d8 07       	cpc	r29, r24
    1b9c:	29 f4       	brne	.+10     	; 0x1ba8 <usart_init_rs232+0x102>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1b9e:	62 e0       	ldi	r22, 0x02	; 2
    1ba0:	84 e0       	ldi	r24, 0x04	; 4
    1ba2:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1ba6:	86 c0       	rjmp	.+268    	; 0x1cb4 <usart_init_rs232+0x20e>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1ba8:	c0 34       	cpi	r28, 0x40	; 64
    1baa:	ea e0       	ldi	r30, 0x0A	; 10
    1bac:	de 07       	cpc	r29, r30
    1bae:	29 f4       	brne	.+10     	; 0x1bba <usart_init_rs232+0x114>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1bb0:	62 e0       	ldi	r22, 0x02	; 2
    1bb2:	85 e0       	ldi	r24, 0x05	; 5
    1bb4:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1bb8:	7d c0       	rjmp	.+250    	; 0x1cb4 <usart_init_rs232+0x20e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1bba:	c0 39       	cpi	r28, 0x90	; 144
    1bbc:	f8 e0       	ldi	r31, 0x08	; 8
    1bbe:	df 07       	cpc	r29, r31
    1bc0:	29 f4       	brne	.+10     	; 0x1bcc <usart_init_rs232+0x126>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1bc2:	64 e0       	ldi	r22, 0x04	; 4
    1bc4:	83 e0       	ldi	r24, 0x03	; 3
    1bc6:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1bca:	74 c0       	rjmp	.+232    	; 0x1cb4 <usart_init_rs232+0x20e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1bcc:	c0 39       	cpi	r28, 0x90	; 144
    1bce:	89 e0       	ldi	r24, 0x09	; 9
    1bd0:	d8 07       	cpc	r29, r24
    1bd2:	29 f4       	brne	.+10     	; 0x1bde <usart_init_rs232+0x138>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1bd4:	64 e0       	ldi	r22, 0x04	; 4
    1bd6:	84 e0       	ldi	r24, 0x04	; 4
    1bd8:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1bdc:	6b c0       	rjmp	.+214    	; 0x1cb4 <usart_init_rs232+0x20e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1bde:	c0 39       	cpi	r28, 0x90	; 144
    1be0:	ea e0       	ldi	r30, 0x0A	; 10
    1be2:	de 07       	cpc	r29, r30
    1be4:	29 f4       	brne	.+10     	; 0x1bf0 <usart_init_rs232+0x14a>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1be6:	64 e0       	ldi	r22, 0x04	; 4
    1be8:	85 e0       	ldi	r24, 0x05	; 5
    1bea:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1bee:	62 c0       	rjmp	.+196    	; 0x1cb4 <usart_init_rs232+0x20e>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1bf0:	c0 39       	cpi	r28, 0x90	; 144
    1bf2:	fb e0       	ldi	r31, 0x0B	; 11
    1bf4:	df 07       	cpc	r29, r31
    1bf6:	29 f4       	brne	.+10     	; 0x1c02 <usart_init_rs232+0x15c>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1bf8:	64 e0       	ldi	r22, 0x04	; 4
    1bfa:	86 e0       	ldi	r24, 0x06	; 6
    1bfc:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1c00:	59 c0       	rjmp	.+178    	; 0x1cb4 <usart_init_rs232+0x20e>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1c02:	c0 3c       	cpi	r28, 0xC0	; 192
    1c04:	88 e0       	ldi	r24, 0x08	; 8
    1c06:	d8 07       	cpc	r29, r24
    1c08:	29 f4       	brne	.+10     	; 0x1c14 <usart_init_rs232+0x16e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1c0a:	68 e0       	ldi	r22, 0x08	; 8
    1c0c:	83 e0       	ldi	r24, 0x03	; 3
    1c0e:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1c12:	50 c0       	rjmp	.+160    	; 0x1cb4 <usart_init_rs232+0x20e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1c14:	c0 3c       	cpi	r28, 0xC0	; 192
    1c16:	e9 e0       	ldi	r30, 0x09	; 9
    1c18:	de 07       	cpc	r29, r30
    1c1a:	29 f4       	brne	.+10     	; 0x1c26 <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1c1c:	68 e0       	ldi	r22, 0x08	; 8
    1c1e:	84 e0       	ldi	r24, 0x04	; 4
    1c20:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1c24:	47 c0       	rjmp	.+142    	; 0x1cb4 <usart_init_rs232+0x20e>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1c26:	c0 3a       	cpi	r28, 0xA0	; 160
    1c28:	f8 e0       	ldi	r31, 0x08	; 8
    1c2a:	df 07       	cpc	r29, r31
    1c2c:	29 f4       	brne	.+10     	; 0x1c38 <usart_init_rs232+0x192>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1c2e:	60 e1       	ldi	r22, 0x10	; 16
    1c30:	83 e0       	ldi	r24, 0x03	; 3
    1c32:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1c36:	3e c0       	rjmp	.+124    	; 0x1cb4 <usart_init_rs232+0x20e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1c38:	c0 3a       	cpi	r28, 0xA0	; 160
    1c3a:	89 e0       	ldi	r24, 0x09	; 9
    1c3c:	d8 07       	cpc	r29, r24
    1c3e:	29 f4       	brne	.+10     	; 0x1c4a <usart_init_rs232+0x1a4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1c40:	60 e1       	ldi	r22, 0x10	; 16
    1c42:	84 e0       	ldi	r24, 0x04	; 4
    1c44:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1c48:	35 c0       	rjmp	.+106    	; 0x1cb4 <usart_init_rs232+0x20e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1c4a:	c0 3a       	cpi	r28, 0xA0	; 160
    1c4c:	ea e0       	ldi	r30, 0x0A	; 10
    1c4e:	de 07       	cpc	r29, r30
    1c50:	29 f4       	brne	.+10     	; 0x1c5c <usart_init_rs232+0x1b6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1c52:	60 e1       	ldi	r22, 0x10	; 16
    1c54:	85 e0       	ldi	r24, 0x05	; 5
    1c56:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1c5a:	2c c0       	rjmp	.+88     	; 0x1cb4 <usart_init_rs232+0x20e>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1c5c:	c0 3a       	cpi	r28, 0xA0	; 160
    1c5e:	fb e0       	ldi	r31, 0x0B	; 11
    1c60:	df 07       	cpc	r29, r31
    1c62:	29 f4       	brne	.+10     	; 0x1c6e <usart_init_rs232+0x1c8>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1c64:	60 e1       	ldi	r22, 0x10	; 16
    1c66:	86 e0       	ldi	r24, 0x06	; 6
    1c68:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1c6c:	23 c0       	rjmp	.+70     	; 0x1cb4 <usart_init_rs232+0x20e>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1c6e:	c0 3b       	cpi	r28, 0xB0	; 176
    1c70:	88 e0       	ldi	r24, 0x08	; 8
    1c72:	d8 07       	cpc	r29, r24
    1c74:	29 f4       	brne	.+10     	; 0x1c80 <usart_init_rs232+0x1da>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1c76:	60 e2       	ldi	r22, 0x20	; 32
    1c78:	83 e0       	ldi	r24, 0x03	; 3
    1c7a:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1c7e:	1a c0       	rjmp	.+52     	; 0x1cb4 <usart_init_rs232+0x20e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1c80:	c0 3b       	cpi	r28, 0xB0	; 176
    1c82:	e9 e0       	ldi	r30, 0x09	; 9
    1c84:	de 07       	cpc	r29, r30
    1c86:	29 f4       	brne	.+10     	; 0x1c92 <usart_init_rs232+0x1ec>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1c88:	60 e2       	ldi	r22, 0x20	; 32
    1c8a:	84 e0       	ldi	r24, 0x04	; 4
    1c8c:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1c90:	11 c0       	rjmp	.+34     	; 0x1cb4 <usart_init_rs232+0x20e>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1c92:	c0 38       	cpi	r28, 0x80	; 128
    1c94:	f4 e0       	ldi	r31, 0x04	; 4
    1c96:	df 07       	cpc	r29, r31
    1c98:	29 f4       	brne	.+10     	; 0x1ca4 <usart_init_rs232+0x1fe>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1c9a:	60 e4       	ldi	r22, 0x40	; 64
    1c9c:	83 e0       	ldi	r24, 0x03	; 3
    1c9e:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1ca2:	08 c0       	rjmp	.+16     	; 0x1cb4 <usart_init_rs232+0x20e>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1ca4:	c0 3a       	cpi	r28, 0xA0	; 160
    1ca6:	84 e0       	ldi	r24, 0x04	; 4
    1ca8:	d8 07       	cpc	r29, r24
    1caa:	21 f4       	brne	.+8      	; 0x1cb4 <usart_init_rs232+0x20e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1cac:	60 e4       	ldi	r22, 0x40	; 64
    1cae:	85 e0       	ldi	r24, 0x05	; 5
    1cb0:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb6:	8f 73       	andi	r24, 0x3F	; 63
    1cb8:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1cba:	f8 01       	movw	r30, r16
    1cbc:	95 81       	ldd	r25, Z+5	; 0x05
    1cbe:	84 81       	ldd	r24, Z+4	; 0x04
    1cc0:	89 2b       	or	r24, r25
    1cc2:	96 81       	ldd	r25, Z+6	; 0x06
    1cc4:	91 11       	cpse	r25, r1
    1cc6:	98 e0       	ldi	r25, 0x08	; 8
    1cc8:	89 2b       	or	r24, r25
    1cca:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1ccc:	f8 01       	movw	r30, r16
    1cce:	40 81       	ld	r20, Z
    1cd0:	51 81       	ldd	r21, Z+1	; 0x01
    1cd2:	62 81       	ldd	r22, Z+2	; 0x02
    1cd4:	73 81       	ldd	r23, Z+3	; 0x03
    1cd6:	00 e0       	ldi	r16, 0x00	; 0
    1cd8:	12 e1       	ldi	r17, 0x12	; 18
    1cda:	2a e7       	ldi	r18, 0x7A	; 122
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	ce 01       	movw	r24, r28
    1ce0:	d3 dd       	rcall	.-1114   	; 0x1888 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce4:	98 60       	ori	r25, 0x08	; 8
    1ce6:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1ce8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cea:	90 61       	ori	r25, 0x10	; 16
    1cec:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1cee:	df 91       	pop	r29
    1cf0:	cf 91       	pop	r28
    1cf2:	1f 91       	pop	r17
    1cf4:	0f 91       	pop	r16
    1cf6:	08 95       	ret

00001cf8 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1cf8:	cf 92       	push	r12
    1cfa:	df 92       	push	r13
    1cfc:	ef 92       	push	r14
    1cfe:	ff 92       	push	r15
    1d00:	0f 93       	push	r16
    1d02:	1f 93       	push	r17
    1d04:	cf 93       	push	r28
    1d06:	df 93       	push	r29
    1d08:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    1d0a:	d9 01       	movw	r26, r18
    1d0c:	c8 01       	movw	r24, r16
    1d0e:	b6 95       	lsr	r27
    1d10:	a7 95       	ror	r26
    1d12:	97 95       	ror	r25
    1d14:	87 95       	ror	r24
    1d16:	48 17       	cp	r20, r24
    1d18:	59 07       	cpc	r21, r25
    1d1a:	6a 07       	cpc	r22, r26
    1d1c:	7b 07       	cpc	r23, r27
    1d1e:	70 f4       	brcc	.+28     	; 0x1d3c <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    1d20:	6a 01       	movw	r12, r20
    1d22:	7b 01       	movw	r14, r22
    1d24:	cc 0c       	add	r12, r12
    1d26:	dd 1c       	adc	r13, r13
    1d28:	ee 1c       	adc	r14, r14
    1d2a:	ff 1c       	adc	r15, r15
    1d2c:	c9 01       	movw	r24, r18
    1d2e:	b8 01       	movw	r22, r16
    1d30:	a7 01       	movw	r20, r14
    1d32:	96 01       	movw	r18, r12
    1d34:	9a d3       	rcall	.+1844   	; 0x246a <__udivmodsi4>
    1d36:	21 50       	subi	r18, 0x01	; 1
    1d38:	31 09       	sbc	r19, r1
    1d3a:	02 c0       	rjmp	.+4      	; 0x1d40 <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    1d40:	83 2f       	mov	r24, r19
    1d42:	8f 70       	andi	r24, 0x0F	; 15
    1d44:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    1d46:	2e 83       	std	Y+6, r18	; 0x06
}
    1d48:	df 91       	pop	r29
    1d4a:	cf 91       	pop	r28
    1d4c:	1f 91       	pop	r17
    1d4e:	0f 91       	pop	r16
    1d50:	ff 90       	pop	r15
    1d52:	ef 90       	pop	r14
    1d54:	df 90       	pop	r13
    1d56:	cf 90       	pop	r12
    1d58:	08 95       	ret

00001d5a <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1d5a:	df 92       	push	r13
    1d5c:	ef 92       	push	r14
    1d5e:	ff 92       	push	r15
    1d60:	0f 93       	push	r16
    1d62:	1f 93       	push	r17
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	1f 92       	push	r1
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
    1d6e:	7c 01       	movw	r14, r24
    1d70:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	09 f4       	brne	.+2      	; 0x1d78 <usart_init_spi+0x1e>
    1d76:	cf c1       	rjmp	.+926    	; 0x2116 <usart_init_spi+0x3bc>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1d78:	80 3c       	cpi	r24, 0xC0	; 192
    1d7a:	91 05       	cpc	r25, r1
    1d7c:	29 f4       	brne	.+10     	; 0x1d88 <usart_init_spi+0x2e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1d7e:	60 e1       	ldi	r22, 0x10	; 16
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1d86:	c7 c1       	rjmp	.+910    	; 0x2116 <usart_init_spi+0x3bc>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1d88:	80 e8       	ldi	r24, 0x80	; 128
    1d8a:	e8 16       	cp	r14, r24
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	f8 06       	cpc	r15, r24
    1d90:	29 f4       	brne	.+10     	; 0x1d9c <usart_init_spi+0x42>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1d92:	62 e0       	ldi	r22, 0x02	; 2
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1d9a:	bd c1       	rjmp	.+890    	; 0x2116 <usart_init_spi+0x3bc>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1d9c:	e1 14       	cp	r14, r1
    1d9e:	e1 e0       	ldi	r30, 0x01	; 1
    1da0:	fe 06       	cpc	r15, r30
    1da2:	29 f4       	brne	.+10     	; 0x1dae <usart_init_spi+0x54>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1da4:	61 e0       	ldi	r22, 0x01	; 1
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1dac:	b4 c1       	rjmp	.+872    	; 0x2116 <usart_init_spi+0x3bc>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1dae:	f0 e8       	ldi	r31, 0x80	; 128
    1db0:	ef 16       	cp	r14, r31
    1db2:	f3 e0       	ldi	r31, 0x03	; 3
    1db4:	ff 06       	cpc	r15, r31
    1db6:	29 f4       	brne	.+10     	; 0x1dc2 <usart_init_spi+0x68>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1db8:	61 e0       	ldi	r22, 0x01	; 1
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1dc0:	aa c1       	rjmp	.+852    	; 0x2116 <usart_init_spi+0x3bc>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1dc2:	30 e9       	ldi	r19, 0x90	; 144
    1dc4:	e3 16       	cp	r14, r19
    1dc6:	33 e0       	ldi	r19, 0x03	; 3
    1dc8:	f3 06       	cpc	r15, r19
    1dca:	29 f4       	brne	.+10     	; 0x1dd6 <usart_init_spi+0x7c>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1dcc:	61 e0       	ldi	r22, 0x01	; 1
    1dce:	82 e0       	ldi	r24, 0x02	; 2
    1dd0:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1dd4:	a0 c1       	rjmp	.+832    	; 0x2116 <usart_init_spi+0x3bc>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1dd6:	e1 14       	cp	r14, r1
    1dd8:	82 e0       	ldi	r24, 0x02	; 2
    1dda:	f8 06       	cpc	r15, r24
    1ddc:	29 f4       	brne	.+10     	; 0x1de8 <usart_init_spi+0x8e>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1dde:	62 e0       	ldi	r22, 0x02	; 2
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1de6:	97 c1       	rjmp	.+814    	; 0x2116 <usart_init_spi+0x3bc>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1de8:	e0 e4       	ldi	r30, 0x40	; 64
    1dea:	ee 16       	cp	r14, r30
    1dec:	e2 e0       	ldi	r30, 0x02	; 2
    1dee:	fe 06       	cpc	r15, r30
    1df0:	29 f4       	brne	.+10     	; 0x1dfc <usart_init_spi+0xa2>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1df2:	62 e0       	ldi	r22, 0x02	; 2
    1df4:	82 e0       	ldi	r24, 0x02	; 2
    1df6:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1dfa:	8d c1       	rjmp	.+794    	; 0x2116 <usart_init_spi+0x3bc>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1dfc:	f0 e2       	ldi	r31, 0x20	; 32
    1dfe:	ef 16       	cp	r14, r31
    1e00:	f3 e0       	ldi	r31, 0x03	; 3
    1e02:	ff 06       	cpc	r15, r31
    1e04:	29 f4       	brne	.+10     	; 0x1e10 <usart_init_spi+0xb6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1e06:	64 e0       	ldi	r22, 0x04	; 4
    1e08:	82 e0       	ldi	r24, 0x02	; 2
    1e0a:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1e0e:	83 c1       	rjmp	.+774    	; 0x2116 <usart_init_spi+0x3bc>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1e10:	e1 14       	cp	r14, r1
    1e12:	38 e0       	ldi	r19, 0x08	; 8
    1e14:	f3 06       	cpc	r15, r19
    1e16:	29 f4       	brne	.+10     	; 0x1e22 <usart_init_spi+0xc8>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1e18:	61 e0       	ldi	r22, 0x01	; 1
    1e1a:	83 e0       	ldi	r24, 0x03	; 3
    1e1c:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1e20:	7a c1       	rjmp	.+756    	; 0x2116 <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1e22:	e1 14       	cp	r14, r1
    1e24:	89 e0       	ldi	r24, 0x09	; 9
    1e26:	f8 06       	cpc	r15, r24
    1e28:	29 f4       	brne	.+10     	; 0x1e34 <usart_init_spi+0xda>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1e2a:	61 e0       	ldi	r22, 0x01	; 1
    1e2c:	84 e0       	ldi	r24, 0x04	; 4
    1e2e:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1e32:	71 c1       	rjmp	.+738    	; 0x2116 <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1e34:	e1 14       	cp	r14, r1
    1e36:	ea e0       	ldi	r30, 0x0A	; 10
    1e38:	fe 06       	cpc	r15, r30
    1e3a:	29 f4       	brne	.+10     	; 0x1e46 <usart_init_spi+0xec>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1e3c:	61 e0       	ldi	r22, 0x01	; 1
    1e3e:	85 e0       	ldi	r24, 0x05	; 5
    1e40:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1e44:	68 c1       	rjmp	.+720    	; 0x2116 <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1e46:	e1 14       	cp	r14, r1
    1e48:	fb e0       	ldi	r31, 0x0B	; 11
    1e4a:	ff 06       	cpc	r15, r31
    1e4c:	29 f4       	brne	.+10     	; 0x1e58 <usart_init_spi+0xfe>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1e4e:	61 e0       	ldi	r22, 0x01	; 1
    1e50:	86 e0       	ldi	r24, 0x06	; 6
    1e52:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1e56:	5f c1       	rjmp	.+702    	; 0x2116 <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1e58:	30 e4       	ldi	r19, 0x40	; 64
    1e5a:	e3 16       	cp	r14, r19
    1e5c:	38 e0       	ldi	r19, 0x08	; 8
    1e5e:	f3 06       	cpc	r15, r19
    1e60:	29 f4       	brne	.+10     	; 0x1e6c <usart_init_spi+0x112>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1e62:	62 e0       	ldi	r22, 0x02	; 2
    1e64:	83 e0       	ldi	r24, 0x03	; 3
    1e66:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1e6a:	55 c1       	rjmp	.+682    	; 0x2116 <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1e6c:	80 e4       	ldi	r24, 0x40	; 64
    1e6e:	e8 16       	cp	r14, r24
    1e70:	89 e0       	ldi	r24, 0x09	; 9
    1e72:	f8 06       	cpc	r15, r24
    1e74:	29 f4       	brne	.+10     	; 0x1e80 <usart_init_spi+0x126>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1e76:	62 e0       	ldi	r22, 0x02	; 2
    1e78:	84 e0       	ldi	r24, 0x04	; 4
    1e7a:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1e7e:	4b c1       	rjmp	.+662    	; 0x2116 <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1e80:	e0 e4       	ldi	r30, 0x40	; 64
    1e82:	ee 16       	cp	r14, r30
    1e84:	ea e0       	ldi	r30, 0x0A	; 10
    1e86:	fe 06       	cpc	r15, r30
    1e88:	29 f4       	brne	.+10     	; 0x1e94 <usart_init_spi+0x13a>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1e8a:	62 e0       	ldi	r22, 0x02	; 2
    1e8c:	85 e0       	ldi	r24, 0x05	; 5
    1e8e:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1e92:	41 c1       	rjmp	.+642    	; 0x2116 <usart_init_spi+0x3bc>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1e94:	f0 e9       	ldi	r31, 0x90	; 144
    1e96:	ef 16       	cp	r14, r31
    1e98:	f8 e0       	ldi	r31, 0x08	; 8
    1e9a:	ff 06       	cpc	r15, r31
    1e9c:	29 f4       	brne	.+10     	; 0x1ea8 <usart_init_spi+0x14e>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1e9e:	64 e0       	ldi	r22, 0x04	; 4
    1ea0:	83 e0       	ldi	r24, 0x03	; 3
    1ea2:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1ea6:	37 c1       	rjmp	.+622    	; 0x2116 <usart_init_spi+0x3bc>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1ea8:	30 e9       	ldi	r19, 0x90	; 144
    1eaa:	e3 16       	cp	r14, r19
    1eac:	39 e0       	ldi	r19, 0x09	; 9
    1eae:	f3 06       	cpc	r15, r19
    1eb0:	29 f4       	brne	.+10     	; 0x1ebc <usart_init_spi+0x162>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1eb2:	64 e0       	ldi	r22, 0x04	; 4
    1eb4:	84 e0       	ldi	r24, 0x04	; 4
    1eb6:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1eba:	2d c1       	rjmp	.+602    	; 0x2116 <usart_init_spi+0x3bc>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1ebc:	80 e9       	ldi	r24, 0x90	; 144
    1ebe:	e8 16       	cp	r14, r24
    1ec0:	8a e0       	ldi	r24, 0x0A	; 10
    1ec2:	f8 06       	cpc	r15, r24
    1ec4:	29 f4       	brne	.+10     	; 0x1ed0 <usart_init_spi+0x176>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1ec6:	64 e0       	ldi	r22, 0x04	; 4
    1ec8:	85 e0       	ldi	r24, 0x05	; 5
    1eca:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1ece:	23 c1       	rjmp	.+582    	; 0x2116 <usart_init_spi+0x3bc>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1ed0:	e0 e9       	ldi	r30, 0x90	; 144
    1ed2:	ee 16       	cp	r14, r30
    1ed4:	eb e0       	ldi	r30, 0x0B	; 11
    1ed6:	fe 06       	cpc	r15, r30
    1ed8:	29 f4       	brne	.+10     	; 0x1ee4 <usart_init_spi+0x18a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1eda:	64 e0       	ldi	r22, 0x04	; 4
    1edc:	86 e0       	ldi	r24, 0x06	; 6
    1ede:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1ee2:	19 c1       	rjmp	.+562    	; 0x2116 <usart_init_spi+0x3bc>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1ee4:	f0 ec       	ldi	r31, 0xC0	; 192
    1ee6:	ef 16       	cp	r14, r31
    1ee8:	f8 e0       	ldi	r31, 0x08	; 8
    1eea:	ff 06       	cpc	r15, r31
    1eec:	29 f4       	brne	.+10     	; 0x1ef8 <usart_init_spi+0x19e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1eee:	68 e0       	ldi	r22, 0x08	; 8
    1ef0:	83 e0       	ldi	r24, 0x03	; 3
    1ef2:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1ef6:	0f c1       	rjmp	.+542    	; 0x2116 <usart_init_spi+0x3bc>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1ef8:	30 ec       	ldi	r19, 0xC0	; 192
    1efa:	e3 16       	cp	r14, r19
    1efc:	39 e0       	ldi	r19, 0x09	; 9
    1efe:	f3 06       	cpc	r15, r19
    1f00:	29 f4       	brne	.+10     	; 0x1f0c <usart_init_spi+0x1b2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1f02:	68 e0       	ldi	r22, 0x08	; 8
    1f04:	84 e0       	ldi	r24, 0x04	; 4
    1f06:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1f0a:	05 c1       	rjmp	.+522    	; 0x2116 <usart_init_spi+0x3bc>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1f0c:	80 ea       	ldi	r24, 0xA0	; 160
    1f0e:	e8 16       	cp	r14, r24
    1f10:	88 e0       	ldi	r24, 0x08	; 8
    1f12:	f8 06       	cpc	r15, r24
    1f14:	69 f4       	brne	.+26     	; 0x1f30 <usart_init_spi+0x1d6>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1f16:	60 e1       	ldi	r22, 0x10	; 16
    1f18:	83 e0       	ldi	r24, 0x03	; 3
    1f1a:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1f1e:	e0 ea       	ldi	r30, 0xA0	; 160
    1f20:	f8 e0       	ldi	r31, 0x08	; 8
    1f22:	84 81       	ldd	r24, Z+4	; 0x04
    1f24:	8f 7e       	andi	r24, 0xEF	; 239
    1f26:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1f28:	f8 01       	movw	r30, r16
    1f2a:	24 81       	ldd	r18, Z+4	; 0x04
    1f2c:	22 50       	subi	r18, 0x02	; 2
    1f2e:	53 c0       	rjmp	.+166    	; 0x1fd6 <usart_init_spi+0x27c>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1f30:	f0 ea       	ldi	r31, 0xA0	; 160
    1f32:	ef 16       	cp	r14, r31
    1f34:	f9 e0       	ldi	r31, 0x09	; 9
    1f36:	ff 06       	cpc	r15, r31
    1f38:	29 f4       	brne	.+10     	; 0x1f44 <usart_init_spi+0x1ea>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1f3a:	60 e1       	ldi	r22, 0x10	; 16
    1f3c:	84 e0       	ldi	r24, 0x04	; 4
    1f3e:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1f42:	e9 c0       	rjmp	.+466    	; 0x2116 <usart_init_spi+0x3bc>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1f44:	30 ea       	ldi	r19, 0xA0	; 160
    1f46:	e3 16       	cp	r14, r19
    1f48:	3a e0       	ldi	r19, 0x0A	; 10
    1f4a:	f3 06       	cpc	r15, r19
    1f4c:	29 f4       	brne	.+10     	; 0x1f58 <usart_init_spi+0x1fe>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1f4e:	60 e1       	ldi	r22, 0x10	; 16
    1f50:	85 e0       	ldi	r24, 0x05	; 5
    1f52:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1f56:	df c0       	rjmp	.+446    	; 0x2116 <usart_init_spi+0x3bc>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1f58:	80 ea       	ldi	r24, 0xA0	; 160
    1f5a:	e8 16       	cp	r14, r24
    1f5c:	8b e0       	ldi	r24, 0x0B	; 11
    1f5e:	f8 06       	cpc	r15, r24
    1f60:	29 f4       	brne	.+10     	; 0x1f6c <usart_init_spi+0x212>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1f62:	60 e1       	ldi	r22, 0x10	; 16
    1f64:	86 e0       	ldi	r24, 0x06	; 6
    1f66:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1f6a:	d5 c0       	rjmp	.+426    	; 0x2116 <usart_init_spi+0x3bc>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1f6c:	e0 eb       	ldi	r30, 0xB0	; 176
    1f6e:	ee 16       	cp	r14, r30
    1f70:	e8 e0       	ldi	r30, 0x08	; 8
    1f72:	fe 06       	cpc	r15, r30
    1f74:	29 f4       	brne	.+10     	; 0x1f80 <usart_init_spi+0x226>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1f76:	60 e2       	ldi	r22, 0x20	; 32
    1f78:	83 e0       	ldi	r24, 0x03	; 3
    1f7a:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1f7e:	cb c0       	rjmp	.+406    	; 0x2116 <usart_init_spi+0x3bc>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1f80:	f0 eb       	ldi	r31, 0xB0	; 176
    1f82:	ef 16       	cp	r14, r31
    1f84:	f9 e0       	ldi	r31, 0x09	; 9
    1f86:	ff 06       	cpc	r15, r31
    1f88:	29 f4       	brne	.+10     	; 0x1f94 <usart_init_spi+0x23a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1f8a:	60 e2       	ldi	r22, 0x20	; 32
    1f8c:	84 e0       	ldi	r24, 0x04	; 4
    1f8e:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1f92:	c1 c0       	rjmp	.+386    	; 0x2116 <usart_init_spi+0x3bc>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1f94:	30 e8       	ldi	r19, 0x80	; 128
    1f96:	e3 16       	cp	r14, r19
    1f98:	34 e0       	ldi	r19, 0x04	; 4
    1f9a:	f3 06       	cpc	r15, r19
    1f9c:	29 f4       	brne	.+10     	; 0x1fa8 <usart_init_spi+0x24e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1f9e:	60 e4       	ldi	r22, 0x40	; 64
    1fa0:	83 e0       	ldi	r24, 0x03	; 3
    1fa2:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1fa6:	b7 c0       	rjmp	.+366    	; 0x2116 <usart_init_spi+0x3bc>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1fa8:	80 ea       	ldi	r24, 0xA0	; 160
    1faa:	e8 16       	cp	r14, r24
    1fac:	84 e0       	ldi	r24, 0x04	; 4
    1fae:	f8 06       	cpc	r15, r24
    1fb0:	29 f4       	brne	.+10     	; 0x1fbc <usart_init_spi+0x262>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1fb2:	60 e4       	ldi	r22, 0x40	; 64
    1fb4:	85 e0       	ldi	r24, 0x05	; 5
    1fb6:	0e 94 85 05 	call	0xb0a	; 0xb0a <sysclk_enable_module>
    1fba:	ad c0       	rjmp	.+346    	; 0x2116 <usart_init_spi+0x3bc>
    1fbc:	f7 01       	movw	r30, r14
    1fbe:	84 81       	ldd	r24, Z+4	; 0x04
    1fc0:	8f 7e       	andi	r24, 0xEF	; 239
    1fc2:	84 83       	std	Z+4, r24	; 0x04
    1fc4:	fb 01       	movw	r30, r22
    1fc6:	24 81       	ldd	r18, Z+4	; 0x04
    1fc8:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1fca:	c7 01       	movw	r24, r14
    1fcc:	f0 ea       	ldi	r31, 0xA0	; 160
    1fce:	ef 16       	cp	r14, r31
    1fd0:	f8 e0       	ldi	r31, 0x08	; 8
    1fd2:	ff 06       	cpc	r15, r31
    1fd4:	49 f4       	brne	.+18     	; 0x1fe8 <usart_init_spi+0x28e>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    1fd6:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
    1fda:	84 fd       	sbrc	r24, 4
    1fdc:	a5 c0       	rjmp	.+330    	; 0x2128 <usart_init_spi+0x3ce>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    1fde:	0f 2e       	mov	r0, r31
    1fe0:	f1 e1       	ldi	r31, 0x11	; 17
    1fe2:	df 2e       	mov	r13, r31
    1fe4:	f0 2d       	mov	r31, r0
    1fe6:	a4 c0       	rjmp	.+328    	; 0x2130 <usart_init_spi+0x3d6>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    1fe8:	80 3b       	cpi	r24, 0xB0	; 176
    1fea:	38 e0       	ldi	r19, 0x08	; 8
    1fec:	93 07       	cpc	r25, r19
    1fee:	91 f0       	breq	.+36     	; 0x2014 <usart_init_spi+0x2ba>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    1ff0:	80 3a       	cpi	r24, 0xA0	; 160
    1ff2:	e9 e0       	ldi	r30, 0x09	; 9
    1ff4:	9e 07       	cpc	r25, r30
    1ff6:	49 f4       	brne	.+18     	; 0x200a <usart_init_spi+0x2b0>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    1ff8:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
    1ffc:	34 fd       	sbrc	r19, 4
    1ffe:	9b c0       	rjmp	.+310    	; 0x2136 <usart_init_spi+0x3dc>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    2000:	0f 2e       	mov	r0, r31
    2002:	f9 e1       	ldi	r31, 0x19	; 25
    2004:	df 2e       	mov	r13, r31
    2006:	f0 2d       	mov	r31, r0
    2008:	16 c0       	rjmp	.+44     	; 0x2036 <usart_init_spi+0x2dc>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    200a:	80 3b       	cpi	r24, 0xB0	; 176
    200c:	f9 e0       	ldi	r31, 0x09	; 9
    200e:	9f 07       	cpc	r25, r31
    2010:	f1 f0       	breq	.+60     	; 0x204e <usart_init_spi+0x2f4>
    2012:	04 c0       	rjmp	.+8      	; 0x201c <usart_init_spi+0x2c2>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    2014:	0f 2e       	mov	r0, r31
    2016:	f5 e1       	ldi	r31, 0x15	; 21
    2018:	df 2e       	mov	r13, r31
    201a:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    201c:	80 3a       	cpi	r24, 0xA0	; 160
    201e:	3a e0       	ldi	r19, 0x0A	; 10
    2020:	93 07       	cpc	r25, r19
    2022:	49 f4       	brne	.+18     	; 0x2036 <usart_init_spi+0x2dc>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    2024:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
    2028:	84 fd       	sbrc	r24, 4
    202a:	8a c0       	rjmp	.+276    	; 0x2140 <usart_init_spi+0x3e6>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    202c:	0f 2e       	mov	r0, r31
    202e:	f1 e2       	ldi	r31, 0x21	; 33
    2030:	df 2e       	mov	r13, r31
    2032:	f0 2d       	mov	r31, r0
    2034:	15 c0       	rjmp	.+42     	; 0x2060 <usart_init_spi+0x306>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    2036:	80 3a       	cpi	r24, 0xA0	; 160
    2038:	9b 40       	sbci	r25, 0x0B	; 11
    203a:	91 f4       	brne	.+36     	; 0x2060 <usart_init_spi+0x306>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    203c:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
    2040:	84 fd       	sbrc	r24, 4
    2042:	0a c0       	rjmp	.+20     	; 0x2058 <usart_init_spi+0x2fe>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    2044:	0f 2e       	mov	r0, r31
    2046:	f9 e2       	ldi	r31, 0x29	; 41
    2048:	df 2e       	mov	r13, r31
    204a:	f0 2d       	mov	r31, r0
    204c:	09 c0       	rjmp	.+18     	; 0x2060 <usart_init_spi+0x306>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    204e:	0f 2e       	mov	r0, r31
    2050:	fd e1       	ldi	r31, 0x1D	; 29
    2052:	df 2e       	mov	r13, r31
    2054:	f0 2d       	mov	r31, r0
    2056:	04 c0       	rjmp	.+8      	; 0x2060 <usart_init_spi+0x306>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    2058:	0f 2e       	mov	r0, r31
    205a:	fd e2       	ldi	r31, 0x2D	; 45
    205c:	df 2e       	mov	r13, r31
    205e:	f0 2d       	mov	r31, r0
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    2060:	ed 2d       	mov	r30, r13
    2062:	e6 95       	lsr	r30
    2064:	e6 95       	lsr	r30
    2066:	e6 95       	lsr	r30
    2068:	30 e2       	ldi	r19, 0x20	; 32
    206a:	e3 9f       	mul	r30, r19
    206c:	f0 01       	movw	r30, r0
    206e:	11 24       	eor	r1, r1
    2070:	fa 5f       	subi	r31, 0xFA	; 250
    2072:	3d 2d       	mov	r19, r13
    2074:	37 70       	andi	r19, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	03 2e       	mov	r0, r19
    207c:	02 c0       	rjmp	.+4      	; 0x2082 <usart_init_spi+0x328>
    207e:	88 0f       	add	r24, r24
    2080:	99 1f       	adc	r25, r25
    2082:	0a 94       	dec	r0
    2084:	e2 f7       	brpl	.-8      	; 0x207e <usart_init_spi+0x324>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    2086:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    2088:	22 30       	cpi	r18, 0x02	; 2
    208a:	10 f0       	brcs	.+4      	; 0x2090 <usart_init_spi+0x336>
    208c:	40 e0       	ldi	r20, 0x00	; 0
    208e:	01 c0       	rjmp	.+2      	; 0x2092 <usart_init_spi+0x338>
    2090:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    2092:	df 01       	movw	r26, r30
    2094:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    2096:	a3 0f       	add	r26, r19
    2098:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    209a:	9f b7       	in	r25, 0x3f	; 63
    209c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    209e:	f8 94       	cli
	return flags;
    20a0:	39 81       	ldd	r19, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    20a2:	2c 91       	ld	r18, X
    20a4:	27 70       	andi	r18, 0x07	; 7
    20a6:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
    20a8:	9c 91       	ld	r25, X
    20aa:	94 2b       	or	r25, r20
    20ac:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    20ae:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    20b0:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    20b2:	f7 01       	movw	r30, r14
    20b4:	85 81       	ldd	r24, Z+5	; 0x05
    20b6:	80 6c       	ori	r24, 0xC0	; 192
    20b8:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    20ba:	f8 01       	movw	r30, r16
    20bc:	84 81       	ldd	r24, Z+4	; 0x04
    20be:	8d 7f       	andi	r24, 0xFD	; 253
    20c0:	81 30       	cpi	r24, 0x01	; 1
    20c2:	29 f4       	brne	.+10     	; 0x20ce <usart_init_spi+0x374>
		usart->CTRLC |= USART_UCPHA_bm;
    20c4:	f7 01       	movw	r30, r14
    20c6:	85 81       	ldd	r24, Z+5	; 0x05
    20c8:	82 60       	ori	r24, 0x02	; 2
    20ca:	85 83       	std	Z+5, r24	; 0x05
    20cc:	04 c0       	rjmp	.+8      	; 0x20d6 <usart_init_spi+0x37c>
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    20ce:	f7 01       	movw	r30, r14
    20d0:	85 81       	ldd	r24, Z+5	; 0x05
    20d2:	8d 7f       	andi	r24, 0xFD	; 253
    20d4:	85 83       	std	Z+5, r24	; 0x05
	}
	if (opt->data_order) {
    20d6:	f8 01       	movw	r30, r16
    20d8:	85 81       	ldd	r24, Z+5	; 0x05
    20da:	88 23       	and	r24, r24
    20dc:	29 f0       	breq	.+10     	; 0x20e8 <usart_init_spi+0x38e>
		(usart)->CTRLC |= USART_DORD_bm;
    20de:	f7 01       	movw	r30, r14
    20e0:	85 81       	ldd	r24, Z+5	; 0x05
    20e2:	84 60       	ori	r24, 0x04	; 4
    20e4:	85 83       	std	Z+5, r24	; 0x05
    20e6:	04 c0       	rjmp	.+8      	; 0x20f0 <usart_init_spi+0x396>
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    20e8:	f7 01       	movw	r30, r14
    20ea:	85 81       	ldd	r24, Z+5	; 0x05
    20ec:	8b 7f       	andi	r24, 0xFB	; 251
    20ee:	85 83       	std	Z+5, r24	; 0x05
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    20f0:	f8 01       	movw	r30, r16
    20f2:	40 81       	ld	r20, Z
    20f4:	51 81       	ldd	r21, Z+1	; 0x01
    20f6:	62 81       	ldd	r22, Z+2	; 0x02
    20f8:	73 81       	ldd	r23, Z+3	; 0x03
    20fa:	00 e0       	ldi	r16, 0x00	; 0
    20fc:	12 e1       	ldi	r17, 0x12	; 18
    20fe:	2a e7       	ldi	r18, 0x7A	; 122
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	c7 01       	movw	r24, r14
    2104:	f9 dd       	rcall	.-1038   	; 0x1cf8 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    2106:	f7 01       	movw	r30, r14
    2108:	84 81       	ldd	r24, Z+4	; 0x04
    210a:	88 60       	ori	r24, 0x08	; 8
    210c:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    210e:	84 81       	ldd	r24, Z+4	; 0x04
    2110:	80 61       	ori	r24, 0x10	; 16
    2112:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    2114:	1a c0       	rjmp	.+52     	; 0x214a <usart_init_spi+0x3f0>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    2116:	f7 01       	movw	r30, r14
    2118:	84 81       	ldd	r24, Z+4	; 0x04
    211a:	8f 7e       	andi	r24, 0xEF	; 239
    211c:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    211e:	f8 01       	movw	r30, r16
    2120:	24 81       	ldd	r18, Z+4	; 0x04
    2122:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    2124:	c7 01       	movw	r24, r14
    2126:	60 cf       	rjmp	.-320    	; 0x1fe8 <usart_init_spi+0x28e>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    2128:	0f 2e       	mov	r0, r31
    212a:	f5 e1       	ldi	r31, 0x15	; 21
    212c:	df 2e       	mov	r13, r31
    212e:	f0 2d       	mov	r31, r0
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    2130:	80 ea       	ldi	r24, 0xA0	; 160
    2132:	98 e0       	ldi	r25, 0x08	; 8
    2134:	6a cf       	rjmp	.-300    	; 0x200a <usart_init_spi+0x2b0>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    2136:	0f 2e       	mov	r0, r31
    2138:	fd e1       	ldi	r31, 0x1D	; 29
    213a:	df 2e       	mov	r13, r31
    213c:	f0 2d       	mov	r31, r0
    213e:	7b cf       	rjmp	.-266    	; 0x2036 <usart_init_spi+0x2dc>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    2140:	0f 2e       	mov	r0, r31
    2142:	f5 e2       	ldi	r31, 0x25	; 37
    2144:	df 2e       	mov	r13, r31
    2146:	f0 2d       	mov	r31, r0
    2148:	8b cf       	rjmp	.-234    	; 0x2060 <usart_init_spi+0x306>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    214a:	0f 90       	pop	r0
    214c:	df 91       	pop	r29
    214e:	cf 91       	pop	r28
    2150:	1f 91       	pop	r17
    2152:	0f 91       	pop	r16
    2154:	ff 90       	pop	r15
    2156:	ef 90       	pop	r14
    2158:	df 90       	pop	r13
    215a:	08 95       	ret

0000215c <__subsf3>:
    215c:	50 58       	subi	r21, 0x80	; 128

0000215e <__addsf3>:
    215e:	bb 27       	eor	r27, r27
    2160:	aa 27       	eor	r26, r26
    2162:	0e d0       	rcall	.+28     	; 0x2180 <__addsf3x>
    2164:	e5 c0       	rjmp	.+458    	; 0x2330 <__fp_round>
    2166:	d6 d0       	rcall	.+428    	; 0x2314 <__fp_pscA>
    2168:	30 f0       	brcs	.+12     	; 0x2176 <__addsf3+0x18>
    216a:	db d0       	rcall	.+438    	; 0x2322 <__fp_pscB>
    216c:	20 f0       	brcs	.+8      	; 0x2176 <__addsf3+0x18>
    216e:	31 f4       	brne	.+12     	; 0x217c <__addsf3+0x1e>
    2170:	9f 3f       	cpi	r25, 0xFF	; 255
    2172:	11 f4       	brne	.+4      	; 0x2178 <__addsf3+0x1a>
    2174:	1e f4       	brtc	.+6      	; 0x217c <__addsf3+0x1e>
    2176:	cb c0       	rjmp	.+406    	; 0x230e <__fp_nan>
    2178:	0e f4       	brtc	.+2      	; 0x217c <__addsf3+0x1e>
    217a:	e0 95       	com	r30
    217c:	e7 fb       	bst	r30, 7
    217e:	c1 c0       	rjmp	.+386    	; 0x2302 <__fp_inf>

00002180 <__addsf3x>:
    2180:	e9 2f       	mov	r30, r25
    2182:	e7 d0       	rcall	.+462    	; 0x2352 <__fp_split3>
    2184:	80 f3       	brcs	.-32     	; 0x2166 <__addsf3+0x8>
    2186:	ba 17       	cp	r27, r26
    2188:	62 07       	cpc	r22, r18
    218a:	73 07       	cpc	r23, r19
    218c:	84 07       	cpc	r24, r20
    218e:	95 07       	cpc	r25, r21
    2190:	18 f0       	brcs	.+6      	; 0x2198 <__addsf3x+0x18>
    2192:	71 f4       	brne	.+28     	; 0x21b0 <__addsf3x+0x30>
    2194:	9e f5       	brtc	.+102    	; 0x21fc <__addsf3x+0x7c>
    2196:	ff c0       	rjmp	.+510    	; 0x2396 <__fp_zero>
    2198:	0e f4       	brtc	.+2      	; 0x219c <__addsf3x+0x1c>
    219a:	e0 95       	com	r30
    219c:	0b 2e       	mov	r0, r27
    219e:	ba 2f       	mov	r27, r26
    21a0:	a0 2d       	mov	r26, r0
    21a2:	0b 01       	movw	r0, r22
    21a4:	b9 01       	movw	r22, r18
    21a6:	90 01       	movw	r18, r0
    21a8:	0c 01       	movw	r0, r24
    21aa:	ca 01       	movw	r24, r20
    21ac:	a0 01       	movw	r20, r0
    21ae:	11 24       	eor	r1, r1
    21b0:	ff 27       	eor	r31, r31
    21b2:	59 1b       	sub	r21, r25
    21b4:	99 f0       	breq	.+38     	; 0x21dc <__addsf3x+0x5c>
    21b6:	59 3f       	cpi	r21, 0xF9	; 249
    21b8:	50 f4       	brcc	.+20     	; 0x21ce <__addsf3x+0x4e>
    21ba:	50 3e       	cpi	r21, 0xE0	; 224
    21bc:	68 f1       	brcs	.+90     	; 0x2218 <__addsf3x+0x98>
    21be:	1a 16       	cp	r1, r26
    21c0:	f0 40       	sbci	r31, 0x00	; 0
    21c2:	a2 2f       	mov	r26, r18
    21c4:	23 2f       	mov	r18, r19
    21c6:	34 2f       	mov	r19, r20
    21c8:	44 27       	eor	r20, r20
    21ca:	58 5f       	subi	r21, 0xF8	; 248
    21cc:	f3 cf       	rjmp	.-26     	; 0x21b4 <__addsf3x+0x34>
    21ce:	46 95       	lsr	r20
    21d0:	37 95       	ror	r19
    21d2:	27 95       	ror	r18
    21d4:	a7 95       	ror	r26
    21d6:	f0 40       	sbci	r31, 0x00	; 0
    21d8:	53 95       	inc	r21
    21da:	c9 f7       	brne	.-14     	; 0x21ce <__addsf3x+0x4e>
    21dc:	7e f4       	brtc	.+30     	; 0x21fc <__addsf3x+0x7c>
    21de:	1f 16       	cp	r1, r31
    21e0:	ba 0b       	sbc	r27, r26
    21e2:	62 0b       	sbc	r22, r18
    21e4:	73 0b       	sbc	r23, r19
    21e6:	84 0b       	sbc	r24, r20
    21e8:	ba f0       	brmi	.+46     	; 0x2218 <__addsf3x+0x98>
    21ea:	91 50       	subi	r25, 0x01	; 1
    21ec:	a1 f0       	breq	.+40     	; 0x2216 <__addsf3x+0x96>
    21ee:	ff 0f       	add	r31, r31
    21f0:	bb 1f       	adc	r27, r27
    21f2:	66 1f       	adc	r22, r22
    21f4:	77 1f       	adc	r23, r23
    21f6:	88 1f       	adc	r24, r24
    21f8:	c2 f7       	brpl	.-16     	; 0x21ea <__addsf3x+0x6a>
    21fa:	0e c0       	rjmp	.+28     	; 0x2218 <__addsf3x+0x98>
    21fc:	ba 0f       	add	r27, r26
    21fe:	62 1f       	adc	r22, r18
    2200:	73 1f       	adc	r23, r19
    2202:	84 1f       	adc	r24, r20
    2204:	48 f4       	brcc	.+18     	; 0x2218 <__addsf3x+0x98>
    2206:	87 95       	ror	r24
    2208:	77 95       	ror	r23
    220a:	67 95       	ror	r22
    220c:	b7 95       	ror	r27
    220e:	f7 95       	ror	r31
    2210:	9e 3f       	cpi	r25, 0xFE	; 254
    2212:	08 f0       	brcs	.+2      	; 0x2216 <__addsf3x+0x96>
    2214:	b3 cf       	rjmp	.-154    	; 0x217c <__addsf3+0x1e>
    2216:	93 95       	inc	r25
    2218:	88 0f       	add	r24, r24
    221a:	08 f0       	brcs	.+2      	; 0x221e <__addsf3x+0x9e>
    221c:	99 27       	eor	r25, r25
    221e:	ee 0f       	add	r30, r30
    2220:	97 95       	ror	r25
    2222:	87 95       	ror	r24
    2224:	08 95       	ret

00002226 <__fixsfsi>:
    2226:	04 d0       	rcall	.+8      	; 0x2230 <__fixunssfsi>
    2228:	68 94       	set
    222a:	b1 11       	cpse	r27, r1
    222c:	b5 c0       	rjmp	.+362    	; 0x2398 <__fp_szero>
    222e:	08 95       	ret

00002230 <__fixunssfsi>:
    2230:	98 d0       	rcall	.+304    	; 0x2362 <__fp_splitA>
    2232:	88 f0       	brcs	.+34     	; 0x2256 <__fixunssfsi+0x26>
    2234:	9f 57       	subi	r25, 0x7F	; 127
    2236:	90 f0       	brcs	.+36     	; 0x225c <__fixunssfsi+0x2c>
    2238:	b9 2f       	mov	r27, r25
    223a:	99 27       	eor	r25, r25
    223c:	b7 51       	subi	r27, 0x17	; 23
    223e:	a0 f0       	brcs	.+40     	; 0x2268 <__fixunssfsi+0x38>
    2240:	d1 f0       	breq	.+52     	; 0x2276 <__fixunssfsi+0x46>
    2242:	66 0f       	add	r22, r22
    2244:	77 1f       	adc	r23, r23
    2246:	88 1f       	adc	r24, r24
    2248:	99 1f       	adc	r25, r25
    224a:	1a f0       	brmi	.+6      	; 0x2252 <__fixunssfsi+0x22>
    224c:	ba 95       	dec	r27
    224e:	c9 f7       	brne	.-14     	; 0x2242 <__fixunssfsi+0x12>
    2250:	12 c0       	rjmp	.+36     	; 0x2276 <__fixunssfsi+0x46>
    2252:	b1 30       	cpi	r27, 0x01	; 1
    2254:	81 f0       	breq	.+32     	; 0x2276 <__fixunssfsi+0x46>
    2256:	9f d0       	rcall	.+318    	; 0x2396 <__fp_zero>
    2258:	b1 e0       	ldi	r27, 0x01	; 1
    225a:	08 95       	ret
    225c:	9c c0       	rjmp	.+312    	; 0x2396 <__fp_zero>
    225e:	67 2f       	mov	r22, r23
    2260:	78 2f       	mov	r23, r24
    2262:	88 27       	eor	r24, r24
    2264:	b8 5f       	subi	r27, 0xF8	; 248
    2266:	39 f0       	breq	.+14     	; 0x2276 <__fixunssfsi+0x46>
    2268:	b9 3f       	cpi	r27, 0xF9	; 249
    226a:	cc f3       	brlt	.-14     	; 0x225e <__fixunssfsi+0x2e>
    226c:	86 95       	lsr	r24
    226e:	77 95       	ror	r23
    2270:	67 95       	ror	r22
    2272:	b3 95       	inc	r27
    2274:	d9 f7       	brne	.-10     	; 0x226c <__fixunssfsi+0x3c>
    2276:	3e f4       	brtc	.+14     	; 0x2286 <__fixunssfsi+0x56>
    2278:	90 95       	com	r25
    227a:	80 95       	com	r24
    227c:	70 95       	com	r23
    227e:	61 95       	neg	r22
    2280:	7f 4f       	sbci	r23, 0xFF	; 255
    2282:	8f 4f       	sbci	r24, 0xFF	; 255
    2284:	9f 4f       	sbci	r25, 0xFF	; 255
    2286:	08 95       	ret

00002288 <__floatunsisf>:
    2288:	e8 94       	clt
    228a:	09 c0       	rjmp	.+18     	; 0x229e <__floatsisf+0x12>

0000228c <__floatsisf>:
    228c:	97 fb       	bst	r25, 7
    228e:	3e f4       	brtc	.+14     	; 0x229e <__floatsisf+0x12>
    2290:	90 95       	com	r25
    2292:	80 95       	com	r24
    2294:	70 95       	com	r23
    2296:	61 95       	neg	r22
    2298:	7f 4f       	sbci	r23, 0xFF	; 255
    229a:	8f 4f       	sbci	r24, 0xFF	; 255
    229c:	9f 4f       	sbci	r25, 0xFF	; 255
    229e:	99 23       	and	r25, r25
    22a0:	a9 f0       	breq	.+42     	; 0x22cc <__floatsisf+0x40>
    22a2:	f9 2f       	mov	r31, r25
    22a4:	96 e9       	ldi	r25, 0x96	; 150
    22a6:	bb 27       	eor	r27, r27
    22a8:	93 95       	inc	r25
    22aa:	f6 95       	lsr	r31
    22ac:	87 95       	ror	r24
    22ae:	77 95       	ror	r23
    22b0:	67 95       	ror	r22
    22b2:	b7 95       	ror	r27
    22b4:	f1 11       	cpse	r31, r1
    22b6:	f8 cf       	rjmp	.-16     	; 0x22a8 <__floatsisf+0x1c>
    22b8:	fa f4       	brpl	.+62     	; 0x22f8 <__floatsisf+0x6c>
    22ba:	bb 0f       	add	r27, r27
    22bc:	11 f4       	brne	.+4      	; 0x22c2 <__floatsisf+0x36>
    22be:	60 ff       	sbrs	r22, 0
    22c0:	1b c0       	rjmp	.+54     	; 0x22f8 <__floatsisf+0x6c>
    22c2:	6f 5f       	subi	r22, 0xFF	; 255
    22c4:	7f 4f       	sbci	r23, 0xFF	; 255
    22c6:	8f 4f       	sbci	r24, 0xFF	; 255
    22c8:	9f 4f       	sbci	r25, 0xFF	; 255
    22ca:	16 c0       	rjmp	.+44     	; 0x22f8 <__floatsisf+0x6c>
    22cc:	88 23       	and	r24, r24
    22ce:	11 f0       	breq	.+4      	; 0x22d4 <__floatsisf+0x48>
    22d0:	96 e9       	ldi	r25, 0x96	; 150
    22d2:	11 c0       	rjmp	.+34     	; 0x22f6 <__floatsisf+0x6a>
    22d4:	77 23       	and	r23, r23
    22d6:	21 f0       	breq	.+8      	; 0x22e0 <__floatsisf+0x54>
    22d8:	9e e8       	ldi	r25, 0x8E	; 142
    22da:	87 2f       	mov	r24, r23
    22dc:	76 2f       	mov	r23, r22
    22de:	05 c0       	rjmp	.+10     	; 0x22ea <__floatsisf+0x5e>
    22e0:	66 23       	and	r22, r22
    22e2:	71 f0       	breq	.+28     	; 0x2300 <__floatsisf+0x74>
    22e4:	96 e8       	ldi	r25, 0x86	; 134
    22e6:	86 2f       	mov	r24, r22
    22e8:	70 e0       	ldi	r23, 0x00	; 0
    22ea:	60 e0       	ldi	r22, 0x00	; 0
    22ec:	2a f0       	brmi	.+10     	; 0x22f8 <__floatsisf+0x6c>
    22ee:	9a 95       	dec	r25
    22f0:	66 0f       	add	r22, r22
    22f2:	77 1f       	adc	r23, r23
    22f4:	88 1f       	adc	r24, r24
    22f6:	da f7       	brpl	.-10     	; 0x22ee <__floatsisf+0x62>
    22f8:	88 0f       	add	r24, r24
    22fa:	96 95       	lsr	r25
    22fc:	87 95       	ror	r24
    22fe:	97 f9       	bld	r25, 7
    2300:	08 95       	ret

00002302 <__fp_inf>:
    2302:	97 f9       	bld	r25, 7
    2304:	9f 67       	ori	r25, 0x7F	; 127
    2306:	80 e8       	ldi	r24, 0x80	; 128
    2308:	70 e0       	ldi	r23, 0x00	; 0
    230a:	60 e0       	ldi	r22, 0x00	; 0
    230c:	08 95       	ret

0000230e <__fp_nan>:
    230e:	9f ef       	ldi	r25, 0xFF	; 255
    2310:	80 ec       	ldi	r24, 0xC0	; 192
    2312:	08 95       	ret

00002314 <__fp_pscA>:
    2314:	00 24       	eor	r0, r0
    2316:	0a 94       	dec	r0
    2318:	16 16       	cp	r1, r22
    231a:	17 06       	cpc	r1, r23
    231c:	18 06       	cpc	r1, r24
    231e:	09 06       	cpc	r0, r25
    2320:	08 95       	ret

00002322 <__fp_pscB>:
    2322:	00 24       	eor	r0, r0
    2324:	0a 94       	dec	r0
    2326:	12 16       	cp	r1, r18
    2328:	13 06       	cpc	r1, r19
    232a:	14 06       	cpc	r1, r20
    232c:	05 06       	cpc	r0, r21
    232e:	08 95       	ret

00002330 <__fp_round>:
    2330:	09 2e       	mov	r0, r25
    2332:	03 94       	inc	r0
    2334:	00 0c       	add	r0, r0
    2336:	11 f4       	brne	.+4      	; 0x233c <__fp_round+0xc>
    2338:	88 23       	and	r24, r24
    233a:	52 f0       	brmi	.+20     	; 0x2350 <__fp_round+0x20>
    233c:	bb 0f       	add	r27, r27
    233e:	40 f4       	brcc	.+16     	; 0x2350 <__fp_round+0x20>
    2340:	bf 2b       	or	r27, r31
    2342:	11 f4       	brne	.+4      	; 0x2348 <__fp_round+0x18>
    2344:	60 ff       	sbrs	r22, 0
    2346:	04 c0       	rjmp	.+8      	; 0x2350 <__fp_round+0x20>
    2348:	6f 5f       	subi	r22, 0xFF	; 255
    234a:	7f 4f       	sbci	r23, 0xFF	; 255
    234c:	8f 4f       	sbci	r24, 0xFF	; 255
    234e:	9f 4f       	sbci	r25, 0xFF	; 255
    2350:	08 95       	ret

00002352 <__fp_split3>:
    2352:	57 fd       	sbrc	r21, 7
    2354:	90 58       	subi	r25, 0x80	; 128
    2356:	44 0f       	add	r20, r20
    2358:	55 1f       	adc	r21, r21
    235a:	59 f0       	breq	.+22     	; 0x2372 <__fp_splitA+0x10>
    235c:	5f 3f       	cpi	r21, 0xFF	; 255
    235e:	71 f0       	breq	.+28     	; 0x237c <__fp_splitA+0x1a>
    2360:	47 95       	ror	r20

00002362 <__fp_splitA>:
    2362:	88 0f       	add	r24, r24
    2364:	97 fb       	bst	r25, 7
    2366:	99 1f       	adc	r25, r25
    2368:	61 f0       	breq	.+24     	; 0x2382 <__fp_splitA+0x20>
    236a:	9f 3f       	cpi	r25, 0xFF	; 255
    236c:	79 f0       	breq	.+30     	; 0x238c <__fp_splitA+0x2a>
    236e:	87 95       	ror	r24
    2370:	08 95       	ret
    2372:	12 16       	cp	r1, r18
    2374:	13 06       	cpc	r1, r19
    2376:	14 06       	cpc	r1, r20
    2378:	55 1f       	adc	r21, r21
    237a:	f2 cf       	rjmp	.-28     	; 0x2360 <__fp_split3+0xe>
    237c:	46 95       	lsr	r20
    237e:	f1 df       	rcall	.-30     	; 0x2362 <__fp_splitA>
    2380:	08 c0       	rjmp	.+16     	; 0x2392 <__fp_splitA+0x30>
    2382:	16 16       	cp	r1, r22
    2384:	17 06       	cpc	r1, r23
    2386:	18 06       	cpc	r1, r24
    2388:	99 1f       	adc	r25, r25
    238a:	f1 cf       	rjmp	.-30     	; 0x236e <__fp_splitA+0xc>
    238c:	86 95       	lsr	r24
    238e:	71 05       	cpc	r23, r1
    2390:	61 05       	cpc	r22, r1
    2392:	08 94       	sec
    2394:	08 95       	ret

00002396 <__fp_zero>:
    2396:	e8 94       	clt

00002398 <__fp_szero>:
    2398:	bb 27       	eor	r27, r27
    239a:	66 27       	eor	r22, r22
    239c:	77 27       	eor	r23, r23
    239e:	cb 01       	movw	r24, r22
    23a0:	97 f9       	bld	r25, 7
    23a2:	08 95       	ret

000023a4 <__mulsf3>:
    23a4:	0b d0       	rcall	.+22     	; 0x23bc <__mulsf3x>
    23a6:	c4 cf       	rjmp	.-120    	; 0x2330 <__fp_round>
    23a8:	b5 df       	rcall	.-150    	; 0x2314 <__fp_pscA>
    23aa:	28 f0       	brcs	.+10     	; 0x23b6 <__mulsf3+0x12>
    23ac:	ba df       	rcall	.-140    	; 0x2322 <__fp_pscB>
    23ae:	18 f0       	brcs	.+6      	; 0x23b6 <__mulsf3+0x12>
    23b0:	95 23       	and	r25, r21
    23b2:	09 f0       	breq	.+2      	; 0x23b6 <__mulsf3+0x12>
    23b4:	a6 cf       	rjmp	.-180    	; 0x2302 <__fp_inf>
    23b6:	ab cf       	rjmp	.-170    	; 0x230e <__fp_nan>
    23b8:	11 24       	eor	r1, r1
    23ba:	ee cf       	rjmp	.-36     	; 0x2398 <__fp_szero>

000023bc <__mulsf3x>:
    23bc:	ca df       	rcall	.-108    	; 0x2352 <__fp_split3>
    23be:	a0 f3       	brcs	.-24     	; 0x23a8 <__mulsf3+0x4>

000023c0 <__mulsf3_pse>:
    23c0:	95 9f       	mul	r25, r21
    23c2:	d1 f3       	breq	.-12     	; 0x23b8 <__mulsf3+0x14>
    23c4:	95 0f       	add	r25, r21
    23c6:	50 e0       	ldi	r21, 0x00	; 0
    23c8:	55 1f       	adc	r21, r21
    23ca:	62 9f       	mul	r22, r18
    23cc:	f0 01       	movw	r30, r0
    23ce:	72 9f       	mul	r23, r18
    23d0:	bb 27       	eor	r27, r27
    23d2:	f0 0d       	add	r31, r0
    23d4:	b1 1d       	adc	r27, r1
    23d6:	63 9f       	mul	r22, r19
    23d8:	aa 27       	eor	r26, r26
    23da:	f0 0d       	add	r31, r0
    23dc:	b1 1d       	adc	r27, r1
    23de:	aa 1f       	adc	r26, r26
    23e0:	64 9f       	mul	r22, r20
    23e2:	66 27       	eor	r22, r22
    23e4:	b0 0d       	add	r27, r0
    23e6:	a1 1d       	adc	r26, r1
    23e8:	66 1f       	adc	r22, r22
    23ea:	82 9f       	mul	r24, r18
    23ec:	22 27       	eor	r18, r18
    23ee:	b0 0d       	add	r27, r0
    23f0:	a1 1d       	adc	r26, r1
    23f2:	62 1f       	adc	r22, r18
    23f4:	73 9f       	mul	r23, r19
    23f6:	b0 0d       	add	r27, r0
    23f8:	a1 1d       	adc	r26, r1
    23fa:	62 1f       	adc	r22, r18
    23fc:	83 9f       	mul	r24, r19
    23fe:	a0 0d       	add	r26, r0
    2400:	61 1d       	adc	r22, r1
    2402:	22 1f       	adc	r18, r18
    2404:	74 9f       	mul	r23, r20
    2406:	33 27       	eor	r19, r19
    2408:	a0 0d       	add	r26, r0
    240a:	61 1d       	adc	r22, r1
    240c:	23 1f       	adc	r18, r19
    240e:	84 9f       	mul	r24, r20
    2410:	60 0d       	add	r22, r0
    2412:	21 1d       	adc	r18, r1
    2414:	82 2f       	mov	r24, r18
    2416:	76 2f       	mov	r23, r22
    2418:	6a 2f       	mov	r22, r26
    241a:	11 24       	eor	r1, r1
    241c:	9f 57       	subi	r25, 0x7F	; 127
    241e:	50 40       	sbci	r21, 0x00	; 0
    2420:	8a f0       	brmi	.+34     	; 0x2444 <__mulsf3_pse+0x84>
    2422:	e1 f0       	breq	.+56     	; 0x245c <__mulsf3_pse+0x9c>
    2424:	88 23       	and	r24, r24
    2426:	4a f0       	brmi	.+18     	; 0x243a <__mulsf3_pse+0x7a>
    2428:	ee 0f       	add	r30, r30
    242a:	ff 1f       	adc	r31, r31
    242c:	bb 1f       	adc	r27, r27
    242e:	66 1f       	adc	r22, r22
    2430:	77 1f       	adc	r23, r23
    2432:	88 1f       	adc	r24, r24
    2434:	91 50       	subi	r25, 0x01	; 1
    2436:	50 40       	sbci	r21, 0x00	; 0
    2438:	a9 f7       	brne	.-22     	; 0x2424 <__mulsf3_pse+0x64>
    243a:	9e 3f       	cpi	r25, 0xFE	; 254
    243c:	51 05       	cpc	r21, r1
    243e:	70 f0       	brcs	.+28     	; 0x245c <__mulsf3_pse+0x9c>
    2440:	60 cf       	rjmp	.-320    	; 0x2302 <__fp_inf>
    2442:	aa cf       	rjmp	.-172    	; 0x2398 <__fp_szero>
    2444:	5f 3f       	cpi	r21, 0xFF	; 255
    2446:	ec f3       	brlt	.-6      	; 0x2442 <__mulsf3_pse+0x82>
    2448:	98 3e       	cpi	r25, 0xE8	; 232
    244a:	dc f3       	brlt	.-10     	; 0x2442 <__mulsf3_pse+0x82>
    244c:	86 95       	lsr	r24
    244e:	77 95       	ror	r23
    2450:	67 95       	ror	r22
    2452:	b7 95       	ror	r27
    2454:	f7 95       	ror	r31
    2456:	e7 95       	ror	r30
    2458:	9f 5f       	subi	r25, 0xFF	; 255
    245a:	c1 f7       	brne	.-16     	; 0x244c <__mulsf3_pse+0x8c>
    245c:	fe 2b       	or	r31, r30
    245e:	88 0f       	add	r24, r24
    2460:	91 1d       	adc	r25, r1
    2462:	96 95       	lsr	r25
    2464:	87 95       	ror	r24
    2466:	97 f9       	bld	r25, 7
    2468:	08 95       	ret

0000246a <__udivmodsi4>:
    246a:	a1 e2       	ldi	r26, 0x21	; 33
    246c:	1a 2e       	mov	r1, r26
    246e:	aa 1b       	sub	r26, r26
    2470:	bb 1b       	sub	r27, r27
    2472:	fd 01       	movw	r30, r26
    2474:	0d c0       	rjmp	.+26     	; 0x2490 <__udivmodsi4_ep>

00002476 <__udivmodsi4_loop>:
    2476:	aa 1f       	adc	r26, r26
    2478:	bb 1f       	adc	r27, r27
    247a:	ee 1f       	adc	r30, r30
    247c:	ff 1f       	adc	r31, r31
    247e:	a2 17       	cp	r26, r18
    2480:	b3 07       	cpc	r27, r19
    2482:	e4 07       	cpc	r30, r20
    2484:	f5 07       	cpc	r31, r21
    2486:	20 f0       	brcs	.+8      	; 0x2490 <__udivmodsi4_ep>
    2488:	a2 1b       	sub	r26, r18
    248a:	b3 0b       	sbc	r27, r19
    248c:	e4 0b       	sbc	r30, r20
    248e:	f5 0b       	sbc	r31, r21

00002490 <__udivmodsi4_ep>:
    2490:	66 1f       	adc	r22, r22
    2492:	77 1f       	adc	r23, r23
    2494:	88 1f       	adc	r24, r24
    2496:	99 1f       	adc	r25, r25
    2498:	1a 94       	dec	r1
    249a:	69 f7       	brne	.-38     	; 0x2476 <__udivmodsi4_loop>
    249c:	60 95       	com	r22
    249e:	70 95       	com	r23
    24a0:	80 95       	com	r24
    24a2:	90 95       	com	r25
    24a4:	9b 01       	movw	r18, r22
    24a6:	ac 01       	movw	r20, r24
    24a8:	bd 01       	movw	r22, r26
    24aa:	cf 01       	movw	r24, r30
    24ac:	08 95       	ret

000024ae <snprintf>:
    24ae:	0f 93       	push	r16
    24b0:	1f 93       	push	r17
    24b2:	cf 93       	push	r28
    24b4:	df 93       	push	r29
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	2e 97       	sbiw	r28, 0x0e	; 14
    24bc:	cd bf       	out	0x3d, r28	; 61
    24be:	de bf       	out	0x3e, r29	; 62
    24c0:	0e 89       	ldd	r16, Y+22	; 0x16
    24c2:	1f 89       	ldd	r17, Y+23	; 0x17
    24c4:	88 8d       	ldd	r24, Y+24	; 0x18
    24c6:	99 8d       	ldd	r25, Y+25	; 0x19
    24c8:	26 e0       	ldi	r18, 0x06	; 6
    24ca:	2c 83       	std	Y+4, r18	; 0x04
    24cc:	09 83       	std	Y+1, r16	; 0x01
    24ce:	1a 83       	std	Y+2, r17	; 0x02
    24d0:	97 ff       	sbrs	r25, 7
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <snprintf+0x2a>
    24d4:	80 e0       	ldi	r24, 0x00	; 0
    24d6:	90 e8       	ldi	r25, 0x80	; 128
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	8d 83       	std	Y+5, r24	; 0x05
    24dc:	9e 83       	std	Y+6, r25	; 0x06
    24de:	ae 01       	movw	r20, r28
    24e0:	44 5e       	subi	r20, 0xE4	; 228
    24e2:	5f 4f       	sbci	r21, 0xFF	; 255
    24e4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    24e6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    24e8:	ce 01       	movw	r24, r28
    24ea:	01 96       	adiw	r24, 0x01	; 1
    24ec:	3e d0       	rcall	.+124    	; 0x256a <vfprintf>
    24ee:	4d 81       	ldd	r20, Y+5	; 0x05
    24f0:	5e 81       	ldd	r21, Y+6	; 0x06
    24f2:	57 fd       	sbrc	r21, 7
    24f4:	0a c0       	rjmp	.+20     	; 0x250a <snprintf+0x5c>
    24f6:	2f 81       	ldd	r18, Y+7	; 0x07
    24f8:	38 85       	ldd	r19, Y+8	; 0x08
    24fa:	42 17       	cp	r20, r18
    24fc:	53 07       	cpc	r21, r19
    24fe:	0c f4       	brge	.+2      	; 0x2502 <snprintf+0x54>
    2500:	9a 01       	movw	r18, r20
    2502:	f8 01       	movw	r30, r16
    2504:	e2 0f       	add	r30, r18
    2506:	f3 1f       	adc	r31, r19
    2508:	10 82       	st	Z, r1
    250a:	2e 96       	adiw	r28, 0x0e	; 14
    250c:	cd bf       	out	0x3d, r28	; 61
    250e:	de bf       	out	0x3e, r29	; 62
    2510:	df 91       	pop	r29
    2512:	cf 91       	pop	r28
    2514:	1f 91       	pop	r17
    2516:	0f 91       	pop	r16
    2518:	08 95       	ret

0000251a <sprintf>:
    251a:	0f 93       	push	r16
    251c:	1f 93       	push	r17
    251e:	cf 93       	push	r28
    2520:	df 93       	push	r29
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
    2526:	2e 97       	sbiw	r28, 0x0e	; 14
    2528:	cd bf       	out	0x3d, r28	; 61
    252a:	de bf       	out	0x3e, r29	; 62
    252c:	0e 89       	ldd	r16, Y+22	; 0x16
    252e:	1f 89       	ldd	r17, Y+23	; 0x17
    2530:	86 e0       	ldi	r24, 0x06	; 6
    2532:	8c 83       	std	Y+4, r24	; 0x04
    2534:	09 83       	std	Y+1, r16	; 0x01
    2536:	1a 83       	std	Y+2, r17	; 0x02
    2538:	8f ef       	ldi	r24, 0xFF	; 255
    253a:	9f e7       	ldi	r25, 0x7F	; 127
    253c:	8d 83       	std	Y+5, r24	; 0x05
    253e:	9e 83       	std	Y+6, r25	; 0x06
    2540:	ae 01       	movw	r20, r28
    2542:	46 5e       	subi	r20, 0xE6	; 230
    2544:	5f 4f       	sbci	r21, 0xFF	; 255
    2546:	68 8d       	ldd	r22, Y+24	; 0x18
    2548:	79 8d       	ldd	r23, Y+25	; 0x19
    254a:	ce 01       	movw	r24, r28
    254c:	01 96       	adiw	r24, 0x01	; 1
    254e:	0d d0       	rcall	.+26     	; 0x256a <vfprintf>
    2550:	ef 81       	ldd	r30, Y+7	; 0x07
    2552:	f8 85       	ldd	r31, Y+8	; 0x08
    2554:	e0 0f       	add	r30, r16
    2556:	f1 1f       	adc	r31, r17
    2558:	10 82       	st	Z, r1
    255a:	2e 96       	adiw	r28, 0x0e	; 14
    255c:	cd bf       	out	0x3d, r28	; 61
    255e:	de bf       	out	0x3e, r29	; 62
    2560:	df 91       	pop	r29
    2562:	cf 91       	pop	r28
    2564:	1f 91       	pop	r17
    2566:	0f 91       	pop	r16
    2568:	08 95       	ret

0000256a <vfprintf>:
    256a:	2f 92       	push	r2
    256c:	3f 92       	push	r3
    256e:	4f 92       	push	r4
    2570:	5f 92       	push	r5
    2572:	6f 92       	push	r6
    2574:	7f 92       	push	r7
    2576:	8f 92       	push	r8
    2578:	9f 92       	push	r9
    257a:	af 92       	push	r10
    257c:	bf 92       	push	r11
    257e:	cf 92       	push	r12
    2580:	df 92       	push	r13
    2582:	ef 92       	push	r14
    2584:	ff 92       	push	r15
    2586:	0f 93       	push	r16
    2588:	1f 93       	push	r17
    258a:	cf 93       	push	r28
    258c:	df 93       	push	r29
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
    2592:	2b 97       	sbiw	r28, 0x0b	; 11
    2594:	cd bf       	out	0x3d, r28	; 61
    2596:	de bf       	out	0x3e, r29	; 62
    2598:	6c 01       	movw	r12, r24
    259a:	7b 01       	movw	r14, r22
    259c:	8a 01       	movw	r16, r20
    259e:	fc 01       	movw	r30, r24
    25a0:	16 82       	std	Z+6, r1	; 0x06
    25a2:	17 82       	std	Z+7, r1	; 0x07
    25a4:	83 81       	ldd	r24, Z+3	; 0x03
    25a6:	81 ff       	sbrs	r24, 1
    25a8:	bf c1       	rjmp	.+894    	; 0x2928 <vfprintf+0x3be>
    25aa:	ce 01       	movw	r24, r28
    25ac:	01 96       	adiw	r24, 0x01	; 1
    25ae:	3c 01       	movw	r6, r24
    25b0:	f6 01       	movw	r30, r12
    25b2:	93 81       	ldd	r25, Z+3	; 0x03
    25b4:	f7 01       	movw	r30, r14
    25b6:	93 fd       	sbrc	r25, 3
    25b8:	85 91       	lpm	r24, Z+
    25ba:	93 ff       	sbrs	r25, 3
    25bc:	81 91       	ld	r24, Z+
    25be:	7f 01       	movw	r14, r30
    25c0:	88 23       	and	r24, r24
    25c2:	09 f4       	brne	.+2      	; 0x25c6 <vfprintf+0x5c>
    25c4:	ad c1       	rjmp	.+858    	; 0x2920 <vfprintf+0x3b6>
    25c6:	85 32       	cpi	r24, 0x25	; 37
    25c8:	39 f4       	brne	.+14     	; 0x25d8 <vfprintf+0x6e>
    25ca:	93 fd       	sbrc	r25, 3
    25cc:	85 91       	lpm	r24, Z+
    25ce:	93 ff       	sbrs	r25, 3
    25d0:	81 91       	ld	r24, Z+
    25d2:	7f 01       	movw	r14, r30
    25d4:	85 32       	cpi	r24, 0x25	; 37
    25d6:	21 f4       	brne	.+8      	; 0x25e0 <vfprintf+0x76>
    25d8:	b6 01       	movw	r22, r12
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	d3 d1       	rcall	.+934    	; 0x2984 <fputc>
    25de:	e8 cf       	rjmp	.-48     	; 0x25b0 <vfprintf+0x46>
    25e0:	91 2c       	mov	r9, r1
    25e2:	21 2c       	mov	r2, r1
    25e4:	31 2c       	mov	r3, r1
    25e6:	ff e1       	ldi	r31, 0x1F	; 31
    25e8:	f3 15       	cp	r31, r3
    25ea:	d8 f0       	brcs	.+54     	; 0x2622 <vfprintf+0xb8>
    25ec:	8b 32       	cpi	r24, 0x2B	; 43
    25ee:	79 f0       	breq	.+30     	; 0x260e <vfprintf+0xa4>
    25f0:	38 f4       	brcc	.+14     	; 0x2600 <vfprintf+0x96>
    25f2:	80 32       	cpi	r24, 0x20	; 32
    25f4:	79 f0       	breq	.+30     	; 0x2614 <vfprintf+0xaa>
    25f6:	83 32       	cpi	r24, 0x23	; 35
    25f8:	a1 f4       	brne	.+40     	; 0x2622 <vfprintf+0xb8>
    25fa:	23 2d       	mov	r18, r3
    25fc:	20 61       	ori	r18, 0x10	; 16
    25fe:	1d c0       	rjmp	.+58     	; 0x263a <vfprintf+0xd0>
    2600:	8d 32       	cpi	r24, 0x2D	; 45
    2602:	61 f0       	breq	.+24     	; 0x261c <vfprintf+0xb2>
    2604:	80 33       	cpi	r24, 0x30	; 48
    2606:	69 f4       	brne	.+26     	; 0x2622 <vfprintf+0xb8>
    2608:	23 2d       	mov	r18, r3
    260a:	21 60       	ori	r18, 0x01	; 1
    260c:	16 c0       	rjmp	.+44     	; 0x263a <vfprintf+0xd0>
    260e:	83 2d       	mov	r24, r3
    2610:	82 60       	ori	r24, 0x02	; 2
    2612:	38 2e       	mov	r3, r24
    2614:	e3 2d       	mov	r30, r3
    2616:	e4 60       	ori	r30, 0x04	; 4
    2618:	3e 2e       	mov	r3, r30
    261a:	2a c0       	rjmp	.+84     	; 0x2670 <vfprintf+0x106>
    261c:	f3 2d       	mov	r31, r3
    261e:	f8 60       	ori	r31, 0x08	; 8
    2620:	1d c0       	rjmp	.+58     	; 0x265c <vfprintf+0xf2>
    2622:	37 fc       	sbrc	r3, 7
    2624:	2d c0       	rjmp	.+90     	; 0x2680 <vfprintf+0x116>
    2626:	20 ed       	ldi	r18, 0xD0	; 208
    2628:	28 0f       	add	r18, r24
    262a:	2a 30       	cpi	r18, 0x0A	; 10
    262c:	40 f0       	brcs	.+16     	; 0x263e <vfprintf+0xd4>
    262e:	8e 32       	cpi	r24, 0x2E	; 46
    2630:	b9 f4       	brne	.+46     	; 0x2660 <vfprintf+0xf6>
    2632:	36 fc       	sbrc	r3, 6
    2634:	75 c1       	rjmp	.+746    	; 0x2920 <vfprintf+0x3b6>
    2636:	23 2d       	mov	r18, r3
    2638:	20 64       	ori	r18, 0x40	; 64
    263a:	32 2e       	mov	r3, r18
    263c:	19 c0       	rjmp	.+50     	; 0x2670 <vfprintf+0x106>
    263e:	36 fe       	sbrs	r3, 6
    2640:	06 c0       	rjmp	.+12     	; 0x264e <vfprintf+0xe4>
    2642:	8a e0       	ldi	r24, 0x0A	; 10
    2644:	98 9e       	mul	r9, r24
    2646:	20 0d       	add	r18, r0
    2648:	11 24       	eor	r1, r1
    264a:	92 2e       	mov	r9, r18
    264c:	11 c0       	rjmp	.+34     	; 0x2670 <vfprintf+0x106>
    264e:	ea e0       	ldi	r30, 0x0A	; 10
    2650:	2e 9e       	mul	r2, r30
    2652:	20 0d       	add	r18, r0
    2654:	11 24       	eor	r1, r1
    2656:	22 2e       	mov	r2, r18
    2658:	f3 2d       	mov	r31, r3
    265a:	f0 62       	ori	r31, 0x20	; 32
    265c:	3f 2e       	mov	r3, r31
    265e:	08 c0       	rjmp	.+16     	; 0x2670 <vfprintf+0x106>
    2660:	8c 36       	cpi	r24, 0x6C	; 108
    2662:	21 f4       	brne	.+8      	; 0x266c <vfprintf+0x102>
    2664:	83 2d       	mov	r24, r3
    2666:	80 68       	ori	r24, 0x80	; 128
    2668:	38 2e       	mov	r3, r24
    266a:	02 c0       	rjmp	.+4      	; 0x2670 <vfprintf+0x106>
    266c:	88 36       	cpi	r24, 0x68	; 104
    266e:	41 f4       	brne	.+16     	; 0x2680 <vfprintf+0x116>
    2670:	f7 01       	movw	r30, r14
    2672:	93 fd       	sbrc	r25, 3
    2674:	85 91       	lpm	r24, Z+
    2676:	93 ff       	sbrs	r25, 3
    2678:	81 91       	ld	r24, Z+
    267a:	7f 01       	movw	r14, r30
    267c:	81 11       	cpse	r24, r1
    267e:	b3 cf       	rjmp	.-154    	; 0x25e6 <vfprintf+0x7c>
    2680:	98 2f       	mov	r25, r24
    2682:	9f 7d       	andi	r25, 0xDF	; 223
    2684:	95 54       	subi	r25, 0x45	; 69
    2686:	93 30       	cpi	r25, 0x03	; 3
    2688:	28 f4       	brcc	.+10     	; 0x2694 <vfprintf+0x12a>
    268a:	0c 5f       	subi	r16, 0xFC	; 252
    268c:	1f 4f       	sbci	r17, 0xFF	; 255
    268e:	9f e3       	ldi	r25, 0x3F	; 63
    2690:	99 83       	std	Y+1, r25	; 0x01
    2692:	0d c0       	rjmp	.+26     	; 0x26ae <vfprintf+0x144>
    2694:	83 36       	cpi	r24, 0x63	; 99
    2696:	31 f0       	breq	.+12     	; 0x26a4 <vfprintf+0x13a>
    2698:	83 37       	cpi	r24, 0x73	; 115
    269a:	71 f0       	breq	.+28     	; 0x26b8 <vfprintf+0x14e>
    269c:	83 35       	cpi	r24, 0x53	; 83
    269e:	09 f0       	breq	.+2      	; 0x26a2 <vfprintf+0x138>
    26a0:	55 c0       	rjmp	.+170    	; 0x274c <vfprintf+0x1e2>
    26a2:	20 c0       	rjmp	.+64     	; 0x26e4 <vfprintf+0x17a>
    26a4:	f8 01       	movw	r30, r16
    26a6:	80 81       	ld	r24, Z
    26a8:	89 83       	std	Y+1, r24	; 0x01
    26aa:	0e 5f       	subi	r16, 0xFE	; 254
    26ac:	1f 4f       	sbci	r17, 0xFF	; 255
    26ae:	88 24       	eor	r8, r8
    26b0:	83 94       	inc	r8
    26b2:	91 2c       	mov	r9, r1
    26b4:	53 01       	movw	r10, r6
    26b6:	12 c0       	rjmp	.+36     	; 0x26dc <vfprintf+0x172>
    26b8:	28 01       	movw	r4, r16
    26ba:	f2 e0       	ldi	r31, 0x02	; 2
    26bc:	4f 0e       	add	r4, r31
    26be:	51 1c       	adc	r5, r1
    26c0:	f8 01       	movw	r30, r16
    26c2:	a0 80       	ld	r10, Z
    26c4:	b1 80       	ldd	r11, Z+1	; 0x01
    26c6:	36 fe       	sbrs	r3, 6
    26c8:	03 c0       	rjmp	.+6      	; 0x26d0 <vfprintf+0x166>
    26ca:	69 2d       	mov	r22, r9
    26cc:	70 e0       	ldi	r23, 0x00	; 0
    26ce:	02 c0       	rjmp	.+4      	; 0x26d4 <vfprintf+0x16a>
    26d0:	6f ef       	ldi	r22, 0xFF	; 255
    26d2:	7f ef       	ldi	r23, 0xFF	; 255
    26d4:	c5 01       	movw	r24, r10
    26d6:	4b d1       	rcall	.+662    	; 0x296e <strnlen>
    26d8:	4c 01       	movw	r8, r24
    26da:	82 01       	movw	r16, r4
    26dc:	f3 2d       	mov	r31, r3
    26de:	ff 77       	andi	r31, 0x7F	; 127
    26e0:	3f 2e       	mov	r3, r31
    26e2:	15 c0       	rjmp	.+42     	; 0x270e <vfprintf+0x1a4>
    26e4:	28 01       	movw	r4, r16
    26e6:	22 e0       	ldi	r18, 0x02	; 2
    26e8:	42 0e       	add	r4, r18
    26ea:	51 1c       	adc	r5, r1
    26ec:	f8 01       	movw	r30, r16
    26ee:	a0 80       	ld	r10, Z
    26f0:	b1 80       	ldd	r11, Z+1	; 0x01
    26f2:	36 fe       	sbrs	r3, 6
    26f4:	03 c0       	rjmp	.+6      	; 0x26fc <vfprintf+0x192>
    26f6:	69 2d       	mov	r22, r9
    26f8:	70 e0       	ldi	r23, 0x00	; 0
    26fa:	02 c0       	rjmp	.+4      	; 0x2700 <vfprintf+0x196>
    26fc:	6f ef       	ldi	r22, 0xFF	; 255
    26fe:	7f ef       	ldi	r23, 0xFF	; 255
    2700:	c5 01       	movw	r24, r10
    2702:	2a d1       	rcall	.+596    	; 0x2958 <strnlen_P>
    2704:	4c 01       	movw	r8, r24
    2706:	f3 2d       	mov	r31, r3
    2708:	f0 68       	ori	r31, 0x80	; 128
    270a:	3f 2e       	mov	r3, r31
    270c:	82 01       	movw	r16, r4
    270e:	33 fc       	sbrc	r3, 3
    2710:	19 c0       	rjmp	.+50     	; 0x2744 <vfprintf+0x1da>
    2712:	82 2d       	mov	r24, r2
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	88 16       	cp	r8, r24
    2718:	99 06       	cpc	r9, r25
    271a:	a0 f4       	brcc	.+40     	; 0x2744 <vfprintf+0x1da>
    271c:	b6 01       	movw	r22, r12
    271e:	80 e2       	ldi	r24, 0x20	; 32
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	30 d1       	rcall	.+608    	; 0x2984 <fputc>
    2724:	2a 94       	dec	r2
    2726:	f5 cf       	rjmp	.-22     	; 0x2712 <vfprintf+0x1a8>
    2728:	f5 01       	movw	r30, r10
    272a:	37 fc       	sbrc	r3, 7
    272c:	85 91       	lpm	r24, Z+
    272e:	37 fe       	sbrs	r3, 7
    2730:	81 91       	ld	r24, Z+
    2732:	5f 01       	movw	r10, r30
    2734:	b6 01       	movw	r22, r12
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	25 d1       	rcall	.+586    	; 0x2984 <fputc>
    273a:	21 10       	cpse	r2, r1
    273c:	2a 94       	dec	r2
    273e:	21 e0       	ldi	r18, 0x01	; 1
    2740:	82 1a       	sub	r8, r18
    2742:	91 08       	sbc	r9, r1
    2744:	81 14       	cp	r8, r1
    2746:	91 04       	cpc	r9, r1
    2748:	79 f7       	brne	.-34     	; 0x2728 <vfprintf+0x1be>
    274a:	e1 c0       	rjmp	.+450    	; 0x290e <vfprintf+0x3a4>
    274c:	84 36       	cpi	r24, 0x64	; 100
    274e:	11 f0       	breq	.+4      	; 0x2754 <vfprintf+0x1ea>
    2750:	89 36       	cpi	r24, 0x69	; 105
    2752:	39 f5       	brne	.+78     	; 0x27a2 <vfprintf+0x238>
    2754:	f8 01       	movw	r30, r16
    2756:	37 fe       	sbrs	r3, 7
    2758:	07 c0       	rjmp	.+14     	; 0x2768 <vfprintf+0x1fe>
    275a:	60 81       	ld	r22, Z
    275c:	71 81       	ldd	r23, Z+1	; 0x01
    275e:	82 81       	ldd	r24, Z+2	; 0x02
    2760:	93 81       	ldd	r25, Z+3	; 0x03
    2762:	0c 5f       	subi	r16, 0xFC	; 252
    2764:	1f 4f       	sbci	r17, 0xFF	; 255
    2766:	08 c0       	rjmp	.+16     	; 0x2778 <vfprintf+0x20e>
    2768:	60 81       	ld	r22, Z
    276a:	71 81       	ldd	r23, Z+1	; 0x01
    276c:	07 2e       	mov	r0, r23
    276e:	00 0c       	add	r0, r0
    2770:	88 0b       	sbc	r24, r24
    2772:	99 0b       	sbc	r25, r25
    2774:	0e 5f       	subi	r16, 0xFE	; 254
    2776:	1f 4f       	sbci	r17, 0xFF	; 255
    2778:	f3 2d       	mov	r31, r3
    277a:	ff 76       	andi	r31, 0x6F	; 111
    277c:	3f 2e       	mov	r3, r31
    277e:	97 ff       	sbrs	r25, 7
    2780:	09 c0       	rjmp	.+18     	; 0x2794 <vfprintf+0x22a>
    2782:	90 95       	com	r25
    2784:	80 95       	com	r24
    2786:	70 95       	com	r23
    2788:	61 95       	neg	r22
    278a:	7f 4f       	sbci	r23, 0xFF	; 255
    278c:	8f 4f       	sbci	r24, 0xFF	; 255
    278e:	9f 4f       	sbci	r25, 0xFF	; 255
    2790:	f0 68       	ori	r31, 0x80	; 128
    2792:	3f 2e       	mov	r3, r31
    2794:	2a e0       	ldi	r18, 0x0A	; 10
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	a3 01       	movw	r20, r6
    279a:	30 d1       	rcall	.+608    	; 0x29fc <__ultoa_invert>
    279c:	88 2e       	mov	r8, r24
    279e:	86 18       	sub	r8, r6
    27a0:	44 c0       	rjmp	.+136    	; 0x282a <vfprintf+0x2c0>
    27a2:	85 37       	cpi	r24, 0x75	; 117
    27a4:	31 f4       	brne	.+12     	; 0x27b2 <vfprintf+0x248>
    27a6:	23 2d       	mov	r18, r3
    27a8:	2f 7e       	andi	r18, 0xEF	; 239
    27aa:	b2 2e       	mov	r11, r18
    27ac:	2a e0       	ldi	r18, 0x0A	; 10
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	25 c0       	rjmp	.+74     	; 0x27fc <vfprintf+0x292>
    27b2:	93 2d       	mov	r25, r3
    27b4:	99 7f       	andi	r25, 0xF9	; 249
    27b6:	b9 2e       	mov	r11, r25
    27b8:	8f 36       	cpi	r24, 0x6F	; 111
    27ba:	c1 f0       	breq	.+48     	; 0x27ec <vfprintf+0x282>
    27bc:	18 f4       	brcc	.+6      	; 0x27c4 <vfprintf+0x25a>
    27be:	88 35       	cpi	r24, 0x58	; 88
    27c0:	79 f0       	breq	.+30     	; 0x27e0 <vfprintf+0x276>
    27c2:	ae c0       	rjmp	.+348    	; 0x2920 <vfprintf+0x3b6>
    27c4:	80 37       	cpi	r24, 0x70	; 112
    27c6:	19 f0       	breq	.+6      	; 0x27ce <vfprintf+0x264>
    27c8:	88 37       	cpi	r24, 0x78	; 120
    27ca:	21 f0       	breq	.+8      	; 0x27d4 <vfprintf+0x26a>
    27cc:	a9 c0       	rjmp	.+338    	; 0x2920 <vfprintf+0x3b6>
    27ce:	e9 2f       	mov	r30, r25
    27d0:	e0 61       	ori	r30, 0x10	; 16
    27d2:	be 2e       	mov	r11, r30
    27d4:	b4 fe       	sbrs	r11, 4
    27d6:	0d c0       	rjmp	.+26     	; 0x27f2 <vfprintf+0x288>
    27d8:	fb 2d       	mov	r31, r11
    27da:	f4 60       	ori	r31, 0x04	; 4
    27dc:	bf 2e       	mov	r11, r31
    27de:	09 c0       	rjmp	.+18     	; 0x27f2 <vfprintf+0x288>
    27e0:	34 fe       	sbrs	r3, 4
    27e2:	0a c0       	rjmp	.+20     	; 0x27f8 <vfprintf+0x28e>
    27e4:	29 2f       	mov	r18, r25
    27e6:	26 60       	ori	r18, 0x06	; 6
    27e8:	b2 2e       	mov	r11, r18
    27ea:	06 c0       	rjmp	.+12     	; 0x27f8 <vfprintf+0x28e>
    27ec:	28 e0       	ldi	r18, 0x08	; 8
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	05 c0       	rjmp	.+10     	; 0x27fc <vfprintf+0x292>
    27f2:	20 e1       	ldi	r18, 0x10	; 16
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	02 c0       	rjmp	.+4      	; 0x27fc <vfprintf+0x292>
    27f8:	20 e1       	ldi	r18, 0x10	; 16
    27fa:	32 e0       	ldi	r19, 0x02	; 2
    27fc:	f8 01       	movw	r30, r16
    27fe:	b7 fe       	sbrs	r11, 7
    2800:	07 c0       	rjmp	.+14     	; 0x2810 <vfprintf+0x2a6>
    2802:	60 81       	ld	r22, Z
    2804:	71 81       	ldd	r23, Z+1	; 0x01
    2806:	82 81       	ldd	r24, Z+2	; 0x02
    2808:	93 81       	ldd	r25, Z+3	; 0x03
    280a:	0c 5f       	subi	r16, 0xFC	; 252
    280c:	1f 4f       	sbci	r17, 0xFF	; 255
    280e:	06 c0       	rjmp	.+12     	; 0x281c <vfprintf+0x2b2>
    2810:	60 81       	ld	r22, Z
    2812:	71 81       	ldd	r23, Z+1	; 0x01
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	0e 5f       	subi	r16, 0xFE	; 254
    281a:	1f 4f       	sbci	r17, 0xFF	; 255
    281c:	a3 01       	movw	r20, r6
    281e:	ee d0       	rcall	.+476    	; 0x29fc <__ultoa_invert>
    2820:	88 2e       	mov	r8, r24
    2822:	86 18       	sub	r8, r6
    2824:	fb 2d       	mov	r31, r11
    2826:	ff 77       	andi	r31, 0x7F	; 127
    2828:	3f 2e       	mov	r3, r31
    282a:	36 fe       	sbrs	r3, 6
    282c:	0d c0       	rjmp	.+26     	; 0x2848 <vfprintf+0x2de>
    282e:	23 2d       	mov	r18, r3
    2830:	2e 7f       	andi	r18, 0xFE	; 254
    2832:	a2 2e       	mov	r10, r18
    2834:	89 14       	cp	r8, r9
    2836:	58 f4       	brcc	.+22     	; 0x284e <vfprintf+0x2e4>
    2838:	34 fe       	sbrs	r3, 4
    283a:	0b c0       	rjmp	.+22     	; 0x2852 <vfprintf+0x2e8>
    283c:	32 fc       	sbrc	r3, 2
    283e:	09 c0       	rjmp	.+18     	; 0x2852 <vfprintf+0x2e8>
    2840:	83 2d       	mov	r24, r3
    2842:	8e 7e       	andi	r24, 0xEE	; 238
    2844:	a8 2e       	mov	r10, r24
    2846:	05 c0       	rjmp	.+10     	; 0x2852 <vfprintf+0x2e8>
    2848:	b8 2c       	mov	r11, r8
    284a:	a3 2c       	mov	r10, r3
    284c:	03 c0       	rjmp	.+6      	; 0x2854 <vfprintf+0x2ea>
    284e:	b8 2c       	mov	r11, r8
    2850:	01 c0       	rjmp	.+2      	; 0x2854 <vfprintf+0x2ea>
    2852:	b9 2c       	mov	r11, r9
    2854:	a4 fe       	sbrs	r10, 4
    2856:	0f c0       	rjmp	.+30     	; 0x2876 <vfprintf+0x30c>
    2858:	fe 01       	movw	r30, r28
    285a:	e8 0d       	add	r30, r8
    285c:	f1 1d       	adc	r31, r1
    285e:	80 81       	ld	r24, Z
    2860:	80 33       	cpi	r24, 0x30	; 48
    2862:	21 f4       	brne	.+8      	; 0x286c <vfprintf+0x302>
    2864:	9a 2d       	mov	r25, r10
    2866:	99 7e       	andi	r25, 0xE9	; 233
    2868:	a9 2e       	mov	r10, r25
    286a:	09 c0       	rjmp	.+18     	; 0x287e <vfprintf+0x314>
    286c:	a2 fe       	sbrs	r10, 2
    286e:	06 c0       	rjmp	.+12     	; 0x287c <vfprintf+0x312>
    2870:	b3 94       	inc	r11
    2872:	b3 94       	inc	r11
    2874:	04 c0       	rjmp	.+8      	; 0x287e <vfprintf+0x314>
    2876:	8a 2d       	mov	r24, r10
    2878:	86 78       	andi	r24, 0x86	; 134
    287a:	09 f0       	breq	.+2      	; 0x287e <vfprintf+0x314>
    287c:	b3 94       	inc	r11
    287e:	a3 fc       	sbrc	r10, 3
    2880:	10 c0       	rjmp	.+32     	; 0x28a2 <vfprintf+0x338>
    2882:	a0 fe       	sbrs	r10, 0
    2884:	06 c0       	rjmp	.+12     	; 0x2892 <vfprintf+0x328>
    2886:	b2 14       	cp	r11, r2
    2888:	80 f4       	brcc	.+32     	; 0x28aa <vfprintf+0x340>
    288a:	28 0c       	add	r2, r8
    288c:	92 2c       	mov	r9, r2
    288e:	9b 18       	sub	r9, r11
    2890:	0d c0       	rjmp	.+26     	; 0x28ac <vfprintf+0x342>
    2892:	b2 14       	cp	r11, r2
    2894:	58 f4       	brcc	.+22     	; 0x28ac <vfprintf+0x342>
    2896:	b6 01       	movw	r22, r12
    2898:	80 e2       	ldi	r24, 0x20	; 32
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	73 d0       	rcall	.+230    	; 0x2984 <fputc>
    289e:	b3 94       	inc	r11
    28a0:	f8 cf       	rjmp	.-16     	; 0x2892 <vfprintf+0x328>
    28a2:	b2 14       	cp	r11, r2
    28a4:	18 f4       	brcc	.+6      	; 0x28ac <vfprintf+0x342>
    28a6:	2b 18       	sub	r2, r11
    28a8:	02 c0       	rjmp	.+4      	; 0x28ae <vfprintf+0x344>
    28aa:	98 2c       	mov	r9, r8
    28ac:	21 2c       	mov	r2, r1
    28ae:	a4 fe       	sbrs	r10, 4
    28b0:	0f c0       	rjmp	.+30     	; 0x28d0 <vfprintf+0x366>
    28b2:	b6 01       	movw	r22, r12
    28b4:	80 e3       	ldi	r24, 0x30	; 48
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	65 d0       	rcall	.+202    	; 0x2984 <fputc>
    28ba:	a2 fe       	sbrs	r10, 2
    28bc:	16 c0       	rjmp	.+44     	; 0x28ea <vfprintf+0x380>
    28be:	a1 fc       	sbrc	r10, 1
    28c0:	03 c0       	rjmp	.+6      	; 0x28c8 <vfprintf+0x35e>
    28c2:	88 e7       	ldi	r24, 0x78	; 120
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	02 c0       	rjmp	.+4      	; 0x28cc <vfprintf+0x362>
    28c8:	88 e5       	ldi	r24, 0x58	; 88
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	b6 01       	movw	r22, r12
    28ce:	0c c0       	rjmp	.+24     	; 0x28e8 <vfprintf+0x37e>
    28d0:	8a 2d       	mov	r24, r10
    28d2:	86 78       	andi	r24, 0x86	; 134
    28d4:	51 f0       	breq	.+20     	; 0x28ea <vfprintf+0x380>
    28d6:	a1 fe       	sbrs	r10, 1
    28d8:	02 c0       	rjmp	.+4      	; 0x28de <vfprintf+0x374>
    28da:	8b e2       	ldi	r24, 0x2B	; 43
    28dc:	01 c0       	rjmp	.+2      	; 0x28e0 <vfprintf+0x376>
    28de:	80 e2       	ldi	r24, 0x20	; 32
    28e0:	a7 fc       	sbrc	r10, 7
    28e2:	8d e2       	ldi	r24, 0x2D	; 45
    28e4:	b6 01       	movw	r22, r12
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	4d d0       	rcall	.+154    	; 0x2984 <fputc>
    28ea:	89 14       	cp	r8, r9
    28ec:	30 f4       	brcc	.+12     	; 0x28fa <vfprintf+0x390>
    28ee:	b6 01       	movw	r22, r12
    28f0:	80 e3       	ldi	r24, 0x30	; 48
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	47 d0       	rcall	.+142    	; 0x2984 <fputc>
    28f6:	9a 94       	dec	r9
    28f8:	f8 cf       	rjmp	.-16     	; 0x28ea <vfprintf+0x380>
    28fa:	8a 94       	dec	r8
    28fc:	f3 01       	movw	r30, r6
    28fe:	e8 0d       	add	r30, r8
    2900:	f1 1d       	adc	r31, r1
    2902:	80 81       	ld	r24, Z
    2904:	b6 01       	movw	r22, r12
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	3d d0       	rcall	.+122    	; 0x2984 <fputc>
    290a:	81 10       	cpse	r8, r1
    290c:	f6 cf       	rjmp	.-20     	; 0x28fa <vfprintf+0x390>
    290e:	22 20       	and	r2, r2
    2910:	09 f4       	brne	.+2      	; 0x2914 <vfprintf+0x3aa>
    2912:	4e ce       	rjmp	.-868    	; 0x25b0 <vfprintf+0x46>
    2914:	b6 01       	movw	r22, r12
    2916:	80 e2       	ldi	r24, 0x20	; 32
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	34 d0       	rcall	.+104    	; 0x2984 <fputc>
    291c:	2a 94       	dec	r2
    291e:	f7 cf       	rjmp	.-18     	; 0x290e <vfprintf+0x3a4>
    2920:	f6 01       	movw	r30, r12
    2922:	86 81       	ldd	r24, Z+6	; 0x06
    2924:	97 81       	ldd	r25, Z+7	; 0x07
    2926:	02 c0       	rjmp	.+4      	; 0x292c <vfprintf+0x3c2>
    2928:	8f ef       	ldi	r24, 0xFF	; 255
    292a:	9f ef       	ldi	r25, 0xFF	; 255
    292c:	2b 96       	adiw	r28, 0x0b	; 11
    292e:	cd bf       	out	0x3d, r28	; 61
    2930:	de bf       	out	0x3e, r29	; 62
    2932:	df 91       	pop	r29
    2934:	cf 91       	pop	r28
    2936:	1f 91       	pop	r17
    2938:	0f 91       	pop	r16
    293a:	ff 90       	pop	r15
    293c:	ef 90       	pop	r14
    293e:	df 90       	pop	r13
    2940:	cf 90       	pop	r12
    2942:	bf 90       	pop	r11
    2944:	af 90       	pop	r10
    2946:	9f 90       	pop	r9
    2948:	8f 90       	pop	r8
    294a:	7f 90       	pop	r7
    294c:	6f 90       	pop	r6
    294e:	5f 90       	pop	r5
    2950:	4f 90       	pop	r4
    2952:	3f 90       	pop	r3
    2954:	2f 90       	pop	r2
    2956:	08 95       	ret

00002958 <strnlen_P>:
    2958:	fc 01       	movw	r30, r24
    295a:	05 90       	lpm	r0, Z+
    295c:	61 50       	subi	r22, 0x01	; 1
    295e:	70 40       	sbci	r23, 0x00	; 0
    2960:	01 10       	cpse	r0, r1
    2962:	d8 f7       	brcc	.-10     	; 0x295a <strnlen_P+0x2>
    2964:	80 95       	com	r24
    2966:	90 95       	com	r25
    2968:	8e 0f       	add	r24, r30
    296a:	9f 1f       	adc	r25, r31
    296c:	08 95       	ret

0000296e <strnlen>:
    296e:	fc 01       	movw	r30, r24
    2970:	61 50       	subi	r22, 0x01	; 1
    2972:	70 40       	sbci	r23, 0x00	; 0
    2974:	01 90       	ld	r0, Z+
    2976:	01 10       	cpse	r0, r1
    2978:	d8 f7       	brcc	.-10     	; 0x2970 <strnlen+0x2>
    297a:	80 95       	com	r24
    297c:	90 95       	com	r25
    297e:	8e 0f       	add	r24, r30
    2980:	9f 1f       	adc	r25, r31
    2982:	08 95       	ret

00002984 <fputc>:
    2984:	0f 93       	push	r16
    2986:	1f 93       	push	r17
    2988:	cf 93       	push	r28
    298a:	df 93       	push	r29
    298c:	fb 01       	movw	r30, r22
    298e:	23 81       	ldd	r18, Z+3	; 0x03
    2990:	21 fd       	sbrc	r18, 1
    2992:	03 c0       	rjmp	.+6      	; 0x299a <fputc+0x16>
    2994:	8f ef       	ldi	r24, 0xFF	; 255
    2996:	9f ef       	ldi	r25, 0xFF	; 255
    2998:	2c c0       	rjmp	.+88     	; 0x29f2 <fputc+0x6e>
    299a:	22 ff       	sbrs	r18, 2
    299c:	16 c0       	rjmp	.+44     	; 0x29ca <fputc+0x46>
    299e:	46 81       	ldd	r20, Z+6	; 0x06
    29a0:	57 81       	ldd	r21, Z+7	; 0x07
    29a2:	24 81       	ldd	r18, Z+4	; 0x04
    29a4:	35 81       	ldd	r19, Z+5	; 0x05
    29a6:	42 17       	cp	r20, r18
    29a8:	53 07       	cpc	r21, r19
    29aa:	44 f4       	brge	.+16     	; 0x29bc <fputc+0x38>
    29ac:	a0 81       	ld	r26, Z
    29ae:	b1 81       	ldd	r27, Z+1	; 0x01
    29b0:	9d 01       	movw	r18, r26
    29b2:	2f 5f       	subi	r18, 0xFF	; 255
    29b4:	3f 4f       	sbci	r19, 0xFF	; 255
    29b6:	20 83       	st	Z, r18
    29b8:	31 83       	std	Z+1, r19	; 0x01
    29ba:	8c 93       	st	X, r24
    29bc:	26 81       	ldd	r18, Z+6	; 0x06
    29be:	37 81       	ldd	r19, Z+7	; 0x07
    29c0:	2f 5f       	subi	r18, 0xFF	; 255
    29c2:	3f 4f       	sbci	r19, 0xFF	; 255
    29c4:	26 83       	std	Z+6, r18	; 0x06
    29c6:	37 83       	std	Z+7, r19	; 0x07
    29c8:	14 c0       	rjmp	.+40     	; 0x29f2 <fputc+0x6e>
    29ca:	8b 01       	movw	r16, r22
    29cc:	ec 01       	movw	r28, r24
    29ce:	fb 01       	movw	r30, r22
    29d0:	00 84       	ldd	r0, Z+8	; 0x08
    29d2:	f1 85       	ldd	r31, Z+9	; 0x09
    29d4:	e0 2d       	mov	r30, r0
    29d6:	19 95       	eicall
    29d8:	89 2b       	or	r24, r25
    29da:	e1 f6       	brne	.-72     	; 0x2994 <fputc+0x10>
    29dc:	d8 01       	movw	r26, r16
    29de:	16 96       	adiw	r26, 0x06	; 6
    29e0:	8d 91       	ld	r24, X+
    29e2:	9c 91       	ld	r25, X
    29e4:	17 97       	sbiw	r26, 0x07	; 7
    29e6:	01 96       	adiw	r24, 0x01	; 1
    29e8:	16 96       	adiw	r26, 0x06	; 6
    29ea:	8d 93       	st	X+, r24
    29ec:	9c 93       	st	X, r25
    29ee:	17 97       	sbiw	r26, 0x07	; 7
    29f0:	ce 01       	movw	r24, r28
    29f2:	df 91       	pop	r29
    29f4:	cf 91       	pop	r28
    29f6:	1f 91       	pop	r17
    29f8:	0f 91       	pop	r16
    29fa:	08 95       	ret

000029fc <__ultoa_invert>:
    29fc:	fa 01       	movw	r30, r20
    29fe:	aa 27       	eor	r26, r26
    2a00:	28 30       	cpi	r18, 0x08	; 8
    2a02:	51 f1       	breq	.+84     	; 0x2a58 <__ultoa_invert+0x5c>
    2a04:	20 31       	cpi	r18, 0x10	; 16
    2a06:	81 f1       	breq	.+96     	; 0x2a68 <__ultoa_invert+0x6c>
    2a08:	e8 94       	clt
    2a0a:	6f 93       	push	r22
    2a0c:	6e 7f       	andi	r22, 0xFE	; 254
    2a0e:	6e 5f       	subi	r22, 0xFE	; 254
    2a10:	7f 4f       	sbci	r23, 0xFF	; 255
    2a12:	8f 4f       	sbci	r24, 0xFF	; 255
    2a14:	9f 4f       	sbci	r25, 0xFF	; 255
    2a16:	af 4f       	sbci	r26, 0xFF	; 255
    2a18:	b1 e0       	ldi	r27, 0x01	; 1
    2a1a:	3e d0       	rcall	.+124    	; 0x2a98 <__ultoa_invert+0x9c>
    2a1c:	b4 e0       	ldi	r27, 0x04	; 4
    2a1e:	3c d0       	rcall	.+120    	; 0x2a98 <__ultoa_invert+0x9c>
    2a20:	67 0f       	add	r22, r23
    2a22:	78 1f       	adc	r23, r24
    2a24:	89 1f       	adc	r24, r25
    2a26:	9a 1f       	adc	r25, r26
    2a28:	a1 1d       	adc	r26, r1
    2a2a:	68 0f       	add	r22, r24
    2a2c:	79 1f       	adc	r23, r25
    2a2e:	8a 1f       	adc	r24, r26
    2a30:	91 1d       	adc	r25, r1
    2a32:	a1 1d       	adc	r26, r1
    2a34:	6a 0f       	add	r22, r26
    2a36:	71 1d       	adc	r23, r1
    2a38:	81 1d       	adc	r24, r1
    2a3a:	91 1d       	adc	r25, r1
    2a3c:	a1 1d       	adc	r26, r1
    2a3e:	20 d0       	rcall	.+64     	; 0x2a80 <__ultoa_invert+0x84>
    2a40:	09 f4       	brne	.+2      	; 0x2a44 <__ultoa_invert+0x48>
    2a42:	68 94       	set
    2a44:	3f 91       	pop	r19
    2a46:	2a e0       	ldi	r18, 0x0A	; 10
    2a48:	26 9f       	mul	r18, r22
    2a4a:	11 24       	eor	r1, r1
    2a4c:	30 19       	sub	r19, r0
    2a4e:	30 5d       	subi	r19, 0xD0	; 208
    2a50:	31 93       	st	Z+, r19
    2a52:	de f6       	brtc	.-74     	; 0x2a0a <__ultoa_invert+0xe>
    2a54:	cf 01       	movw	r24, r30
    2a56:	08 95       	ret
    2a58:	46 2f       	mov	r20, r22
    2a5a:	47 70       	andi	r20, 0x07	; 7
    2a5c:	40 5d       	subi	r20, 0xD0	; 208
    2a5e:	41 93       	st	Z+, r20
    2a60:	b3 e0       	ldi	r27, 0x03	; 3
    2a62:	0f d0       	rcall	.+30     	; 0x2a82 <__ultoa_invert+0x86>
    2a64:	c9 f7       	brne	.-14     	; 0x2a58 <__ultoa_invert+0x5c>
    2a66:	f6 cf       	rjmp	.-20     	; 0x2a54 <__ultoa_invert+0x58>
    2a68:	46 2f       	mov	r20, r22
    2a6a:	4f 70       	andi	r20, 0x0F	; 15
    2a6c:	40 5d       	subi	r20, 0xD0	; 208
    2a6e:	4a 33       	cpi	r20, 0x3A	; 58
    2a70:	18 f0       	brcs	.+6      	; 0x2a78 <__ultoa_invert+0x7c>
    2a72:	49 5d       	subi	r20, 0xD9	; 217
    2a74:	31 fd       	sbrc	r19, 1
    2a76:	40 52       	subi	r20, 0x20	; 32
    2a78:	41 93       	st	Z+, r20
    2a7a:	02 d0       	rcall	.+4      	; 0x2a80 <__ultoa_invert+0x84>
    2a7c:	a9 f7       	brne	.-22     	; 0x2a68 <__ultoa_invert+0x6c>
    2a7e:	ea cf       	rjmp	.-44     	; 0x2a54 <__ultoa_invert+0x58>
    2a80:	b4 e0       	ldi	r27, 0x04	; 4
    2a82:	a6 95       	lsr	r26
    2a84:	97 95       	ror	r25
    2a86:	87 95       	ror	r24
    2a88:	77 95       	ror	r23
    2a8a:	67 95       	ror	r22
    2a8c:	ba 95       	dec	r27
    2a8e:	c9 f7       	brne	.-14     	; 0x2a82 <__ultoa_invert+0x86>
    2a90:	00 97       	sbiw	r24, 0x00	; 0
    2a92:	61 05       	cpc	r22, r1
    2a94:	71 05       	cpc	r23, r1
    2a96:	08 95       	ret
    2a98:	9b 01       	movw	r18, r22
    2a9a:	ac 01       	movw	r20, r24
    2a9c:	0a 2e       	mov	r0, r26
    2a9e:	06 94       	lsr	r0
    2aa0:	57 95       	ror	r21
    2aa2:	47 95       	ror	r20
    2aa4:	37 95       	ror	r19
    2aa6:	27 95       	ror	r18
    2aa8:	ba 95       	dec	r27
    2aaa:	c9 f7       	brne	.-14     	; 0x2a9e <__ultoa_invert+0xa2>
    2aac:	62 0f       	add	r22, r18
    2aae:	73 1f       	adc	r23, r19
    2ab0:	84 1f       	adc	r24, r20
    2ab2:	95 1f       	adc	r25, r21
    2ab4:	a0 1d       	adc	r26, r0
    2ab6:	08 95       	ret

00002ab8 <_exit>:
    2ab8:	f8 94       	cli

00002aba <__stop_program>:
    2aba:	ff cf       	rjmp	.-2      	; 0x2aba <__stop_program>
